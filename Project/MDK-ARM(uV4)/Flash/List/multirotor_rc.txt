; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_rc.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_rc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -IE:\GitHub\HT-Hawk\Project\MDK-ARM(uV4)\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_rc.crf ..\..\User\Function\MultiRotor_rc\MultiRotor_rc.c]
                          THUMB

                          AREA ||i.RC_Data_Refine||, CODE, READONLY, ALIGN=2

                  RC_Data_Refine PROC
;;;92     /*====================================================================================================*/
;;;93     void RC_Data_Refine(void)
000000  b530              PUSH     {r4,r5,lr}
;;;94     {
000002  b086              SUB      sp,sp,#0x18
;;;95       u8 chan,a;	
;;;96     
;;;97     	u16 rcDataMax[6], rcDataMin[6];
;;;98     	static int16_t rcDataCache[6][4], rcDataMean[6];
;;;99     	static uint8_t rcValuesIndex = 0;
;;;100    
;;;101    	rcValuesIndex++;
000004  4a4e              LDR      r2,|L1.320|
000006  7812              LDRB     r2,[r2,#0]  ; rcValuesIndex
000008  1c52              ADDS     r2,r2,#1
00000a  4b4d              LDR      r3,|L1.320|
00000c  701a              STRB     r2,[r3,#0]
;;;102    	for (chan = 0; chan < 6; chan++) {
00000e  2000              MOVS     r0,#0
000010  e07c              B        |L1.268|
                  |L1.18|
;;;103    		  //滑动平均值滤波，4次
;;;104    		  if(RC_Pwm_In[chan]>2800 || RC_Pwm_In[chan]<800)  RC_Pwm_In[chan] = RC_Pwm_In_his[chan];
000012  4a4c              LDR      r2,|L1.324|
000014  f8322010          LDRH     r2,[r2,r0,LSL #1]
000018  f5b26f2f          CMP      r2,#0xaf0
00001c  dc05              BGT      |L1.42|
00001e  4a49              LDR      r2,|L1.324|
000020  f8322010          LDRH     r2,[r2,r0,LSL #1]
000024  f5b27f48          CMP      r2,#0x320
000028  da05              BGE      |L1.54|
                  |L1.42|
00002a  4a47              LDR      r2,|L1.328|
00002c  f8322010          LDRH     r2,[r2,r0,LSL #1]
000030  4b44              LDR      r3,|L1.324|
000032  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L1.54|
;;;105    			rcDataCache[chan][rcValuesIndex % 4] = RC_Pwm_In[chan] ;		
000036  4b43              LDR      r3,|L1.324|
000038  f8333010          LDRH     r3,[r3,r0,LSL #1]
00003c  b21b              SXTH     r3,r3
00003e  4c40              LDR      r4,|L1.320|
000040  7822              LDRB     r2,[r4,#0]  ; rcValuesIndex
000042  17d4              ASRS     r4,r2,#31
000044  eb027494          ADD      r4,r2,r4,LSR #30
000048  10a4              ASRS     r4,r4,#2
00004a  eba20484          SUB      r4,r2,r4,LSL #2
00004e  4d3f              LDR      r5,|L1.332|
000050  eb0505c0          ADD      r5,r5,r0,LSL #3
000054  f8253014          STRH     r3,[r5,r4,LSL #1]
;;;106    		  RC_Pwm_In_his[chan] = RC_Pwm_In[chan];
000058  4a3a              LDR      r2,|L1.324|
00005a  f8322010          LDRH     r2,[r2,r0,LSL #1]
00005e  4b3a              LDR      r3,|L1.328|
000060  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;107    			
;;;108    			rcDataMean[chan] = 0;
000064  2200              MOVS     r2,#0
000066  4b3a              LDR      r3,|L1.336|
000068  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;109    		  rcDataMax[chan] = 0;
00006c  ab03              ADD      r3,sp,#0xc
00006e  f8232010          STRH     r2,[r3,r0,LSL #1]
;;;110    		  rcDataMin[chan] = 25000;
000072  f24612a8          MOV      r2,#0x61a8
000076  f82d2010          STRH     r2,[sp,r0,LSL #1]
;;;111    		
;;;112    			for (a = 0; a < 4; a++) {
00007a  2100              MOVS     r1,#0
00007c  e031              B        |L1.226|
                  |L1.126|
;;;113    				  // 记录缓存中最大值 && 最小值
;;;114    				  if(rcDataCache[chan][a] > rcDataMax[chan])  rcDataMax[chan] = rcDataCache[chan][a];     
00007e  4a33              LDR      r2,|L1.332|
000080  eb0202c0          ADD      r2,r2,r0,LSL #3
000084  f9322011          LDRSH    r2,[r2,r1,LSL #1]
000088  ab03              ADD      r3,sp,#0xc
00008a  f8333010          LDRH     r3,[r3,r0,LSL #1]
00008e  429a              CMP      r2,r3
000090  dd07              BLE      |L1.162|
000092  4a2e              LDR      r2,|L1.332|
000094  eb0202c0          ADD      r2,r2,r0,LSL #3
000098  f8322011          LDRH     r2,[r2,r1,LSL #1]
00009c  ab03              ADD      r3,sp,#0xc
00009e  f8232010          STRH     r2,[r3,r0,LSL #1]
                  |L1.162|
;;;115    					if(rcDataCache[chan][a] < rcDataMin[chan])	rcDataMin[chan] = rcDataCache[chan][a]; 
0000a2  4a2a              LDR      r2,|L1.332|
0000a4  eb0202c0          ADD      r2,r2,r0,LSL #3
0000a8  f9322011          LDRSH    r2,[r2,r1,LSL #1]
0000ac  f83d3010          LDRH     r3,[sp,r0,LSL #1]
0000b0  429a              CMP      r2,r3
0000b2  da07              BGE      |L1.196|
0000b4  4a25              LDR      r2,|L1.332|
0000b6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ba  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000be  b292              UXTH     r2,r2
0000c0  f82d2010          STRH     r2,[sp,r0,LSL #1]
                  |L1.196|
;;;116    				  // 求和
;;;117    					rcDataMean[chan] += rcDataCache[chan][a];  
0000c4  4a21              LDR      r2,|L1.332|
0000c6  eb0202c0          ADD      r2,r2,r0,LSL #3
0000ca  f8322011          LDRH     r2,[r2,r1,LSL #1]
0000ce  4b20              LDR      r3,|L1.336|
0000d0  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000d4  441a              ADD      r2,r2,r3
0000d6  b212              SXTH     r2,r2
0000d8  4b1d              LDR      r3,|L1.336|
0000da  f8232010          STRH     r2,[r3,r0,LSL #1]
0000de  1c4a              ADDS     r2,r1,#1              ;112
0000e0  b2d1              UXTB     r1,r2                 ;112
                  |L1.226|
0000e2  2904              CMP      r1,#4                 ;112
0000e4  dbcb              BLT      |L1.126|
;;;118          }
;;;119    			// 剔除缓存中 最大值 && 最小值 
;;;120    			rcDataMean[chan] = (rcDataMean[chan] - (rcDataMax[chan] + rcDataMin[chan])) / 2;
0000e6  ab03              ADD      r3,sp,#0xc
0000e8  f8333010          LDRH     r3,[r3,r0,LSL #1]
0000ec  f83d4010          LDRH     r4,[sp,r0,LSL #1]
0000f0  4423              ADD      r3,r3,r4
0000f2  4c17              LDR      r4,|L1.336|
0000f4  f9344010          LDRSH    r4,[r4,r0,LSL #1]
0000f8  1ae2              SUBS     r2,r4,r3
0000fa  eb0273d2          ADD      r3,r2,r2,LSR #31
0000fe  105b              ASRS     r3,r3,#1
000100  b21b              SXTH     r3,r3
000102  4c13              LDR      r4,|L1.336|
000104  f8243010          STRH     r3,[r4,r0,LSL #1]
000108  1c42              ADDS     r2,r0,#1              ;102
00010a  b2d0              UXTB     r0,r2                 ;102
                  |L1.268|
00010c  2806              CMP      r0,#6                 ;102
00010e  db80              BLT      |L1.18|
;;;121    	} 
;;;122    
;;;123    	 RC_Data.YAW   = RC_Data.rc_data[2] =rcDataMean[3];
000110  4a0f              LDR      r2,|L1.336|
000112  f9b22006          LDRSH    r2,[r2,#6]  ; rcDataMean
000116  4b0f              LDR      r3,|L1.340|
000118  809a              STRH     r2,[r3,#4]
00011a  81da              STRH     r2,[r3,#0xe]
;;;124    	 RC_Data.THROTTLE  = RC_Data.rc_data[3] =rcDataMean[2];
00011c  4a0c              LDR      r2,|L1.336|
00011e  f9b22004          LDRSH    r2,[r2,#4]  ; rcDataMean
000122  80da              STRH     r2,[r3,#6]
000124  819a              STRH     r2,[r3,#0xc]
;;;125    	 RC_Data.ROLL  = RC_Data.rc_data[0] = rcDataMean[0];
000126  4a0a              LDR      r2,|L1.336|
000128  f9b22000          LDRSH    r2,[r2,#0]  ; rcDataMean
00012c  801a              STRH     r2,[r3,#0]
00012e  811a              STRH     r2,[r3,#8]
;;;126    	 RC_Data.PITCH = RC_Data.rc_data[1] = rcDataMean[1];
000130  4a07              LDR      r2,|L1.336|
000132  f9b22002          LDRSH    r2,[r2,#2]  ; rcDataMean
000136  805a              STRH     r2,[r3,#2]
000138  815a              STRH     r2,[r3,#0xa]
;;;127    }
00013a  b006              ADD      sp,sp,#0x18
00013c  bd30              POP      {r4,r5,pc}
;;;128    
                          ENDP

00013e  0000              DCW      0x0000
                  |L1.320|
                          DCD      rcValuesIndex
                  |L1.324|
                          DCD      RC_Pwm_In
                  |L1.328|
                          DCD      RC_Pwm_In_his
                  |L1.332|
                          DCD      rcDataCache
                  |L1.336|
                          DCD      rcDataMean
                  |L1.340|
                          DCD      RC_Data

                          AREA ||i.RC_directive||, CODE, READONLY, ALIGN=2

                  RC_directive PROC
;;;32     /*====================================================================================================*/
;;;33     void RC_directive(void)
000000  2000              MOVS     r0,#0
;;;34     {
;;;35       u8 stTmp = 0,i;
;;;36     	static u8  rcSticks;
;;;37     	static u8  rcDelayCommand;
;;;38       static u16 seltLockCommend;	
;;;39     	
;;;40     	for (i = 0; i < 4; i++) {
000002  2100              MOVS     r1,#0
000004  e012              B        |L2.44|
                  |L2.6|
;;;41     			stTmp >>= 2;
000006  1080              ASRS     r0,r0,#2
;;;42     			if (RC_Data.rc_data[i] > RC_MINCHECK)
000008  4a39              LDR      r2,|L2.240|
00000a  f9322011          LDRSH    r2,[r2,r1,LSL #1]
00000e  f5b26f96          CMP      r2,#0x4b0
000012  dd01              BLE      |L2.24|
;;;43     					stTmp |= 0x80;  // check for MIN
000014  f0400080          ORR      r0,r0,#0x80
                  |L2.24|
;;;44     			if (RC_Data.rc_data[i] < RC_MAXCHECK)
000018  4a35              LDR      r2,|L2.240|
00001a  f9322011          LDRSH    r2,[r2,r1,LSL #1]
00001e  f5b26fe1          CMP      r2,#0x708
000022  da01              BGE      |L2.40|
;;;45     					stTmp |= 0x40;  // check for MAX
000024  f0400040          ORR      r0,r0,#0x40
                  |L2.40|
000028  1c4a              ADDS     r2,r1,#1              ;40
00002a  b2d1              UXTB     r1,r2                 ;40
                  |L2.44|
00002c  2904              CMP      r1,#4                 ;40
00002e  dbea              BLT      |L2.6|
;;;46     	}
;;;47     	if (stTmp == rcSticks) {
000030  4a30              LDR      r2,|L2.244|
000032  7812              LDRB     r2,[r2,#0]  ; rcSticks
000034  4290              CMP      r0,r2
000036  d109              BNE      |L2.76|
;;;48     			if (rcDelayCommand < 250)
000038  4a2f              LDR      r2,|L2.248|
00003a  7812              LDRB     r2,[r2,#0]  ; rcDelayCommand
00003c  2afa              CMP      r2,#0xfa
00003e  da08              BGE      |L2.82|
;;;49     					rcDelayCommand++;
000040  4a2d              LDR      r2,|L2.248|
000042  7812              LDRB     r2,[r2,#0]  ; rcDelayCommand
000044  1c52              ADDS     r2,r2,#1
000046  4b2c              LDR      r3,|L2.248|
000048  701a              STRB     r2,[r3,#0]
00004a  e002              B        |L2.82|
                  |L2.76|
;;;50     	} else
;;;51     			rcDelayCommand = 0;
00004c  2200              MOVS     r2,#0
00004e  4b2a              LDR      r3,|L2.248|
000050  701a              STRB     r2,[r3,#0]
                  |L2.82|
;;;52     	rcSticks = stTmp;
000052  4a28              LDR      r2,|L2.244|
000054  7010              STRB     r0,[r2,#0]
;;;53     	
;;;54     	if (rcDelayCommand == 150) {
000056  4a28              LDR      r2,|L2.248|
000058  7812              LDRB     r2,[r2,#0]  ; rcDelayCommand
00005a  2a96              CMP      r2,#0x96
00005c  d12d              BNE      |L2.186|
;;;55     		if (flag.ARMED){
00005e  4a27              LDR      r2,|L2.252|
000060  7912              LDRB     r2,[r2,#4]  ; flag
000062  b13a              CBZ      r2,|L2.116|
;;;56     			 if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_CE)   //上锁 
000064  4a23              LDR      r2,|L2.244|
000066  7812              LDRB     r2,[r2,#0]  ; rcSticks
000068  2a5f              CMP      r2,#0x5f
00006a  d126              BNE      |L2.186|
;;;57     				  flag.ARMED=0;
00006c  2200              MOVS     r2,#0
00006e  4b23              LDR      r3,|L2.252|
000070  711a              STRB     r2,[r3,#4]
000072  e022              B        |L2.186|
                  |L2.116|
;;;58     		}
;;;59     		else{
;;;60           if (rcSticks == THR_LO + YAW_HI + PIT_CE + ROL_CE)    //解锁   
000074  4a1f              LDR      r2,|L2.244|
000076  7812              LDRB     r2,[r2,#0]  ; rcSticks
000078  2a6f              CMP      r2,#0x6f
00007a  d102              BNE      |L2.130|
;;;61     					flag.ARMED=1;
00007c  2201              MOVS     r2,#1
00007e  4b1f              LDR      r3,|L2.252|
000080  711a              STRB     r2,[r3,#4]
                  |L2.130|
;;;62     			if (rcSticks == THR_LO + YAW_LO + PIT_CE + ROL_HI)    //加速度矫正  
000082  4a1c              LDR      r2,|L2.244|
000084  7812              LDRB     r2,[r2,#0]  ; rcSticks
000086  2a5e              CMP      r2,#0x5e
000088  d102              BNE      |L2.144|
;;;63     					flag.calibratingA = 1;
00008a  2201              MOVS     r2,#1
00008c  4b1b              LDR      r3,|L2.252|
00008e  719a              STRB     r2,[r3,#6]
                  |L2.144|
;;;64     			if ((rcSticks == THR_HI + YAW_LO + PIT_LO + ROL_HI) && flag.calibratingM_pre)  //指南针矫正 
000090  4a18              LDR      r2,|L2.244|
000092  7812              LDRB     r2,[r2,#0]  ; rcSticks
000094  2a96              CMP      r2,#0x96
000096  d105              BNE      |L2.164|
000098  4a18              LDR      r2,|L2.252|
00009a  7a12              LDRB     r2,[r2,#8]  ; flag
00009c  b112              CBZ      r2,|L2.164|
;;;65     				  flag.calibratingM = 1;
00009e  2201              MOVS     r2,#1
0000a0  4b16              LDR      r3,|L2.252|
0000a2  71da              STRB     r2,[r3,#7]
                  |L2.164|
;;;66     			if (rcSticks == THR_HI + YAW_HI + PIT_LO + ROL_LO)    
0000a4  4a13              LDR      r2,|L2.244|
0000a6  7812              LDRB     r2,[r2,#0]  ; rcSticks
0000a8  2aa5              CMP      r2,#0xa5
0000aa  d103              BNE      |L2.180|
;;;67     					flag.calibratingM_pre = 1;
0000ac  2201              MOVS     r2,#1
0000ae  4b13              LDR      r3,|L2.252|
0000b0  721a              STRB     r2,[r3,#8]
0000b2  e002              B        |L2.186|
                  |L2.180|
;;;68     			else flag.calibratingM_pre = 0;
0000b4  2200              MOVS     r2,#0
0000b6  4b11              LDR      r3,|L2.252|
0000b8  721a              STRB     r2,[r3,#8]
                  |L2.186|
;;;69     			
;;;70         }
;;;71     	}
;;;72     	//武装之后一段时间油门保持最低  则自动解除武装
;;;73     	if (flag.ARMED){
0000ba  4a10              LDR      r2,|L2.252|
0000bc  7912              LDRB     r2,[r2,#4]  ; flag
0000be  b1b2              CBZ      r2,|L2.238|
;;;74     	   if (rcSticks == THR_LO + YAW_CE + PIT_CE + ROL_CE) {
0000c0  4a0c              LDR      r2,|L2.244|
0000c2  7812              LDRB     r2,[r2,#0]  ; rcSticks
0000c4  2a7f              CMP      r2,#0x7f
0000c6  d10f              BNE      |L2.232|
;;;75     		    if (seltLockCommend < AUTODISARMDE_TIME)
0000c8  4a0d              LDR      r2,|L2.256|
0000ca  8812              LDRH     r2,[r2,#0]  ; seltLockCommend
0000cc  f64013c4          MOV      r3,#0x9c4
0000d0  429a              CMP      r2,r3
0000d2  da05              BGE      |L2.224|
;;;76     					 seltLockCommend++;
0000d4  4a0a              LDR      r2,|L2.256|
0000d6  8812              LDRH     r2,[r2,#0]  ; seltLockCommend
0000d8  1c52              ADDS     r2,r2,#1
0000da  4b09              LDR      r3,|L2.256|
0000dc  801a              STRH     r2,[r3,#0]
0000de  e006              B        |L2.238|
                  |L2.224|
;;;77     				else 
;;;78     					 flag.ARMED=0;
0000e0  2200              MOVS     r2,#0
0000e2  4b06              LDR      r3,|L2.252|
0000e4  711a              STRB     r2,[r3,#4]
0000e6  e002              B        |L2.238|
                  |L2.232|
;;;79     		 }
;;;80     		 else 
;;;81             seltLockCommend = 0;			 
0000e8  2200              MOVS     r2,#0
0000ea  4b05              LDR      r3,|L2.256|
0000ec  801a              STRH     r2,[r3,#0]
                  |L2.238|
;;;82     	}
;;;83     }
0000ee  4770              BX       lr
;;;84     /*====================================================================================================*/
                          ENDP

                  |L2.240|
                          DCD      RC_Data
                  |L2.244|
                          DCD      rcSticks
                  |L2.248|
                          DCD      rcDelayCommand
                  |L2.252|
                          DCD      flag
                  |L2.256|
                          DCD      seltLockCommend

                          AREA ||i.RDAU||, CODE, READONLY, ALIGN=2

                  RDAU PROC
;;;17     
;;;18     void RDAU(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     	RC_directive();
000002  f7fffffe          BL       RC_directive
;;;21     	rcReadRawFunc();
000006  4802              LDR      r0,|L3.16|
000008  6800              LDR      r0,[r0,#0]  ; rcReadRawFunc
00000a  4780              BLX      r0
;;;22     }
00000c  bd10              POP      {r4,pc}
;;;23     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      rcReadRawFunc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  RC_Data
                          %        18
                  rcDataCache
                          %        48
                  rcDataMean
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  rcReadRawFunc
                          DCD      RC_Data_Refine
                  rcSticks
000004  00                DCB      0x00
                  rcDelayCommand
000005  00                DCB      0x00
                  seltLockCommend
000006  0000              DCB      0x00,0x00
                  rcValuesIndex
000008  00                DCB      0x00
