; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\usb_hw.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usb_hw.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM3\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\usb_hw.crf ..\..\User\usb_virture_com\usb_hw.c]
                          THUMB

                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;210    */
;;;211    void Get_SerialNum(uint8_t *_pBuf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;212    {
000004  4604              MOV      r4,r0
;;;213    	uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
;;;214    	
;;;215    	Device_Serial0 = *(__IO uint32_t*)(0x1FFFF7E8);
000006  480a              LDR      r0,|L1.48|
000008  6805              LDR      r5,[r0,#0]
;;;216    	Device_Serial1 = *(__IO uint32_t*)(0x1FFFF7EC);
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;217    	Device_Serial2 = *(__IO uint32_t*)(0x1FFFF7F0);
00000e  1d00              ADDS     r0,r0,#4
000010  6807              LDR      r7,[r0,#0]
;;;218    	
;;;219    	Device_Serial0 += Device_Serial2;
000012  443d              ADD      r5,r5,r7
;;;220    	
;;;221    	if (Device_Serial0 != 0)
000014  b155              CBZ      r5,|L1.44|
;;;222    	{
;;;223    		IntToUnicode (Device_Serial0, &_pBuf[2] , 8);
000016  2208              MOVS     r2,#8
000018  1ca1              ADDS     r1,r4,#2
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       IntToUnicode
;;;224    		IntToUnicode (Device_Serial1, &_pBuf[18], 4);
000020  2204              MOVS     r2,#4
000022  f1040112          ADD      r1,r4,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       IntToUnicode
                  |L1.44|
;;;225    	}
;;;226    }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP

                  |L1.48|
                          DCD      0x1ffff7e8

                          AREA ||i.IntToUnicode||, CODE, READONLY, ALIGN=1

                  IntToUnicode PROC
;;;237    */
;;;238    static void IntToUnicode (uint32_t _ulValue , uint8_t *_pBuf , uint8_t _ucLen)
000000  b530              PUSH     {r4,r5,lr}
;;;239    {
000002  460b              MOV      r3,r1
;;;240    	uint8_t idx = 0;
000004  2100              MOVS     r1,#0
;;;241    	
;;;242    	for( idx = 0 ; idx < _ucLen ; idx ++)
000006  bf00              NOP      
000008  e016              B        |L2.56|
                  |L2.10|
;;;243    	{
;;;244    		if( ((_ulValue >> 28)) < 0xA )
00000a  240a              MOVS     r4,#0xa
00000c  ebb47f10          CMP      r4,r0,LSR #28
000010  d905              BLS      |L2.30|
;;;245    		{
;;;246    			_pBuf[2 * idx] = (_ulValue >> 28) + '0';
000012  2430              MOVS     r4,#0x30
000014  eb047410          ADD      r4,r4,r0,LSR #28
000018  f8034011          STRB     r4,[r3,r1,LSL #1]
00001c  e005              B        |L2.42|
                  |L2.30|
;;;247    		}
;;;248    		else
;;;249    		{
;;;250    			_pBuf[2 * idx] = (_ulValue >> 28) + 'A' - 10; 
00001e  2441              MOVS     r4,#0x41
000020  eb047410          ADD      r4,r4,r0,LSR #28
000024  3c0a              SUBS     r4,r4,#0xa
000026  f8034011          STRB     r4,[r3,r1,LSL #1]
                  |L2.42|
;;;251    		}
;;;252    		
;;;253    		_ulValue = _ulValue << 4;
00002a  0100              LSLS     r0,r0,#4
;;;254    		
;;;255    		_pBuf[ 2 * idx + 1] = 0;
00002c  2500              MOVS     r5,#0
00002e  004c              LSLS     r4,r1,#1
000030  1c64              ADDS     r4,r4,#1
000032  551d              STRB     r5,[r3,r4]
000034  1c4c              ADDS     r4,r1,#1              ;242
000036  b2e1              UXTB     r1,r4                 ;242
                  |L2.56|
000038  4291              CMP      r1,r2                 ;242
00003a  dbe6              BLT      |L2.10|
;;;256    	}
;;;257    }
00003c  bd30              POP      {r4,r5,pc}
;;;258    
                          ENDP


                          AREA ||i.__set_PRIMASK||, CODE, READONLY, ALIGN=1

                  __set_PRIMASK PROC
;;;986     */
;;;987    static __INLINE void __set_PRIMASK(uint32_t priMask)
000000  f3808810          MSR      PRIMASK,r0
;;;988    {
;;;989      register uint32_t __regPriMask         __ASM("primask");
;;;990      __regPriMask = (priMask);
;;;991    }
000004  4770              BX       lr
;;;992    
                          ENDP


                          AREA ||i.bsp_InitUsb||, CODE, READONLY, ALIGN=2

                  bsp_InitUsb PROC
;;;42     */
;;;43     void bsp_InitUsb(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;44     {
;;;45     	GPIO_InitTypeDef GPIO_InitStructure;
;;;46     	
;;;47     	/* 使能控制USB上拉电阻GPIO的时钟 */
;;;48     	RCC_APB2PeriphClockCmd(RCC_USB_PULL_UP, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;49     	
;;;50     	/* 配置 USB 上拉引脚 */
;;;51     	USB_CABLE_DISABLE();	/* 断开USB设备 */
00000a  f44f7180          MOV      r1,#0x100
00000e  481a              LDR      r0,|L4.120|
000010  f7fffffe          BL       GPIO_SetBits
;;;52     	GPIO_InitStructure.GPIO_Pin = PIN_USB_PULL_UP;
000014  f44f7080          MOV      r0,#0x100
000018  f8ad0004          STRH     r0,[sp,#4]
;;;53     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0006          STRB     r0,[sp,#6]
;;;54     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;
000022  2014              MOVS     r0,#0x14
000024  f88d0007          STRB     r0,[sp,#7]
;;;55     	GPIO_Init(PORT_USB_PULL_UP, &GPIO_InitStructure);
000028  a901              ADD      r1,sp,#4
00002a  4813              LDR      r0,|L4.120|
00002c  f7fffffe          BL       GPIO_Init
;;;56     
;;;57     	/* 设置USB时钟源 */
;;;58     	RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       RCC_USBCLKConfig
;;;59     	
;;;60     	/* 使能USB时钟 */
;;;61     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
000036  2101              MOVS     r1,#1
000038  05c8              LSLS     r0,r1,#23
00003a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;62     	
;;;63     	/* 配置USB中断 */
;;;64     	{
;;;65     		NVIC_InitTypeDef NVIC_InitStructure;
;;;66     		
;;;67     		NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
00003e  f44f60c0          MOV      r0,#0x600
000042  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;68     		
;;;69     		NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
000046  2014              MOVS     r0,#0x14
000048  f88d0000          STRB     r0,[sp,#0]
;;;70     		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
00004c  2001              MOVS     r0,#1
00004e  f88d0001          STRB     r0,[sp,#1]
;;;71     		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000052  2000              MOVS     r0,#0
000054  f88d0002          STRB     r0,[sp,#2]
;;;72     		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000058  2001              MOVS     r0,#1
00005a  f88d0003          STRB     r0,[sp,#3]
;;;73     		NVIC_Init(&NVIC_InitStructure);
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       NVIC_Init
;;;74     		
;;;75     		#if 0	/* 根据需要使能中断:USB从挂起状态到恢复 */
;;;76     		{
;;;77     			EXTI_InitTypeDef EXTI_InitStructure;
;;;78     			
;;;79     			/* 配置外部中断线18连接到USB IP中断(CPU内部连接) */
;;;80     			EXTI_ClearITPendingBit(EXTI_Line18);
;;;81     			EXTI_InitStructure.EXTI_Line = EXTI_Line18; /* USB从挂起状态到恢复 */
;;;82     			EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
;;;83     			EXTI_InitStructure.EXTI_LineCmd = ENABLE;
;;;84     			EXTI_Init(&EXTI_InitStructure);
;;;85     		}
;;;86     		#endif
;;;87     	}
;;;88     
;;;89     	g_tUsbFifo.usRxWrite = 0;
000064  2100              MOVS     r1,#0
000066  4805              LDR      r0,|L4.124|
000068  80c1              STRH     r1,[r0,#6]
;;;90     	g_tUsbFifo.usRxRead = 0;
00006a  8081              STRH     r1,[r0,#4]
;;;91     	g_tUsbFifo.usTxWrite = 0;
00006c  8041              STRH     r1,[r0,#2]
;;;92     	g_tUsbFifo.usTxRead = 0;
00006e  8001              STRH     r1,[r0,#0]
;;;93     
;;;94     	USB_Init();	
000070  f7fffffe          BL       USB_Init
;;;95     }
000074  bd1c              POP      {r2-r4,pc}
;;;96     
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x40010800
                  |L4.124|
                          DCD      g_tUsbFifo+0x1000

                          AREA ||i.usb_CableConfig||, CODE, READONLY, ALIGN=2

                  usb_CableConfig PROC
;;;175    */
;;;176    void usb_CableConfig(uint8_t _ucMode)
000000  b510              PUSH     {r4,lr}
;;;177    {
000002  4604              MOV      r4,r0
;;;178    	if (_ucMode == DISABLE)
000004  b92c              CBNZ     r4,|L5.18|
;;;179    	{
;;;180    		USB_CABLE_DISABLE();	/* 断开USB设备 */
000006  f44f7180          MOV      r1,#0x100
00000a  4805              LDR      r0,|L5.32|
00000c  f7fffffe          BL       GPIO_SetBits
000010  e004              B        |L5.28|
                  |L5.18|
;;;181    	}
;;;182    	else
;;;183    	{
;;;184    		USB_CABLE_ENABLE();		/* 连接USB设备, 实质上将D+上拉，此时USB设备就能被集线器检测到了 */
000012  f44f7180          MOV      r1,#0x100
000016  4802              LDR      r0,|L5.32|
000018  f7fffffe          BL       GPIO_ResetBits
                  |L5.28|
;;;185    	}
;;;186    }
00001c  bd10              POP      {r4,pc}
;;;187    				   
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
                          DCD      0x40010800

                          AREA ||i.usb_EnterLowPowerMode||, CODE, READONLY, ALIGN=2

                  usb_EnterLowPowerMode PROC
;;;104    */
;;;105    void usb_EnterLowPowerMode(void)
000000  2003              MOVS     r0,#3
;;;106    {
;;;107    	/* 设置设备状态为 suspend, bDeviceState 全局变量在 usb_pwr.c 中定义 */
;;;108    	bDeviceState = SUSPENDED;
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;109    
;;;110    	#if 0	/* 根据需要关闭电源 （鼠标键盘设备可进入挂起状态，虚拟串口等设备最好保持常开） */
;;;111    		/* 清 EXTI Line18 中断标志 */
;;;112    		EXTI_ClearITPendingBit(EXTI_Line8);
;;;113    		
;;;114    		/* 在低功耗状态，关闭电压调节器 */
;;;115    		PWR_EnterSTOPMode(PWR_Regulator_LowPower, PWR_STOPEntry_WFI);	
;;;116    	#endif
;;;117    }
000006  4770              BX       lr
;;;118    
                          ENDP

                  |L6.8|
                          DCD      bDeviceState

                          AREA ||i.usb_GetRxByte||, CODE, READONLY, ALIGN=2

                  usb_GetRxByte PROC
;;;294    */
;;;295    uint8_t usb_GetRxByte(uint8_t *_pByteNum)
000000  b570              PUSH     {r4-r6,lr}
;;;296    {
000002  4604              MOV      r4,r0
;;;297    	uint8_t ucData;
;;;298    	uint16_t usRxWrite;
;;;299    	
;;;300    	__set_PRIMASK(1);  		/* 关中断，避免USB中断程序和主程序访问变量冲突 */
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       __set_PRIMASK
;;;301    	usRxWrite = g_tUsbFifo.usRxWrite;
00000a  4810              LDR      r0,|L7.76|
00000c  88c6              LDRH     r6,[r0,#6]  ; g_tUsbFifo
;;;302    	__set_PRIMASK(0);  		/* 开中断 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       __set_PRIMASK
;;;303    
;;;304    	/* 发送缓冲区为空时，返回字节数 = 0 */
;;;305    	if (g_tUsbFifo.usRxRead == usRxWrite)
000014  480d              LDR      r0,|L7.76|
000016  8880              LDRH     r0,[r0,#4]  ; g_tUsbFifo
000018  42b0              CMP      r0,r6
00001a  d102              BNE      |L7.34|
;;;306    	{
;;;307    		*_pByteNum = 0;
00001c  2000              MOVS     r0,#0
00001e  7020              STRB     r0,[r4,#0]
                  |L7.32|
;;;308    		return 0;
;;;309    	}
;;;310    	
;;;311    	/* 保存第1个字节 */
;;;312    	ucData = g_tUsbFifo.aRxBuf[g_tUsbFifo.usRxRead];
;;;313    	
;;;314    	/* 移动读指针 */
;;;315    	if (++g_tUsbFifo.usRxRead >= USB_RX_BUF_SIZE)
;;;316    	{
;;;317    		g_tUsbFifo.usRxRead = 0;
;;;318    	}
;;;319    
;;;320    	*_pByteNum = 1;		/* 有效字节个数 = 1 */
;;;321    	return ucData;		
;;;322    }
000020  bd70              POP      {r4-r6,pc}
                  |L7.34|
000022  480a              LDR      r0,|L7.76|
000024  8881              LDRH     r1,[r0,#4]            ;312  ; g_tUsbFifo
000026  f5a06000          SUB      r0,r0,#0x800          ;312
00002a  5c45              LDRB     r5,[r0,r1]            ;312
00002c  4807              LDR      r0,|L7.76|
00002e  8880              LDRH     r0,[r0,#4]            ;315  ; g_tUsbFifo
000030  1c40              ADDS     r0,r0,#1              ;315
000032  b281              UXTH     r1,r0                 ;315
000034  4805              LDR      r0,|L7.76|
000036  8081              STRH     r1,[r0,#4]            ;315
000038  f5b16f00          CMP      r1,#0x800             ;315
00003c  db01              BLT      |L7.66|
00003e  2100              MOVS     r1,#0                 ;317
000040  8081              STRH     r1,[r0,#4]            ;317
                  |L7.66|
000042  2001              MOVS     r0,#1                 ;320
000044  7020              STRB     r0,[r4,#0]            ;320
000046  4628              MOV      r0,r5                 ;321
000048  e7ea              B        |L7.32|
;;;323    
                          ENDP

00004a  0000              DCW      0x0000
                  |L7.76|
                          DCD      g_tUsbFifo+0x1000

                          AREA ||i.usb_GetTxWord||, CODE, READONLY, ALIGN=2

                  usb_GetTxWord PROC
;;;362    */
;;;363    uint16_t usb_GetTxWord(uint8_t *_pByteNum)
000000  4601              MOV      r1,r0
;;;364    {
;;;365    	uint16_t usData;
;;;366    	
;;;367    	/* 发送缓冲区为空时，返回字节数 = 0 */
;;;368    	if (g_tUsbFifo.usTxRead == g_tUsbFifo.usTxWrite)
000002  481b              LDR      r0,|L8.112|
000004  8803              LDRH     r3,[r0,#0]  ; g_tUsbFifo
000006  8840              LDRH     r0,[r0,#2]  ; g_tUsbFifo
000008  4283              CMP      r3,r0
00000a  d102              BNE      |L8.18|
;;;369    	{
;;;370    		*_pByteNum = 0;
00000c  2000              MOVS     r0,#0
00000e  7008              STRB     r0,[r1,#0]
                  |L8.16|
;;;371    		return 0;
;;;372    	}
;;;373    	
;;;374    	/* 保存第1个字节 */
;;;375    	usData = g_tUsbFifo.aTxBuf[g_tUsbFifo.usTxRead];
;;;376    	
;;;377    	/* 移动读指针 */
;;;378    	if (++g_tUsbFifo.usTxRead >= USB_TX_BUF_SIZE)
;;;379    	{
;;;380    		g_tUsbFifo.usTxRead = 0;
;;;381    	}
;;;382    	
;;;383    	/* 不足2字节，直接返回 */
;;;384    	if (g_tUsbFifo.usTxRead == g_tUsbFifo.usTxWrite)
;;;385    	{
;;;386    		*_pByteNum = 1;		/* 有效字节个数 = 1 */
;;;387    		return usData;
;;;388    	}	
;;;389    	
;;;390    	/* 保存第2个字节 */
;;;391    	usData += g_tUsbFifo.aTxBuf[g_tUsbFifo.usTxRead] << 8;
;;;392    
;;;393    	/* 移动读指针 */
;;;394    	if (++g_tUsbFifo.usTxRead >= USB_TX_BUF_SIZE)
;;;395    	{
;;;396    		g_tUsbFifo.usTxRead = 0;
;;;397    	}
;;;398    
;;;399    	*_pByteNum = 2;		/* 有效字节个数 = 2 */
;;;400    	return usData;		
;;;401    }
000010  4770              BX       lr
                  |L8.18|
000012  4817              LDR      r0,|L8.112|
000014  8800              LDRH     r0,[r0,#0]            ;375  ; g_tUsbFifo
000016  4b17              LDR      r3,|L8.116|
000018  5c1a              LDRB     r2,[r3,r0]            ;375
00001a  4815              LDR      r0,|L8.112|
00001c  8800              LDRH     r0,[r0,#0]            ;378  ; g_tUsbFifo
00001e  1c40              ADDS     r0,r0,#1              ;378
000020  b283              UXTH     r3,r0                 ;378
000022  4813              LDR      r0,|L8.112|
000024  8003              STRH     r3,[r0,#0]            ;378
000026  f5b36f00          CMP      r3,#0x800             ;378
00002a  db01              BLT      |L8.48|
00002c  2300              MOVS     r3,#0                 ;380
00002e  8003              STRH     r3,[r0,#0]            ;380
                  |L8.48|
000030  480f              LDR      r0,|L8.112|
000032  8803              LDRH     r3,[r0,#0]            ;384  ; g_tUsbFifo
000034  8840              LDRH     r0,[r0,#2]            ;384  ; g_tUsbFifo
000036  4283              CMP      r3,r0                 ;384
000038  d103              BNE      |L8.66|
00003a  2001              MOVS     r0,#1                 ;386
00003c  7008              STRB     r0,[r1,#0]            ;386
00003e  4610              MOV      r0,r2                 ;387
000040  e7e6              B        |L8.16|
                  |L8.66|
000042  480b              LDR      r0,|L8.112|
000044  8800              LDRH     r0,[r0,#0]            ;391  ; g_tUsbFifo
000046  4b0b              LDR      r3,|L8.116|
000048  5c18              LDRB     r0,[r3,r0]            ;391
00004a  eb022000          ADD      r0,r2,r0,LSL #8       ;391
00004e  b282              UXTH     r2,r0                 ;391
000050  4807              LDR      r0,|L8.112|
000052  8800              LDRH     r0,[r0,#0]            ;394  ; g_tUsbFifo
000054  1c40              ADDS     r0,r0,#1              ;394
000056  b283              UXTH     r3,r0                 ;394
000058  4805              LDR      r0,|L8.112|
00005a  8003              STRH     r3,[r0,#0]            ;394
00005c  f5b36f00          CMP      r3,#0x800             ;394
000060  db01              BLT      |L8.102|
000062  2300              MOVS     r3,#0                 ;396
000064  8003              STRH     r3,[r0,#0]            ;396
                  |L8.102|
000066  2002              MOVS     r0,#2                 ;399
000068  7008              STRB     r0,[r1,#0]            ;399
00006a  4610              MOV      r0,r2                 ;400
00006c  e7d0              B        |L8.16|
                          ENDP

00006e  0000              DCW      0x0000
                  |L8.112|
                          DCD      g_tUsbFifo+0x1000
                  |L8.116|
                          DCD      g_tUsbFifo

                          AREA ||i.usb_LeaveLowPowerMode||, CODE, READONLY, ALIGN=2

                  usb_LeaveLowPowerMode PROC
;;;126    */
;;;127    void usb_LeaveLowPowerMode(void)
000000  4805              LDR      r0,|L9.24|
;;;128    {
;;;129    	DEVICE_INFO *pInfo = &Device_Info;  /* 全局变量Device_Info 在USB固件库 usb_init.c 中定义 */	
;;;130    
;;;131    #if 0	/* 根据需要恢复系统时钟 */
;;;132    	/* 使能 HSE */
;;;133    	RCC_HSEConfig(RCC_HSE_ON);
;;;134    	
;;;135    	/* 等待 HSE 就绪 */
;;;136    	RCC_WaitForHSEStartUp();
;;;137    	
;;;138    	/* 使能 HSE */
;;;139    	RCC_HSEConfig(RCC_HSE_ON);
;;;140    	
;;;141    	/* 等待 HSE 就绪 */
;;;142    	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET);
;;;143    	
;;;144    	/* 使能PLL */
;;;145    	RCC_PLLCmd(ENABLE);
;;;146    	
;;;147    	/* 等待PLL就绪 */
;;;148    	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
;;;149    	
;;;150    	/* 选择PLL作为系统时钟源 */
;;;151    	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
;;;152    	
;;;153    	/* 等待PLL系统时钟源稳定 */
;;;154    	while (RCC_GetSYSCLKSource() != 0x08);
;;;155    #endif
;;;156    	
;;;157    	/* 更新全局变量bDeviceState，表示usb设备状态 */
;;;158    	if (pInfo->Current_Configuration != 0)
000002  7a81              LDRB     r1,[r0,#0xa]
000004  b119              CBZ      r1,|L9.14|
;;;159    	{
;;;160    		bDeviceState = CONFIGURED;	/* 配置成功 */
000006  2105              MOVS     r1,#5
000008  4a04              LDR      r2,|L9.28|
00000a  6011              STR      r1,[r2,#0]  ; bDeviceState
00000c  e002              B        |L9.20|
                  |L9.14|
;;;161    	}
;;;162    	else
;;;163    	{
;;;164    		bDeviceState = ATTACHED;	/* USB设备已连接，但还未配置 */
00000e  2101              MOVS     r1,#1
000010  4a02              LDR      r2,|L9.28|
000012  6011              STR      r1,[r2,#0]  ; bDeviceState
                  |L9.20|
;;;165    	}	
;;;166    }
000014  4770              BX       lr
;;;167    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      Device_Info
                  |L9.28|
                          DCD      bDeviceState

                          AREA ||i.usb_SaveHostDataToBuf||, CODE, READONLY, ALIGN=2

                  usb_SaveHostDataToBuf PROC
;;;268    */
;;;269    void usb_SaveHostDataToBuf(uint8_t *_pInBuf, uint16_t _usLen)
000000  b530              PUSH     {r4,r5,lr}
;;;270    {
000002  4602              MOV      r2,r0
;;;271    	uint16_t i;
;;;272    	
;;;273    	/* 未考虑缓冲区填满的情况 */
;;;274    	for (i = 0 ; i < _usLen; i++)
000004  2000              MOVS     r0,#0
000006  e012              B        |L10.46|
                  |L10.8|
;;;275    	{
;;;276    		g_tUsbFifo.aRxBuf[g_tUsbFifo.usRxWrite] = _pInBuf[i];
000008  5c14              LDRB     r4,[r2,r0]
00000a  4b0a              LDR      r3,|L10.52|
00000c  88dd              LDRH     r5,[r3,#6]  ; g_tUsbFifo
00000e  f5a36300          SUB      r3,r3,#0x800
000012  555c              STRB     r4,[r3,r5]
;;;277    		
;;;278    		if (++g_tUsbFifo.usRxWrite >= USB_RX_BUF_SIZE)
000014  4b07              LDR      r3,|L10.52|
000016  88db              LDRH     r3,[r3,#6]  ; g_tUsbFifo
000018  1c5b              ADDS     r3,r3,#1
00001a  b29c              UXTH     r4,r3
00001c  4b05              LDR      r3,|L10.52|
00001e  80dc              STRH     r4,[r3,#6]
000020  f5b46f00          CMP      r4,#0x800
000024  db01              BLT      |L10.42|
;;;279    		{
;;;280    			g_tUsbFifo.usRxWrite = 0;
000026  2400              MOVS     r4,#0
000028  80dc              STRH     r4,[r3,#6]
                  |L10.42|
00002a  1c43              ADDS     r3,r0,#1              ;274
00002c  b298              UXTH     r0,r3                 ;274
                  |L10.46|
00002e  4288              CMP      r0,r1                 ;274
000030  dbea              BLT      |L10.8|
;;;281    		}
;;;282    	}
;;;283    }
000032  bd30              POP      {r4,r5,pc}
;;;284    
                          ENDP

                  |L10.52|
                          DCD      g_tUsbFifo+0x1000

                          AREA ||i.usb_SendBuf||, CODE, READONLY, ALIGN=1

                  usb_SendBuf PROC
;;;195    */
;;;196    void usb_SendBuf(uint8_t *_pTxBuf, uint8_t _ucLen)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;198        UserToPMABufferCopy(_pTxBuf, ENDP1_TXADDR, _ucLen);
000006  4622              MOV      r2,r4
000008  21c0              MOVS     r1,#0xc0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       UserToPMABufferCopy
;;;199        SetEPTxCount(ENDP1, _ucLen);
000010  4621              MOV      r1,r4
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       SetEPTxCount
;;;200        SetEPTxValid(ENDP1); 
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       SetEPTxValid
;;;201    }
00001e  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP


                          AREA ||i.usb_SendDataToHost||, CODE, READONLY, ALIGN=2

                  usb_SendDataToHost PROC
;;;333    */
;;;334    void usb_SendDataToHost(uint8_t *_pTxBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;335    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;336    	uint16_t i;
;;;337    	
;;;338    	/* 未考虑缓冲区填满的情况 */
;;;339    	/* 先将数据缓存到内存 */
;;;340    	for (i = 0 ; i < _usLen; i++)
000006  2400              MOVS     r4,#0
000008  e017              B        |L12.58|
                  |L12.10|
;;;341    	{
;;;342    		g_tUsbFifo.aTxBuf[g_tUsbFifo.usTxWrite] = _pTxBuf[i];
00000a  5d29              LDRB     r1,[r5,r4]
00000c  480c              LDR      r0,|L12.64|
00000e  8840              LDRH     r0,[r0,#2]  ; g_tUsbFifo
000010  4a0c              LDR      r2,|L12.68|
000012  5411              STRB     r1,[r2,r0]
;;;343    
;;;344    		__set_PRIMASK(1);  		/* 关中断，避免USB中断程序和主程序访问 usTxWrite 变量冲突 */
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       __set_PRIMASK
;;;345    		
;;;346    		if (++g_tUsbFifo.usTxWrite >= USB_RX_BUF_SIZE)
00001a  4809              LDR      r0,|L12.64|
00001c  8840              LDRH     r0,[r0,#2]  ; g_tUsbFifo
00001e  1c40              ADDS     r0,r0,#1
000020  b281              UXTH     r1,r0
000022  4807              LDR      r0,|L12.64|
000024  8041              STRH     r1,[r0,#2]
000026  f5b16f00          CMP      r1,#0x800
00002a  db01              BLT      |L12.48|
;;;347    		{
;;;348    			g_tUsbFifo.usTxWrite = 0;
00002c  2100              MOVS     r1,#0
00002e  8041              STRH     r1,[r0,#2]
                  |L12.48|
;;;349    		}
;;;350    
;;;351    		__set_PRIMASK(0);  		/* 开中断 */
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       __set_PRIMASK
000036  1c60              ADDS     r0,r4,#1              ;340
000038  b284              UXTH     r4,r0                 ;340
                  |L12.58|
00003a  42b4              CMP      r4,r6                 ;340
00003c  dbe5              BLT      |L12.10|
;;;352    	}
;;;353    }
00003e  bd70              POP      {r4-r6,pc}
;;;354    
                          ENDP

                  |L12.64|
                          DCD      g_tUsbFifo+0x1000
                  |L12.68|
                          DCD      g_tUsbFifo

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_tUsbFifo
                          %        4106
