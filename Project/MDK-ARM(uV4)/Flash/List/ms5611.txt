; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\ms5611.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ms5611.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -IE:\GitHub\HT-Hawk\Project\MDK-ARM(uV4)\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\ms5611.crf ..\..\User\Modules\Modules_ms5611\MS5611.c]
                          THUMB

                          AREA ||i.COS||, CODE, READONLY, ALIGN=1

                  ||COS|| PROC
;;;259    ************************************************/
;;;260    float COS(float x)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;261    {
000004  4604              MOV      r4,r0
;;;262    	float result;
;;;263      result = 1 - x * x/2;
000006  4621              MOV      r1,r4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_fmul
00000e  4607              MOV      r7,r0
000010  f04f4180          MOV      r1,#0x40000000
000014  f7fffffe          BL       __aeabi_fdiv
000018  4606              MOV      r6,r0
00001a  f04f517e          MOV      r1,#0x3f800000
00001e  f7fffffe          BL       __aeabi_frsub
000022  4605              MOV      r5,r0
;;;264    	return result; 
000024  4628              MOV      r0,r5
;;;265    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;266    
                          ENDP


                          AREA ||i.Get_High||, CODE, READONLY, ALIGN=2

                  Get_High PROC
;;;224    ************************************************/
;;;225    float Get_High(void)//OSR为压强转换速率
000000  b510              PUSH     {r4,lr}
;;;226    {
;;;227    	static u8 Now_doing = SCTemperature;
;;;228    	static u8 flag=0;
;;;229    	 switch(Now_doing)
000002  4813              LDR      r0,|L2.80|
000004  7800              LDRB     r0,[r0,#0]  ; Now_doing
000006  2801              CMP      r0,#1
000008  d002              BEQ      |L2.16|
00000a  2802              CMP      r0,#2
00000c  d117              BNE      |L2.62|
00000e  e00b              B        |L2.40|
                  |L2.16|
;;;230    	 {
;;;231    		 case SCTemperature: 
;;;232    		 {		
;;;233    			 if(flag)    MS561101BA_getPressure();			 
000010  4810              LDR      r0,|L2.84|
000012  7800              LDRB     r0,[r0,#0]  ; flag
000014  b108              CBZ      r0,|L2.26|
000016  f7fffffe          BL       MS561101BA_getPressure
                  |L2.26|
;;;234    			 MS561101BA_startConversion(MS561101BA_D2_OSR_4096);  
00001a  2058              MOVS     r0,#0x58
00001c  f7fffffe          BL       MS561101BA_startConversion
;;;235    			 Now_doing = CTemperatureing;//切换到下一个状态
000020  2002              MOVS     r0,#2
000022  490b              LDR      r1,|L2.80|
000024  7008              STRB     r0,[r1,#0]
;;;236    		 }
;;;237    		 break;
000026  e011              B        |L2.76|
                  |L2.40|
;;;238    		 case CTemperatureing: 
;;;239    		 {		
;;;240    			 MS561101BA_getTemperature();
000028  f7fffffe          BL       MS561101BA_getTemperature
;;;241    			 MS561101BA_startConversion(MS561101BA_D1_OSR_4096); 
00002c  2048              MOVS     r0,#0x48
00002e  f7fffffe          BL       MS561101BA_startConversion
;;;242    			 flag = 1;
000032  2001              MOVS     r0,#1
000034  4907              LDR      r1,|L2.84|
000036  7008              STRB     r0,[r1,#0]
;;;243    			 Now_doing = SCTemperature;
000038  4905              LDR      r1,|L2.80|
00003a  7008              STRB     r0,[r1,#0]
;;;244    		 }
;;;245    		 break;
00003c  e006              B        |L2.76|
                  |L2.62|
;;;246         default: 
;;;247    		 {
;;;248    			 Now_doing = SCTemperature; //出错了 重新开始
00003e  2001              MOVS     r0,#1
000040  4903              LDR      r1,|L2.80|
000042  7008              STRB     r0,[r1,#0]
;;;249    			 flag=0;
000044  2000              MOVS     r0,#0
000046  4903              LDR      r1,|L2.84|
000048  7008              STRB     r0,[r1,#0]
;;;250    		 }
;;;251     		 break;			 
00004a  bf00              NOP      
                  |L2.76|
00004c  bf00              NOP                            ;237
;;;252    	 }
;;;253    	
;;;254    }
00004e  bd10              POP      {r4,pc}
;;;255    /***********************************************
                          ENDP

                  |L2.80|
                          DCD      Now_doing
                  |L2.84|
                          DCD      flag

                          AREA ||i.MS561101BA_RESET||, CODE, READONLY, ALIGN=1

                  MS561101BA_RESET PROC
;;;61     *******************************************************************************/
;;;62     void MS561101BA_RESET(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64       I2C_Start();
000002  f7fffffe          BL       I2C_Start
;;;65     	I2C_SendByte(MS561101BA_SlaveAddress);
000006  20ee              MOVS     r0,#0xee
000008  f7fffffe          BL       I2C_SendByte
;;;66     	I2C_WaitAck();
00000c  f7fffffe          BL       I2C_WaitAck
;;;67     	I2C_SendByte(MS561101BA_RST);
000010  201e              MOVS     r0,#0x1e
000012  f7fffffe          BL       I2C_SendByte
;;;68     	I2C_WaitAck();
000016  f7fffffe          BL       I2C_WaitAck
;;;69     	I2C_Stop();
00001a  f7fffffe          BL       I2C_Stop
;;;70     }
00001e  bd10              POP      {r4,pc}
;;;71     /*******************************************************************************
                          ENDP


                          AREA ||i.MS561101BA_getConversion||, CODE, READONLY, ALIGN=1

                  MS561101BA_getConversion PROC
;;;130    *******************************************************************************/
;;;131    unsigned long MS561101BA_getConversion(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;132    {
;;;133    	unsigned long conversion = 0;
000004  2500              MOVS     r5,#0
;;;134    	uint8_t conv1,conv2,conv3; 
;;;135    	
;;;136    	I2C_Start();
000006  f7fffffe          BL       I2C_Start
;;;137    	I2C_SendByte(MS561101BA_SlaveAddress);
00000a  20ee              MOVS     r0,#0xee
00000c  f7fffffe          BL       I2C_SendByte
;;;138    	I2C_WaitAck();
000010  f7fffffe          BL       I2C_WaitAck
;;;139    	I2C_SendByte(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       I2C_SendByte
;;;140    	I2C_WaitAck();
00001a  f7fffffe          BL       I2C_WaitAck
;;;141      I2C_Stop();
00001e  f7fffffe          BL       I2C_Stop
;;;142    
;;;143    
;;;144    	I2C_Start();
000022  f7fffffe          BL       I2C_Start
;;;145    	I2C_SendByte(MS561101BA_SlaveAddress+1);
000026  20ef              MOVS     r0,#0xef
000028  f7fffffe          BL       I2C_SendByte
;;;146    	I2C_WaitAck();
00002c  f7fffffe          BL       I2C_WaitAck
;;;147    	conv1=I2C_RadeByte();
000030  f7fffffe          BL       I2C_RadeByte
000034  4606              MOV      r6,r0
;;;148    	I2C_Ack();
000036  f7fffffe          BL       I2C_Ack
;;;149    	conv2=I2C_RadeByte();
00003a  f7fffffe          BL       I2C_RadeByte
00003e  4604              MOV      r4,r0
;;;150    	I2C_Ack();
000040  f7fffffe          BL       I2C_Ack
;;;151    	conv3=I2C_RadeByte();
000044  f7fffffe          BL       I2C_RadeByte
000048  4607              MOV      r7,r0
;;;152    
;;;153    	I2C_NoAck();
00004a  f7fffffe          BL       I2C_NoAck
;;;154    	I2C_Stop();
00004e  f7fffffe          BL       I2C_Stop
;;;155    
;;;156    	conversion=conv1*65535+conv2*256+conv3;
000052  ebc64006          RSB      r0,r6,r6,LSL #16
000056  eb002004          ADD      r0,r0,r4,LSL #8
00005a  19c5              ADDS     r5,r0,r7
;;;157    	return conversion;
00005c  4628              MOV      r0,r5
;;;158    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;159    
                          ENDP


                          AREA ||i.MS561101BA_getPressure||, CODE, READONLY, ALIGN=2

                  MS561101BA_getPressure PROC
;;;189    ************************************************/
;;;190    void MS561101BA_getPressure(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;191    {
000004  b087              SUB      sp,sp,#0x1c
;;;192    	uint32_t sum=0,max=0,min=200000;
000006  2400              MOVS     r4,#0
000008  2500              MOVS     r5,#0
00000a  f8df81dc          LDR      r8,|L5.488|
;;;193    	static u8 p=0;
;;;194    	
;;;195    	D1_Pres= MS561101BA_getConversion();
00000e  f7fffffe          BL       MS561101BA_getConversion
000012  4976              LDR      r1,|L5.492|
000014  6008              STR      r0,[r1,#0]  ; D1_Pres
;;;196    	I2C_delay();
000016  f7fffffe          BL       I2C_delay
;;;197    	OFF_=(uint32_t)Cal_C[2]*65536+((uint32_t)Cal_C[4]*dT)/128;
00001a  4875              LDR      r0,|L5.496|
00001c  6900              LDR      r0,[r0,#0x10]  ; Cal_C
00001e  2300              MOVS     r3,#0
000020  4a74              LDR      r2,|L5.500|
000022  ca06              LDM      r2,{r1,r2}
000024  fba06b01          UMULL    r6,r11,r0,r1
000028  fb03b101          MLA      r1,r3,r1,r11
00002c  fb001102          MLA      r1,r0,r2,r1
000030  2280              MOVS     r2,#0x80
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       __aeabi_uldivmod
000038  4a6d              LDR      r2,|L5.496|
00003a  8912              LDRH     r2,[r2,#8]  ; Cal_C
00003c  0412              LSLS     r2,r2,#16
00003e  eb100902          ADDS     r9,r0,r2
000042  f1410100          ADC      r1,r1,#0
000046  4648              MOV      r0,r9
000048  f7fffffe          BL       __aeabi_ul2d
00004c  4a6a              LDR      r2,|L5.504|
00004e  c203              STM      r2!,{r0,r1}
;;;198    	SENS=(uint32_t)Cal_C[1]*32768+((uint32_t)Cal_C[3]*dT)/256;
000050  4867              LDR      r0,|L5.496|
000052  68c0              LDR      r0,[r0,#0xc]  ; Cal_C
000054  2300              MOVS     r3,#0
000056  4a67              LDR      r2,|L5.500|
000058  ca06              LDM      r2,{r1,r2}
00005a  fba06901          UMULL    r6,r9,r0,r1
00005e  fb039101          MLA      r1,r3,r1,r9
000062  fb001102          MLA      r1,r0,r2,r1
000066  f44f7280          MOV      r2,#0x100
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       __aeabi_uldivmod
000070  4a5f              LDR      r2,|L5.496|
000072  6852              LDR      r2,[r2,#4]  ; Cal_C
000074  03d2              LSLS     r2,r2,#15
000076  1880              ADDS     r0,r0,r2
000078  f1410100          ADC      r1,r1,#0
00007c  4a5f              LDR      r2,|L5.508|
00007e  c203              STM      r2!,{r0,r1}
;;;199    
;;;200    	if(TEMP<2000)
000080  485f              LDR      r0,|L5.512|
000082  e9d02000          LDRD     r2,r0,[r0,#0]
000086  f44f63fa          MOV      r3,#0x7d0
00008a  1ad2              SUBS     r2,r2,r3
00008c  f1700000          SBCS     r0,r0,#0
000090  d24b              BCS      |L5.298|
;;;201    	{
;;;202    		Aux = TEMP*TEMP;
000092  485b              LDR      r0,|L5.512|
000094  e9d01000          LDRD     r1,r0,[r0,#0]
000098  fba12701          UMULL    r2,r7,r1,r1
00009c  fb007701          MLA      r7,r0,r1,r7
0000a0  fb017100          MLA      r1,r1,r0,r7
0000a4  4610              MOV      r0,r2
0000a6  f7fffffe          BL       __aeabi_ul2f
0000aa  4956              LDR      r1,|L5.516|
0000ac  6008              STR      r0,[r1,#0]  ; Aux
;;;203    		OFF2 = 2.5*Aux;
0000ae  4608              MOV      r0,r1
0000b0  6800              LDR      r0,[r0,#0]  ; Aux
0000b2  f7fffffe          BL       __aeabi_f2d
0000b6  4681              MOV      r9,r0
0000b8  2200              MOVS     r2,#0
0000ba  4b53              LDR      r3,|L5.520|
0000bc  f7fffffe          BL       __aeabi_dmul
0000c0  4606              MOV      r6,r0
0000c2  f7fffffe          BL       __aeabi_d2uiz
0000c6  4951              LDR      r1,|L5.524|
0000c8  6008              STR      r0,[r1,#0]  ; OFF2
;;;204    		SENS2 = 1.25*Aux;
0000ca  484e              LDR      r0,|L5.516|
0000cc  6800              LDR      r0,[r0,#0]  ; Aux
0000ce  f7fffffe          BL       __aeabi_f2d
0000d2  4606              MOV      r6,r0
0000d4  2200              MOVS     r2,#0
0000d6  4b4e              LDR      r3,|L5.528|
0000d8  f7fffffe          BL       __aeabi_dmul
0000dc  4681              MOV      r9,r0
0000de  f7fffffe          BL       __aeabi_d2uiz
0000e2  494c              LDR      r1,|L5.532|
0000e4  6008              STR      r0,[r1,#0]  ; SENS2
;;;205    		TEMP = TEMP - TEMP2;
0000e6  4846              LDR      r0,|L5.512|
0000e8  e9d03000          LDRD     r3,r0,[r0,#0]
0000ec  494a              LDR      r1,|L5.536|
0000ee  6809              LDR      r1,[r1,#0]  ; TEMP2
0000f0  1a59              SUBS     r1,r3,r1
0000f2  f1600000          SBC      r0,r0,#0
0000f6  4a42              LDR      r2,|L5.512|
0000f8  e9c21000          STRD     r1,r0,[r2,#0]
;;;206    		OFF_ = OFF_ - OFF2;
0000fc  4843              LDR      r0,|L5.524|
0000fe  6800              LDR      r0,[r0,#0]  ; OFF2
000100  f7fffffe          BL       __aeabi_ui2d
000104  4606              MOV      r6,r0
000106  483c              LDR      r0,|L5.504|
000108  c80c              LDM      r0!,{r2,r3}
00010a  4630              MOV      r0,r6
00010c  f7fffffe          BL       __aeabi_drsub
000110  4a39              LDR      r2,|L5.504|
000112  c203              STM      r2!,{r0,r1}
;;;207    		SENS = SENS - SENS2;	
000114  4839              LDR      r0,|L5.508|
000116  e9d03000          LDRD     r3,r0,[r0,#0]
00011a  493e              LDR      r1,|L5.532|
00011c  6809              LDR      r1,[r1,#0]  ; SENS2
00011e  1a59              SUBS     r1,r3,r1
000120  f1600000          SBC      r0,r0,#0
000124  4a35              LDR      r2,|L5.508|
000126  e9c21000          STRD     r1,r0,[r2,#0]
                  |L5.298|
;;;208    	}
;;;209      Pres_BUFFER[p] = qqp =((D1_Pres*SENS/2097152-OFF_)/32768);
00012a  4830              LDR      r0,|L5.492|
00012c  6800              LDR      r0,[r0,#0]  ; D1_Pres
00012e  2200              MOVS     r2,#0
000130  4932              LDR      r1,|L5.508|
000132  e9d13100          LDRD     r3,r1,[r1,#0]
000136  fba06b03          UMULL    r6,r11,r0,r3
00013a  fb02b203          MLA      r2,r2,r3,r11
00013e  fb012100          MLA      r1,r1,r0,r2
000142  f44f1200          MOV      r2,#0x200000
000146  2300              MOVS     r3,#0
000148  4630              MOV      r0,r6
00014a  f7fffffe          BL       __aeabi_uldivmod
00014e  e9cd0100          STRD     r0,r1,[sp,#0]
000152  f7fffffe          BL       __aeabi_ul2d
000156  4681              MOV      r9,r0
000158  4827              LDR      r0,|L5.504|
00015a  c80c              LDM      r0!,{r2,r3}
00015c  4648              MOV      r0,r9
00015e  f7fffffe          BL       __aeabi_dsub
000162  2200              MOVS     r2,#0
000164  4b2d              LDR      r3,|L5.540|
000166  e9cd0102          STRD     r0,r1,[sp,#8]
00016a  f7fffffe          BL       __aeabi_ddiv
00016e  e9cd0104          STRD     r0,r1,[sp,#0x10]
000172  f7fffffe          BL       __aeabi_d2uiz
000176  492a              LDR      r1,|L5.544|
000178  6008              STR      r0,[r1,#0]  ; qqp
00017a  492a              LDR      r1,|L5.548|
00017c  4a2a              LDR      r2,|L5.552|
00017e  7812              LDRB     r2,[r2,#0]  ; p
000180  f8410022          STR      r0,[r1,r2,LSL #2]
;;;210    	p++;
000184  4828              LDR      r0,|L5.552|
000186  7800              LDRB     r0,[r0,#0]  ; p
000188  1c40              ADDS     r0,r0,#1
00018a  4927              LDR      r1,|L5.552|
00018c  7008              STRB     r0,[r1,#0]
;;;211    	if(p==20) p=0;
00018e  4608              MOV      r0,r1
000190  7800              LDRB     r0,[r0,#0]  ; p
000192  2814              CMP      r0,#0x14
000194  d101              BNE      |L5.410|
000196  2000              MOVS     r0,#0
000198  7008              STRB     r0,[r1,#0]
                  |L5.410|
;;;212    	for(u8 i=0;i<20;i++) 
00019a  2000              MOVS     r0,#0
00019c  e016              B        |L5.460|
                  |L5.414|
;;;213      {
;;;214    		if(Pres_BUFFER[i] > max)  max = Pres_BUFFER[i];
00019e  4921              LDR      r1,|L5.548|
0001a0  f8511020          LDR      r1,[r1,r0,LSL #2]
0001a4  42a9              CMP      r1,r5
0001a6  d903              BLS      |L5.432|
0001a8  491e              LDR      r1,|L5.548|
0001aa  f8515020          LDR      r5,[r1,r0,LSL #2]
0001ae  e007              B        |L5.448|
                  |L5.432|
;;;215    		else if(Pres_BUFFER[i] < min)  min = Pres_BUFFER[i];
0001b0  491c              LDR      r1,|L5.548|
0001b2  f8511020          LDR      r1,[r1,r0,LSL #2]
0001b6  4541              CMP      r1,r8
0001b8  d202              BCS      |L5.448|
0001ba  491a              LDR      r1,|L5.548|
0001bc  f8518020          LDR      r8,[r1,r0,LSL #2]
                  |L5.448|
;;;216    		sum +=Pres_BUFFER[i];
0001c0  4918              LDR      r1,|L5.548|
0001c2  f8511020          LDR      r1,[r1,r0,LSL #2]
0001c6  440c              ADD      r4,r4,r1
0001c8  1c41              ADDS     r1,r0,#1              ;212
0001ca  b2c8              UXTB     r0,r1                 ;212
                  |L5.460|
0001cc  2814              CMP      r0,#0x14              ;212
0001ce  dbe6              BLT      |L5.414|
;;;217    	}	
;;;218    	Pressure=(sum -  max -min)/18;
0001d0  1b60              SUBS     r0,r4,r5
0001d2  eba00008          SUB      r0,r0,r8
0001d6  2112              MOVS     r1,#0x12
0001d8  fbb0f0f1          UDIV     r0,r0,r1
0001dc  4913              LDR      r1,|L5.556|
0001de  6008              STR      r0,[r1,#0]  ; Pressure
;;;219    }
0001e0  b007              ADD      sp,sp,#0x1c
0001e2  e8bd8ff0          POP      {r4-r11,pc}
;;;220    /***********************************************
                          ENDP

0001e6  0000              DCW      0x0000
                  |L5.488|
                          DCD      0x00030d40
                  |L5.492|
                          DCD      D1_Pres
                  |L5.496|
                          DCD      Cal_C
                  |L5.500|
                          DCD      ||dT||
                  |L5.504|
                          DCD      OFF_
                  |L5.508|
                          DCD      SENS
                  |L5.512|
                          DCD      TEMP
                  |L5.516|
                          DCD      Aux
                  |L5.520|
                          DCD      0x40040000
                  |L5.524|
                          DCD      OFF2
                  |L5.528|
                          DCD      0x3ff40000
                  |L5.532|
                          DCD      SENS2
                  |L5.536|
                          DCD      TEMP2
                  |L5.540|
                          DCD      0x40e00000
                  |L5.544|
                          DCD      qqp
                  |L5.548|
                          DCD      Pres_BUFFER
                  |L5.552|
                          DCD      |symbol_number.32|
                  |L5.556|
                          DCD      Pressure

                          AREA ||i.MS561101BA_getTemperature||, CODE, READONLY, ALIGN=2

                  MS561101BA_getTemperature PROC
;;;164    ************************************************/
;;;165    void MS561101BA_getTemperature(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;166    {  
;;;167      static u8 p=0;
;;;168    	uint32_t sum=0,max=0,min=200000000;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  f8df80b0          LDR      r8,|L6.188|
;;;169    	
;;;170    	Temp_BUFFER[p] = MS561101BA_getConversion();
00000c  f7fffffe          BL       MS561101BA_getConversion
000010  492b              LDR      r1,|L6.192|
000012  4a2c              LDR      r2,|L6.196|
000014  7812              LDRB     r2,[r2,#0]  ; p
000016  f8410022          STR      r0,[r1,r2,LSL #2]
;;;171    	p++;
00001a  482a              LDR      r0,|L6.196|
00001c  7800              LDRB     r0,[r0,#0]  ; p
00001e  1c40              ADDS     r0,r0,#1
000020  4928              LDR      r1,|L6.196|
000022  7008              STRB     r0,[r1,#0]
;;;172    	if(p==100) p=0;
000024  4608              MOV      r0,r1
000026  7800              LDRB     r0,[r0,#0]  ; p
000028  2864              CMP      r0,#0x64
00002a  d101              BNE      |L6.48|
00002c  2000              MOVS     r0,#0
00002e  7008              STRB     r0,[r1,#0]
                  |L6.48|
;;;173    	for(u8 i=0;i<100;i++) 
000030  2000              MOVS     r0,#0
000032  e016              B        |L6.98|
                  |L6.52|
;;;174      {
;;;175    		if(Temp_BUFFER[i] > max)  max = Temp_BUFFER[i];
000034  4922              LDR      r1,|L6.192|
000036  f8511020          LDR      r1,[r1,r0,LSL #2]
00003a  42a9              CMP      r1,r5
00003c  d903              BLS      |L6.70|
00003e  4920              LDR      r1,|L6.192|
000040  f8515020          LDR      r5,[r1,r0,LSL #2]
000044  e007              B        |L6.86|
                  |L6.70|
;;;176    		else if(Temp_BUFFER[i] < min)  min = Temp_BUFFER[i];
000046  491e              LDR      r1,|L6.192|
000048  f8511020          LDR      r1,[r1,r0,LSL #2]
00004c  4541              CMP      r1,r8
00004e  d202              BCS      |L6.86|
000050  491b              LDR      r1,|L6.192|
000052  f8518020          LDR      r8,[r1,r0,LSL #2]
                  |L6.86|
;;;177    		sum += Temp_BUFFER[i];
000056  491a              LDR      r1,|L6.192|
000058  f8511020          LDR      r1,[r1,r0,LSL #2]
00005c  440c              ADD      r4,r4,r1
00005e  1c41              ADDS     r1,r0,#1              ;173
000060  b2c8              UXTB     r0,r1                 ;173
                  |L6.98|
000062  2864              CMP      r0,#0x64              ;173
000064  dbe6              BLT      |L6.52|
;;;178    	}	
;;;179    	D2_Temp =(sum -  max -min)/98;
000066  1b60              SUBS     r0,r4,r5
000068  eba00008          SUB      r0,r0,r8
00006c  2162              MOVS     r1,#0x62
00006e  fbb0f0f1          UDIV     r0,r0,r1
000072  4915              LDR      r1,|L6.200|
000074  6008              STR      r0,[r1,#0]  ; D2_Temp
;;;180    	dT=D2_Temp - (((uint32_t)Cal_C[5])<<8);
000076  4815              LDR      r0,|L6.204|
000078  6940              LDR      r0,[r0,#0x14]  ; Cal_C
00007a  6809              LDR      r1,[r1,#0]  ; D2_Temp
00007c  eba12000          SUB      r0,r1,r0,LSL #8
000080  2100              MOVS     r1,#0
000082  4a13              LDR      r2,|L6.208|
000084  c203              STM      r2!,{r0,r1}
;;;181    	TEMP=2000+dT*((uint32_t)Cal_C[6])/8388608;
000086  4811              LDR      r0,|L6.204|
000088  6980              LDR      r0,[r0,#0x18]  ; Cal_C
00008a  2300              MOVS     r3,#0
00008c  4910              LDR      r1,|L6.208|
00008e  e9d12c00          LDRD     r2,r12,[r1,#0]
000092  fba06902          UMULL    r6,r9,r0,r2
000096  fb039202          MLA      r2,r3,r2,r9
00009a  fb00210c          MLA      r1,r0,r12,r2
00009e  f44f0200          MOV      r2,#0x800000
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       __aeabi_uldivmod
0000a8  f44f63fa          MOV      r3,#0x7d0
0000ac  18c0              ADDS     r0,r0,r3
0000ae  f1410100          ADC      r1,r1,#0
0000b2  4a08              LDR      r2,|L6.212|
0000b4  c203              STM      r2!,{r0,r1}
;;;182    	
;;;183    }
0000b6  e8bd87f0          POP      {r4-r10,pc}
;;;184    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L6.188|
                          DCD      0x0bebc200
                  |L6.192|
                          DCD      Temp_BUFFER
                  |L6.196|
                          DCD      p
                  |L6.200|
                          DCD      D2_Temp
                  |L6.204|
                          DCD      Cal_C
                  |L6.208|
                          DCD      ||dT||
                  |L6.212|
                          DCD      TEMP

                          AREA ||i.MS561101BA_startConversion||, CODE, READONLY, ALIGN=1

                  MS561101BA_startConversion PROC
;;;116    *******************************************************************************/
;;;117    void MS561101BA_startConversion(uint8_t command) 
000000  b510              PUSH     {r4,lr}
;;;118    {	
000002  4604              MOV      r4,r0
;;;119    	I2C_Start();
000004  f7fffffe          BL       I2C_Start
;;;120    	I2C_SendByte(MS561101BA_SlaveAddress);
000008  20ee              MOVS     r0,#0xee
00000a  f7fffffe          BL       I2C_SendByte
;;;121    	I2C_WaitAck();
00000e  f7fffffe          BL       I2C_WaitAck
;;;122    	I2C_SendByte(command);
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       I2C_SendByte
;;;123      I2C_WaitAck();
000018  f7fffffe          BL       I2C_WaitAck
;;;124    	I2C_Stop();
00001c  f7fffffe          BL       I2C_Stop
;;;125    }
000020  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i.MS5611_init||, CODE, READONLY, ALIGN=2

                  MS5611_init PROC
;;;77     *******************************************************************************/
;;;78     u8 MS5611_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;79      {	 
;;;80        uint8_t d1,d2,i;
;;;81        MS561101BA_RESET();	 // Reset Device
000002  f7fffffe          BL       MS561101BA_RESET
;;;82     	 delay_ms(20);  
000006  2014              MOVS     r0,#0x14
000008  f7fffffe          BL       delay_ms
;;;83     	 for(i=1;i<=6;i++)
00000c  2401              MOVS     r4,#1
00000e  e032              B        |L8.118|
                  |L8.16|
;;;84     	 {
;;;85     		I2C_Start();
000010  f7fffffe          BL       I2C_Start
;;;86     		I2C_SendByte(MS561101BA_SlaveAddress);
000014  20ee              MOVS     r0,#0xee
000016  f7fffffe          BL       I2C_SendByte
;;;87     		I2C_WaitAck();
00001a  f7fffffe          BL       I2C_WaitAck
;;;88     		I2C_SendByte((MS561101BA_PROM_RD+i*2));
00001e  21a0              MOVS     r1,#0xa0
000020  eb010144          ADD      r1,r1,r4,LSL #1
000024  b2c8              UXTB     r0,r1
000026  f7fffffe          BL       I2C_SendByte
;;;89     		I2C_WaitAck();
00002a  f7fffffe          BL       I2C_WaitAck
;;;90     	  I2C_Stop();
00002e  f7fffffe          BL       I2C_Stop
;;;91     		delay_ms(1);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       delay_ms
;;;92     
;;;93     		I2C_Start();
000038  f7fffffe          BL       I2C_Start
;;;94     		I2C_SendByte(MS561101BA_SlaveAddress+1);
00003c  20ef              MOVS     r0,#0xef
00003e  f7fffffe          BL       I2C_SendByte
;;;95     		I2C_WaitAck();
000042  f7fffffe          BL       I2C_WaitAck
;;;96     		d1=I2C_RadeByte();
000046  f7fffffe          BL       I2C_RadeByte
00004a  4605              MOV      r5,r0
;;;97     		I2C_Ack();
00004c  f7fffffe          BL       I2C_Ack
;;;98     		d2=I2C_RadeByte();
000050  f7fffffe          BL       I2C_RadeByte
000054  4606              MOV      r6,r0
;;;99     		I2C_NoAck();
000056  f7fffffe          BL       I2C_NoAck
;;;100    		I2C_Stop();
00005a  f7fffffe          BL       I2C_Stop
;;;101    
;;;102    		I2C_delay();
00005e  f7fffffe          BL       I2C_delay
;;;103    		Cal_C[i]=((uint16_t)d1<<8)|d2;
000062  ea462005          ORR      r0,r6,r5,LSL #8
000066  4908              LDR      r1,|L8.136|
000068  f8410024          STR      r0,[r1,r4,LSL #2]
;;;104    	  delay_ms(10);
00006c  200a              MOVS     r0,#0xa
00006e  f7fffffe          BL       delay_ms
000072  1c60              ADDS     r0,r4,#1              ;83
000074  b2c4              UXTB     r4,r0                 ;83
                  |L8.118|
000076  2c06              CMP      r4,#6                 ;83
000078  ddca              BLE      |L8.16|
;;;105    	 }
;;;106    	 
;;;107    	 return !Cal_C[0];
00007a  4803              LDR      r0,|L8.136|
00007c  6800              LDR      r0,[r0,#0]  ; Cal_C
00007e  b908              CBNZ     r0,|L8.132|
000080  2001              MOVS     r0,#1
                  |L8.130|
;;;108     }
000082  bd70              POP      {r4-r6,pc}
                  |L8.132|
000084  2000              MOVS     r0,#0                 ;107
000086  e7fc              B        |L8.130|
;;;109    
                          ENDP

                  |L8.136|
                          DCD      Cal_C

                          AREA ||i.SIN||, CODE, READONLY, ALIGN=2

                  ||SIN|| PROC
;;;266    
;;;267    float SIN(float y)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;268    {
000004  4604              MOV      r4,r0
;;;269    	float result;
;;;270      result = y - y * y * y /6;
000006  4621              MOV      r1,r4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       __aeabi_fmul
00000e  4680              MOV      r8,r0
000010  4621              MOV      r1,r4
000012  f7fffffe          BL       __aeabi_fmul
000016  4607              MOV      r7,r0
000018  4905              LDR      r1,|L9.48|
00001a  f7fffffe          BL       __aeabi_fdiv
00001e  4606              MOV      r6,r0
000020  4621              MOV      r1,r4
000022  f7fffffe          BL       __aeabi_frsub
000026  4605              MOV      r5,r0
;;;271    	return result; 
000028  4628              MOV      r0,r5
;;;272    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;273    
                          ENDP

00002e  0000              DCW      0x0000
                  |L9.48|
                          DCD      0x40c00000

                          AREA ||i.Sethigh_Mode||, CODE, READONLY, ALIGN=2

                  Sethigh_Mode PROC
;;;273    
;;;274    void Sethigh_Mode(void) 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;275    {
000004  b08d              SUB      sp,sp,#0x34
;;;276    	static u8 p=0;
;;;277    	int32_t sum=0;
000006  2400              MOVS     r4,#0
;;;278    	
;;;279      Acc_speed_Filterbuffer[p] = (sensor.acc.averag.z * COS(AngE.Pitch/RtA) * COS(AngE.Roll/RtA) - sensor.acc.averag.x * SIN(AngE.Pitch/RtA) + sensor.acc.averag.y * SIN(AngE.Roll/RtA) - sensor.acc.quiet.z)*Acc_G; 
000008  4964              LDR      r1,|L10.412|
00000a  f9b10024          LDRSH    r0,[r1,#0x24]
00000e  f7fffffe          BL       __aeabi_i2f
000012  4963              LDR      r1,|L10.416|
000014  9006              STR      r0,[sp,#0x18]
000016  6848              LDR      r0,[r1,#4]  ; AngE
000018  f7fffffe          BL       __aeabi_f2d
00001c  4607              MOV      r7,r0
00001e  4a61              LDR      r2,|L10.420|
000020  4b61              LDR      r3,|L10.424|
000022  f7fffffe          BL       __aeabi_ddiv
000026  4605              MOV      r5,r0
000028  f7fffffe          BL       __aeabi_d2f
00002c  4682              MOV      r10,r0
00002e  f7fffffe          BL       ||SIN||
000032  4681              MOV      r9,r0
000034  4859              LDR      r0,|L10.412|
000036  68c1              LDR      r1,[r0,#0xc]
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       __aeabi_fmul
00003e  4958              LDR      r1,|L10.416|
000040  9004              STR      r0,[sp,#0x10]
000042  6808              LDR      r0,[r1,#0]  ; AngE
000044  f7fffffe          BL       __aeabi_f2d
000048  4607              MOV      r7,r0
00004a  4a56              LDR      r2,|L10.420|
00004c  4b56              LDR      r3,|L10.424|
00004e  f7fffffe          BL       __aeabi_ddiv
000052  4605              MOV      r5,r0
000054  f7fffffe          BL       __aeabi_d2f
000058  4682              MOV      r10,r0
00005a  f7fffffe          BL       ||SIN||
00005e  4681              MOV      r9,r0
000060  484e              LDR      r0,|L10.412|
000062  6881              LDR      r1,[r0,#8]  ; sensor
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       __aeabi_fmul
00006a  494d              LDR      r1,|L10.416|
00006c  9002              STR      r0,[sp,#8]
00006e  6848              LDR      r0,[r1,#4]  ; AngE
000070  f7fffffe          BL       __aeabi_f2d
000074  4607              MOV      r7,r0
000076  4a4b              LDR      r2,|L10.420|
000078  4b4b              LDR      r3,|L10.424|
00007a  f7fffffe          BL       __aeabi_ddiv
00007e  4605              MOV      r5,r0
000080  f7fffffe          BL       __aeabi_d2f
000084  4682              MOV      r10,r0
000086  f7fffffe          BL       ||COS||
00008a  4681              MOV      r9,r0
00008c  4944              LDR      r1,|L10.416|
00008e  6808              LDR      r0,[r1,#0]  ; AngE
000090  f7fffffe          BL       __aeabi_f2d
000094  4607              MOV      r7,r0
000096  4a43              LDR      r2,|L10.420|
000098  4b43              LDR      r3,|L10.424|
00009a  f7fffffe          BL       __aeabi_ddiv
00009e  4605              MOV      r5,r0
0000a0  f7fffffe          BL       __aeabi_d2f
0000a4  4683              MOV      r11,r0
0000a6  f7fffffe          BL       ||COS||
0000aa  4682              MOV      r10,r0
0000ac  483b              LDR      r0,|L10.412|
0000ae  6901              LDR      r1,[r0,#0x10]
0000b0  4650              MOV      r0,r10
0000b2  f7fffffe          BL       __aeabi_fmul
0000b6  4649              MOV      r1,r9
0000b8  9000              STR      r0,[sp,#0]
0000ba  f7fffffe          BL       __aeabi_fmul
0000be  9001              STR      r0,[sp,#4]
0000c0  9902              LDR      r1,[sp,#8]
0000c2  f7fffffe          BL       __aeabi_fsub
0000c6  9003              STR      r0,[sp,#0xc]
0000c8  9904              LDR      r1,[sp,#0x10]
0000ca  f7fffffe          BL       __aeabi_fadd
0000ce  9005              STR      r0,[sp,#0x14]
0000d0  9906              LDR      r1,[sp,#0x18]
0000d2  f7fffffe          BL       __aeabi_fsub
0000d6  9007              STR      r0,[sp,#0x1c]
0000d8  f7fffffe          BL       __aeabi_f2d
0000dc  4a33              LDR      r2,|L10.428|
0000de  4b34              LDR      r3,|L10.432|
0000e0  e9cd0108          STRD     r0,r1,[sp,#0x20]
0000e4  f7fffffe          BL       __aeabi_dmul
0000e8  e9cd010a          STRD     r0,r1,[sp,#0x28]
0000ec  f7fffffe          BL       __aeabi_d2iz
0000f0  4930              LDR      r1,|L10.436|
0000f2  4a31              LDR      r2,|L10.440|
0000f4  7812              LDRB     r2,[r2,#0]  ; p
0000f6  f8410022          STR      r0,[r1,r2,LSL #2]
;;;280    	p++;
0000fa  482f              LDR      r0,|L10.440|
0000fc  7800              LDRB     r0,[r0,#0]  ; p
0000fe  1c40              ADDS     r0,r0,#1
000100  492d              LDR      r1,|L10.440|
000102  7008              STRB     r0,[r1,#0]
;;;281    	if(p== SAMPLE_NUM) p = 0;
000104  4608              MOV      r0,r1
000106  7800              LDRB     r0,[r0,#0]  ; p
000108  280a              CMP      r0,#0xa
00010a  d101              BNE      |L10.272|
00010c  2000              MOVS     r0,#0
00010e  7008              STRB     r0,[r1,#0]
                  |L10.272|
;;;282    	for(int k=0;k< SAMPLE_NUM;k++)
000110  2000              MOVS     r0,#0
000112  e004              B        |L10.286|
                  |L10.276|
;;;283    	{
;;;284    	   sum +=Acc_speed_Filterbuffer[k];
000114  4927              LDR      r1,|L10.436|
000116  f8511020          LDR      r1,[r1,r0,LSL #2]
00011a  440c              ADD      r4,r4,r1
00011c  1c40              ADDS     r0,r0,#1              ;282
                  |L10.286|
00011e  280a              CMP      r0,#0xa               ;282
000120  dbf8              BLT      |L10.276|
;;;285    	}
;;;286      SpeedZ += sum/SAMPLE_NUM; //加速度积分=速度
000122  200a              MOVS     r0,#0xa
000124  fb94f0f0          SDIV     r0,r4,r0
000128  4924              LDR      r1,|L10.444|
00012a  6809              LDR      r1,[r1,#0]  ; SpeedZ
00012c  4408              ADD      r0,r0,r1
00012e  4923              LDR      r1,|L10.444|
000130  6008              STR      r0,[r1,#0]  ; SpeedZ
;;;287    	
;;;288    	SpeedZ = SpeedZ*0.98;
000132  4608              MOV      r0,r1
000134  6800              LDR      r0,[r0,#0]  ; SpeedZ
000136  f7fffffe          BL       __aeabi_i2d
00013a  4605              MOV      r5,r0
00013c  4a20              LDR      r2,|L10.448|
00013e  4b21              LDR      r3,|L10.452|
000140  f7fffffe          BL       __aeabi_dmul
000144  4607              MOV      r7,r0
000146  f7fffffe          BL       __aeabi_d2iz
00014a  491c              LDR      r1,|L10.444|
00014c  6008              STR      r0,[r1,#0]  ; SpeedZ
;;;289    	
;;;290    
;;;291    	RC_Data.THROTTLE -=  (SpeedZ +(SpeedZ - SpeedZ_old));
00014e  481e              LDR      r0,|L10.456|
000150  8980              LDRH     r0,[r0,#0xc]  ; RC_Data
000152  8809              LDRH     r1,[r1,#0]  ; SpeedZ
000154  4a1d              LDR      r2,|L10.460|
000156  8812              LDRH     r2,[r2,#0]  ; SpeedZ_old
000158  1a89              SUBS     r1,r1,r2
00015a  4a18              LDR      r2,|L10.444|
00015c  8812              LDRH     r2,[r2,#0]  ; SpeedZ
00015e  4411              ADD      r1,r1,r2
000160  1a40              SUBS     r0,r0,r1
000162  b200              SXTH     r0,r0
000164  4918              LDR      r1,|L10.456|
000166  8188              STRH     r0,[r1,#0xc]
;;;292    	
;;;293    	SpeedZ_old = SpeedZ;
000168  4814              LDR      r0,|L10.444|
00016a  6800              LDR      r0,[r0,#0]  ; SpeedZ
00016c  4917              LDR      r1,|L10.460|
00016e  6008              STR      r0,[r1,#0]  ; SpeedZ_old
;;;294    	
;;;295    	if(RC_Data.THROTTLE <=0)  RC_Data.THROTTLE = 0;
000170  4815              LDR      r0,|L10.456|
000172  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000176  2800              CMP      r0,#0
000178  dc03              BGT      |L10.386|
00017a  2000              MOVS     r0,#0
00017c  4912              LDR      r1,|L10.456|
00017e  8188              STRH     r0,[r1,#0xc]
000180  e009              B        |L10.406|
                  |L10.386|
;;;296    	else if(RC_Data.THROTTLE >= 3000) RC_Data.THROTTLE=3000;
000182  4811              LDR      r0,|L10.456|
000184  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000188  f64031b8          MOV      r1,#0xbb8
00018c  4288              CMP      r0,r1
00018e  db02              BLT      |L10.406|
000190  4608              MOV      r0,r1
000192  490d              LDR      r1,|L10.456|
000194  8188              STRH     r0,[r1,#0xc]
                  |L10.406|
;;;297    }
000196  b00d              ADD      sp,sp,#0x34
000198  e8bd8ff0          POP      {r4-r11,pc}
;;;298    
                          ENDP

                  |L10.412|
                          DCD      sensor
                  |L10.416|
                          DCD      AngE
                  |L10.420|
                          DCD      0x63cfb331
                  |L10.424|
                          DCD      0x404ca994
                  |L10.428|
                          DCD      0x5813bd4c
                  |L10.432|
                          DCD      0x3f5399a5
                  |L10.436|
                          DCD      Acc_speed_Filterbuffer
                  |L10.440|
                          DCD      |symbol_number.35|
                  |L10.444|
                          DCD      SpeedZ
                  |L10.448|
                          DCD      0xf5c28f5c
                  |L10.452|
                          DCD      0x3fef5c28
                  |L10.456|
                          DCD      RC_Data
                  |L10.460|
                          DCD      SpeedZ_old

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Cal_C
                          %        28
                  Pres_BUFFER
                          %        80
                  Temp_BUFFER
                          %        400
                  Acc_speed_Filterbuffer
                          %        40

                          AREA ||.data||, DATA, ALIGN=3

                  OFF_
                          %        8
                  Aux
                          DCD      0x00000000
                          DCD      0x00000000
                  ||dT||
                          %        8
                  TEMP
                          %        8
                  OFf
                          %        8
                  SENS
                          %        8
                  D1_Pres
                          DCD      0x00000000
                  D2_Temp
                          DCD      0x00000000
                  Pressure
                          DCD      0x00000000
                  Pressure_old
                          DCD      0x00000000
                  qqp
                          DCD      0x00000000
                  TEMP2
                          DCD      0x00000000
                  ||T2||
                          DCD      0x00000000
                  OFF2
                          DCD      0x00000000
                  SENS2
                          DCD      0x00000000
                  acc_speedz
                          DCD      0x00000000
                  SpeedZ
                          DCD      0x00000000
                  SpeedZ_old
                          DCD      0x00000000
                  p
000060  00                DCB      0x00
                  |symbol_number.32|
000061  00                DCB      0x00
                  Now_doing
000062  01                DCB      0x01
                  flag
000063  00                DCB      0x00
                  |symbol_number.35|
000064  00                DCB      0x00
