; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\multirotor_control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\multirotor_control.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I..\..\User\Driver\STMFLASH -I..\..\User\Modules\Modules_ms5611 -IE:\GitHub\HT-Hawk\Project\MDK-ARM(uV4)\RTE -Id:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\1.1.0\Device\Include -Id:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\multirotor_control.crf ..\..\User\Function\MultiRotor_control\MultiRotor_control.c]
                          THUMB

                          AREA ||i.Attitude_RatePID||, CODE, READONLY, ALIGN=2

                  Attitude_RatePID PROC
;;;122    /*====================================================================================================*/
;;;123    void Attitude_RatePID(void)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;124    {
;;;125      fp32 E_pitch,E_roll,E_yaw;
;;;126    	
;;;127    	// 计算俯仰偏差  
;;;128    	E_pitch = ctrl.pitch.shell.pid_out - sensor.gyro.averag.y * Gyro_G;
000004  4992              LDR      r1,|L1.592|
000006  6c08              LDR      r0,[r1,#0x40]
000008  f7fffffe          BL       __aeabi_f2d
00000c  4682              MOV      r10,r0
00000e  4a91              LDR      r2,|L1.596|
000010  4b91              LDR      r3,|L1.600|
000012  f7fffffe          BL       __aeabi_dmul
000016  4606              MOV      r6,r0
000018  460f              MOV      r7,r1
00001a  4990              LDR      r1,|L1.604|
00001c  6a48              LDR      r0,[r1,#0x24]
00001e  f7fffffe          BL       __aeabi_f2d
000022  4680              MOV      r8,r0
000024  4632              MOV      r2,r6
000026  463b              MOV      r3,r7
000028  f7fffffe          BL       __aeabi_dsub
00002c  4604              MOV      r4,r0
00002e  f7fffffe          BL       __aeabi_d2f
000032  9002              STR      r0,[sp,#8]
;;;129    	ctrl.pitch.core.kp_out = ctrl.pitch.core.kp * E_pitch;
000034  4989              LDR      r1,|L1.604|
000036  6a88              LDR      r0,[r1,#0x28]
000038  9902              LDR      r1,[sp,#8]
00003a  f7fffffe          BL       __aeabi_fmul
00003e  4601              MOV      r1,r0
000040  4886              LDR      r0,|L1.604|
000042  63c1              STR      r1,[r0,#0x3c]
;;;130    	
;;;131    	// 积分
;;;132    	ctrl.pitch.core.increment += E_pitch;
000044  4601              MOV      r1,r0
000046  6b48              LDR      r0,[r1,#0x34]
000048  9902              LDR      r1,[sp,#8]
00004a  f7fffffe          BL       __aeabi_fadd
00004e  4601              MOV      r1,r0
000050  4882              LDR      r0,|L1.604|
000052  6341              STR      r1,[r0,#0x34]
;;;133    	ctrl.pitch.core.increment = data_limit(ctrl.pitch.core.increment,20,-20);
000054  4601              MOV      r1,r0
000056  4a82              LDR      r2,|L1.608|
000058  6b48              LDR      r0,[r1,#0x34]
00005a  4982              LDR      r1,|L1.612|
00005c  f7fffffe          BL       data_limit
000060  4601              MOV      r1,r0
000062  487e              LDR      r0,|L1.604|
000064  6341              STR      r1,[r0,#0x34]
;;;134    	ctrl.pitch.core.ki_out = ctrl.pitch.core.ki/10 * ctrl.pitch.core.increment;
000066  4601              MOV      r1,r0
000068  6ac8              LDR      r0,[r1,#0x2c]
00006a  497f              LDR      r1,|L1.616|
00006c  f7fffffe          BL       __aeabi_fdiv
000070  4604              MOV      r4,r0
000072  487a              LDR      r0,|L1.604|
000074  6b41              LDR      r1,[r0,#0x34]
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       __aeabi_fmul
00007c  4601              MOV      r1,r0
00007e  4877              LDR      r0,|L1.604|
000080  6401              STR      r1,[r0,#0x40]
;;;135    
;;;136    	// 微分
;;;137    	ctrl.pitch.core.kd_out = ctrl.pitch.core.kd * (sensor.gyro.histor.y - sensor.gyro.averag.y);
000082  4a73              LDR      r2,|L1.592|
000084  6c11              LDR      r1,[r2,#0x40]
000086  6cd0              LDR      r0,[r2,#0x4c]
000088  f7fffffe          BL       __aeabi_fsub
00008c  4604              MOV      r4,r0
00008e  4873              LDR      r0,|L1.604|
000090  6b01              LDR      r1,[r0,#0x30]
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       __aeabi_fmul
000098  4601              MOV      r1,r0
00009a  4870              LDR      r0,|L1.604|
00009c  6441              STR      r1,[r0,#0x44]
;;;138    	
;;;139    	ctrl.pitch.core.pid_out = ctrl.pitch.core.kp_out + ctrl.pitch.core.ki_out + ctrl.pitch.core.kd_out;
00009e  4602              MOV      r2,r0
0000a0  6c11              LDR      r1,[r2,#0x40]
0000a2  6bd0              LDR      r0,[r2,#0x3c]
0000a4  f7fffffe          BL       __aeabi_fadd
0000a8  4604              MOV      r4,r0
0000aa  486c              LDR      r0,|L1.604|
0000ac  6c41              LDR      r1,[r0,#0x44]
0000ae  4620              MOV      r0,r4
0000b0  f7fffffe          BL       __aeabi_fadd
0000b4  4601              MOV      r1,r0
0000b6  4869              LDR      r0,|L1.604|
0000b8  6481              STR      r1,[r0,#0x48]
;;;140    	sensor.gyro.histor.y = sensor.gyro.averag.y;
0000ba  4865              LDR      r0,|L1.592|
0000bc  6c01              LDR      r1,[r0,#0x40]
0000be  64c1              STR      r1,[r0,#0x4c]
;;;141    	
;;;142    	// 计算横滚偏差
;;;143    	E_roll = ctrl.roll.shell.pid_out - sensor.gyro.averag.x * Gyro_G;
0000c0  4601              MOV      r1,r0
0000c2  6bc8              LDR      r0,[r1,#0x3c]
0000c4  f7fffffe          BL       __aeabi_f2d
0000c8  4682              MOV      r10,r0
0000ca  4a62              LDR      r2,|L1.596|
0000cc  4b62              LDR      r3,|L1.600|
0000ce  f7fffffe          BL       __aeabi_dmul
0000d2  4606              MOV      r6,r0
0000d4  460f              MOV      r7,r1
0000d6  4961              LDR      r1,|L1.604|
0000d8  6ec8              LDR      r0,[r1,#0x6c]
0000da  f7fffffe          BL       __aeabi_f2d
0000de  4680              MOV      r8,r0
0000e0  4632              MOV      r2,r6
0000e2  463b              MOV      r3,r7
0000e4  f7fffffe          BL       __aeabi_dsub
0000e8  4604              MOV      r4,r0
0000ea  f7fffffe          BL       __aeabi_d2f
0000ee  9001              STR      r0,[sp,#4]
;;;144    	ctrl.roll.core.kp_out = ctrl.roll.core.kp * E_roll;
0000f0  495a              LDR      r1,|L1.604|
0000f2  6f08              LDR      r0,[r1,#0x70]
0000f4  9901              LDR      r1,[sp,#4]
0000f6  f7fffffe          BL       __aeabi_fmul
0000fa  4601              MOV      r1,r0
0000fc  4857              LDR      r0,|L1.604|
0000fe  f8c01084          STR      r1,[r0,#0x84]
;;;145    	
;;;146    	// 积分
;;;147    	ctrl.roll.core.increment += E_roll;
000102  4601              MOV      r1,r0
000104  6fc8              LDR      r0,[r1,#0x7c]
000106  9901              LDR      r1,[sp,#4]
000108  f7fffffe          BL       __aeabi_fadd
00010c  4601              MOV      r1,r0
00010e  4853              LDR      r0,|L1.604|
000110  67c1              STR      r1,[r0,#0x7c]
;;;148    	ctrl.roll.core.increment = data_limit(ctrl.roll.core.increment,20,-20);
000112  4601              MOV      r1,r0
000114  4a52              LDR      r2,|L1.608|
000116  6fc8              LDR      r0,[r1,#0x7c]
000118  4952              LDR      r1,|L1.612|
00011a  f7fffffe          BL       data_limit
00011e  4601              MOV      r1,r0
000120  484e              LDR      r0,|L1.604|
000122  67c1              STR      r1,[r0,#0x7c]
;;;149    	ctrl.roll.core.ki_out = ctrl.roll.core.ki/10 * ctrl.roll.core.increment;
000124  4601              MOV      r1,r0
000126  6f48              LDR      r0,[r1,#0x74]
000128  494f              LDR      r1,|L1.616|
00012a  f7fffffe          BL       __aeabi_fdiv
00012e  4604              MOV      r4,r0
000130  484a              LDR      r0,|L1.604|
000132  6fc1              LDR      r1,[r0,#0x7c]
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       __aeabi_fmul
00013a  4601              MOV      r1,r0
00013c  4847              LDR      r0,|L1.604|
00013e  f8c01088          STR      r1,[r0,#0x88]
;;;150    	
;;;151    	// 微分
;;;152    	ctrl.roll.core.kd_out = ctrl.roll.core.kd * (sensor.gyro.histor.x - sensor.gyro.averag.x);
000142  4a43              LDR      r2,|L1.592|
000144  6bd1              LDR      r1,[r2,#0x3c]
000146  6c90              LDR      r0,[r2,#0x48]
000148  f7fffffe          BL       __aeabi_fsub
00014c  4604              MOV      r4,r0
00014e  4843              LDR      r0,|L1.604|
000150  6f81              LDR      r1,[r0,#0x78]
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       __aeabi_fmul
000158  4601              MOV      r1,r0
00015a  4840              LDR      r0,|L1.604|
00015c  f8c0108c          STR      r1,[r0,#0x8c]
;;;153    	
;;;154    	ctrl.roll.core.pid_out = ctrl.roll.core.kp_out + ctrl.roll.core.ki_out + ctrl.roll.core.kd_out;
000160  4602              MOV      r2,r0
000162  f8d21088          LDR      r1,[r2,#0x88]
000166  f8d20084          LDR      r0,[r2,#0x84]
00016a  f7fffffe          BL       __aeabi_fadd
00016e  4604              MOV      r4,r0
000170  483a              LDR      r0,|L1.604|
000172  f8d0108c          LDR      r1,[r0,#0x8c]
000176  4620              MOV      r0,r4
000178  f7fffffe          BL       __aeabi_fadd
00017c  4601              MOV      r1,r0
00017e  4837              LDR      r0,|L1.604|
000180  f8c01090          STR      r1,[r0,#0x90]
;;;155    	sensor.gyro.histor.x = sensor.gyro.averag.x;   
000184  4832              LDR      r0,|L1.592|
000186  6bc1              LDR      r1,[r0,#0x3c]
000188  6481              STR      r1,[r0,#0x48]
;;;156    	
;;;157    	// 计算航向偏差
;;;158    	E_yaw = ctrl.yaw.shell.pid_out - sensor.gyro.averag.z * Gyro_G;
00018a  4601              MOV      r1,r0
00018c  6c48              LDR      r0,[r1,#0x44]
00018e  f7fffffe          BL       __aeabi_f2d
000192  4680              MOV      r8,r0
000194  4a2f              LDR      r2,|L1.596|
000196  4b30              LDR      r3,|L1.600|
000198  f7fffffe          BL       __aeabi_dmul
00019c  4604              MOV      r4,r0
00019e  460d              MOV      r5,r1
0001a0  492e              LDR      r1,|L1.604|
0001a2  f8d100b4          LDR      r0,[r1,#0xb4]
0001a6  f7fffffe          BL       __aeabi_f2d
0001aa  4606              MOV      r6,r0
0001ac  4622              MOV      r2,r4
0001ae  462b              MOV      r3,r5
0001b0  f7fffffe          BL       __aeabi_dsub
0001b4  4682              MOV      r10,r0
0001b6  f7fffffe          BL       __aeabi_d2f
0001ba  9000              STR      r0,[sp,#0]
;;;159    	ctrl.yaw.core.kp_out = ctrl.yaw.core.kp * E_yaw;
0001bc  4927              LDR      r1,|L1.604|
0001be  f8d100b8          LDR      r0,[r1,#0xb8]
0001c2  9900              LDR      r1,[sp,#0]
0001c4  f7fffffe          BL       __aeabi_fmul
0001c8  4601              MOV      r1,r0
0001ca  4824              LDR      r0,|L1.604|
0001cc  f8c010cc          STR      r1,[r0,#0xcc]
;;;160    	
;;;161    	// 积分
;;;162    	ctrl.yaw.core.increment += E_yaw;
0001d0  4601              MOV      r1,r0
0001d2  f8d100c4          LDR      r0,[r1,#0xc4]
0001d6  9900              LDR      r1,[sp,#0]
0001d8  f7fffffe          BL       __aeabi_fadd
0001dc  4601              MOV      r1,r0
0001de  481f              LDR      r0,|L1.604|
0001e0  f8c010c4          STR      r1,[r0,#0xc4]
;;;163    	ctrl.yaw.core.increment = data_limit(ctrl.yaw.core.increment,20,-20);
0001e4  4601              MOV      r1,r0
0001e6  4a1e              LDR      r2,|L1.608|
0001e8  f8d100c4          LDR      r0,[r1,#0xc4]
0001ec  491d              LDR      r1,|L1.612|
0001ee  f7fffffe          BL       data_limit
0001f2  4601              MOV      r1,r0
0001f4  4819              LDR      r0,|L1.604|
0001f6  f8c010c4          STR      r1,[r0,#0xc4]
;;;164    	ctrl.yaw.core.ki_out = ctrl.yaw.core.ki * ctrl.yaw.core.increment;
0001fa  4602              MOV      r2,r0
0001fc  f8d210c4          LDR      r1,[r2,#0xc4]
000200  f8d200bc          LDR      r0,[r2,#0xbc]
000204  f7fffffe          BL       __aeabi_fmul
000208  4601              MOV      r1,r0
00020a  4814              LDR      r0,|L1.604|
00020c  f8c010d0          STR      r1,[r0,#0xd0]
;;;165    	
;;;166    	// 微分
;;;167    	ctrl.yaw.core.kd_out = ctrl.yaw.core.kd * (sensor.gyro.histor.z - sensor.gyro.averag.z);
000210  4a0f              LDR      r2,|L1.592|
000212  6c51              LDR      r1,[r2,#0x44]
000214  6d10              LDR      r0,[r2,#0x50]
000216  f7fffffe          BL       __aeabi_fsub
00021a  4604              MOV      r4,r0
00021c  480f              LDR      r0,|L1.604|
00021e  f8d010c0          LDR      r1,[r0,#0xc0]
000222  4620              MOV      r0,r4
000224  f7fffffe          BL       __aeabi_fmul
000228  4601              MOV      r1,r0
00022a  480c              LDR      r0,|L1.604|
00022c  f8c010d4          STR      r1,[r0,#0xd4]
;;;168    	
;;;169    	ctrl.yaw.core.pid_out = ctrl.yaw.core.kp_out + ctrl.yaw.core.kd_out;
000230  4602              MOV      r2,r0
000232  f8d210d4          LDR      r1,[r2,#0xd4]
000236  f8d200cc          LDR      r0,[r2,#0xcc]
00023a  f7fffffe          BL       __aeabi_fadd
00023e  4601              MOV      r1,r0
000240  4806              LDR      r0,|L1.604|
000242  f8c010d8          STR      r1,[r0,#0xd8]
;;;170      sensor.gyro.histor.z = sensor.gyro.averag.z;
000246  4802              LDR      r0,|L1.592|
000248  6c41              LDR      r1,[r0,#0x44]
00024a  6501              STR      r1,[r0,#0x50]
;;;171    }
00024c  e8bd8ffe          POP      {r1-r11,pc}
;;;172    /*====================================================================================================*/
                          ENDP

                  |L1.592|
                          DCD      sensor
                  |L1.596|
                          DCD      0xc89d6830
                  |L1.600|
                          DCD      0x3f9f3ffe
                  |L1.604|
                          DCD      ctrl
                  |L1.608|
                          DCD      0xc1a00000
                  |L1.612|
                          DCD      0x41a00000
                  |L1.616|
                          DCD      0x41200000

                          AREA ||i.CONTROL||, CODE, READONLY, ALIGN=2

                  CONTROL PROC
;;;70     /***************************************************/
;;;71     void CONTROL(struct _target Goal)   
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;72     {
;;;73     	float  deviation_pitch,deviation_roll,deviation_yaw;
;;;74     	
;;;75     	if(ctrl.ctrlRate >= 2)
000004  486d              LDR      r0,|L2.444|
000006  7800              LDRB     r0,[r0,#0]  ; ctrl
000008  2802              CMP      r0,#2
00000a  db7d              BLT      |L2.264|
;;;76     	{
;;;77     		//*****************外环(角度环)PID**************************//
;;;78     		//横滚计算///////////////
;;;79     	  deviation_pitch = Goal.Pitch - AngE.Pitch;
00000c  4a6c              LDR      r2,|L2.448|
00000e  6811              LDR      r1,[r2,#0]  ; AngE
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_fsub
000016  4606              MOV      r6,r0
;;;80     		ctrl.pitch.shell.increment += deviation_pitch;
000018  4968              LDR      r1,|L2.444|
00001a  6908              LDR      r0,[r1,#0x10]
00001c  4631              MOV      r1,r6
00001e  f7fffffe          BL       __aeabi_fadd
000022  4966              LDR      r1,|L2.444|
000024  6108              STR      r0,[r1,#0x10]
;;;81     		
;;;82     		//limit for the max increment
;;;83     		if(ctrl.pitch.shell.increment > ctrl.pitch.shell.increment_max)  	ctrl.pitch.shell.increment = ctrl.pitch.shell.increment_max;
000026  460a              MOV      r2,r1
000028  6951              LDR      r1,[r2,#0x14]
00002a  6910              LDR      r0,[r2,#0x10]
00002c  f7fffffe          BL       __aeabi_cfrcmple
000030  d203              BCS      |L2.58|
000032  4862              LDR      r0,|L2.444|
000034  6941              LDR      r1,[r0,#0x14]
000036  6101              STR      r1,[r0,#0x10]
000038  e00f              B        |L2.90|
                  |L2.58|
;;;84     		else if(ctrl.pitch.shell.increment < -ctrl.pitch.shell.increment_max)		ctrl.pitch.shell.increment = -ctrl.pitch.shell.increment_max;
00003a  4860              LDR      r0,|L2.444|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  f0804500          EOR      r5,r0,#0x80000000
000042  485e              LDR      r0,|L2.444|
000044  6901              LDR      r1,[r0,#0x10]
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_cfrcmple
00004c  d205              BCS      |L2.90|
00004e  485b              LDR      r0,|L2.444|
000050  6940              LDR      r0,[r0,#0x14]
000052  f0804100          EOR      r1,r0,#0x80000000
000056  4859              LDR      r0,|L2.444|
000058  6101              STR      r1,[r0,#0x10]
                  |L2.90|
;;;85     		
;;;86     		ctrl.pitch.shell.pid_out = ctrl.pitch.shell.kp * deviation_pitch + ctrl.pitch.shell.ki * ctrl.pitch.shell.increment;
00005a  4a58              LDR      r2,|L2.444|
00005c  6911              LDR      r1,[r2,#0x10]
00005e  6890              LDR      r0,[r2,#8]
000060  f7fffffe          BL       __aeabi_fmul
000064  4605              MOV      r5,r0
000066  4955              LDR      r1,|L2.444|
000068  6848              LDR      r0,[r1,#4]  ; ctrl
00006a  4631              MOV      r1,r6
00006c  f7fffffe          BL       __aeabi_fmul
000070  4680              MOV      r8,r0
000072  4629              MOV      r1,r5
000074  f7fffffe          BL       __aeabi_fadd
000078  4950              LDR      r1,|L2.444|
00007a  6248              STR      r0,[r1,#0x24]
;;;87     		
;;;88     		//俯仰计算//////////////
;;;89     		deviation_roll = Goal.Roll - AngE.Roll;
00007c  4a50              LDR      r2,|L2.448|
00007e  6851              LDR      r1,[r2,#4]  ; AngE
000080  9801              LDR      r0,[sp,#4]
000082  f7fffffe          BL       __aeabi_fsub
000086  4607              MOV      r7,r0
;;;90     		ctrl.roll.shell.increment += deviation_roll;
000088  494c              LDR      r1,|L2.444|
00008a  6d88              LDR      r0,[r1,#0x58]
00008c  4639              MOV      r1,r7
00008e  f7fffffe          BL       __aeabi_fadd
000092  494a              LDR      r1,|L2.444|
000094  6588              STR      r0,[r1,#0x58]
;;;91     		
;;;92     		//limit for the max increment
;;;93     		if(ctrl.roll.shell.increment > ctrl.roll.shell.increment_max)  	ctrl.roll.shell.increment = ctrl.roll.shell.increment_max;
000096  460a              MOV      r2,r1
000098  6dd1              LDR      r1,[r2,#0x5c]
00009a  6d90              LDR      r0,[r2,#0x58]
00009c  f7fffffe          BL       __aeabi_cfrcmple
0000a0  d203              BCS      |L2.170|
0000a2  4846              LDR      r0,|L2.444|
0000a4  6dc1              LDR      r1,[r0,#0x5c]
0000a6  6581              STR      r1,[r0,#0x58]
0000a8  e00f              B        |L2.202|
                  |L2.170|
;;;94     		else if(ctrl.roll.shell.increment < -ctrl.roll.shell.increment_max)		ctrl.roll.shell.increment = -ctrl.roll.shell.increment_max;
0000aa  4844              LDR      r0,|L2.444|
0000ac  6dc0              LDR      r0,[r0,#0x5c]
0000ae  f0804500          EOR      r5,r0,#0x80000000
0000b2  4842              LDR      r0,|L2.444|
0000b4  6d81              LDR      r1,[r0,#0x58]
0000b6  4628              MOV      r0,r5
0000b8  f7fffffe          BL       __aeabi_cfrcmple
0000bc  d205              BCS      |L2.202|
0000be  483f              LDR      r0,|L2.444|
0000c0  6dc0              LDR      r0,[r0,#0x5c]
0000c2  f0804100          EOR      r1,r0,#0x80000000
0000c6  483d              LDR      r0,|L2.444|
0000c8  6581              STR      r1,[r0,#0x58]
                  |L2.202|
;;;95     
;;;96     		ctrl.roll.shell.pid_out  = ctrl.roll.shell.kp * deviation_roll + ctrl.roll.shell.ki * ctrl.roll.shell.increment;
0000ca  4a3c              LDR      r2,|L2.444|
0000cc  6d91              LDR      r1,[r2,#0x58]
0000ce  6d10              LDR      r0,[r2,#0x50]
0000d0  f7fffffe          BL       __aeabi_fmul
0000d4  4605              MOV      r5,r0
0000d6  4939              LDR      r1,|L2.444|
0000d8  6cc8              LDR      r0,[r1,#0x4c]  ; ctrl
0000da  4639              MOV      r1,r7
0000dc  f7fffffe          BL       __aeabi_fmul
0000e0  4680              MOV      r8,r0
0000e2  4629              MOV      r1,r5
0000e4  f7fffffe          BL       __aeabi_fadd
0000e8  4934              LDR      r1,|L2.444|
0000ea  66c8              STR      r0,[r1,#0x6c]
;;;97     		
;;;98     		//航向计算////////////
;;;99         if((Goal.Yaw - AngE.Yaw)>180 || (Goal.Yaw - AngE.Yaw)<-180){
0000ec  4a34              LDR      r2,|L2.448|
0000ee  6891              LDR      r1,[r2,#8]  ; AngE
0000f0  9802              LDR      r0,[sp,#8]
0000f2  f7fffffe          BL       __aeabi_fsub
0000f6  4605              MOV      r5,r0
0000f8  4932              LDR      r1,|L2.452|
0000fa  f7fffffe          BL       __aeabi_cfrcmple
0000fe  d30b              BCC      |L2.280|
000100  4a2f              LDR      r2,|L2.448|
000102  6891              LDR      r1,[r2,#8]  ; AngE
000104  9802              LDR      r0,[sp,#8]
000106  e000              B        |L2.266|
                  |L2.264|
000108  e04c              B        |L2.420|
                  |L2.266|
00010a  f7fffffe          BL       __aeabi_fsub
00010e  4605              MOV      r5,r0
000110  492d              LDR      r1,|L2.456|
000112  f7fffffe          BL       __aeabi_cfcmple
000116  d234              BCS      |L2.386|
                  |L2.280|
;;;100           if(Goal.Yaw>0 && AngE.Yaw<0)  deviation_yaw= (-180 - AngE.Yaw) +(Goal.Yaw - 180);
000118  2100              MOVS     r1,#0
00011a  9802              LDR      r0,[sp,#8]
00011c  f7fffffe          BL       __aeabi_cfrcmple
000120  d214              BCS      |L2.332|
000122  4927              LDR      r1,|L2.448|
000124  6888              LDR      r0,[r1,#8]  ; AngE
000126  2100              MOVS     r1,#0
000128  f7fffffe          BL       __aeabi_cfcmple
00012c  d20e              BCS      |L2.332|
00012e  4925              LDR      r1,|L2.452|
000130  9802              LDR      r0,[sp,#8]
000132  f7fffffe          BL       __aeabi_fsub
000136  4605              MOV      r5,r0
000138  4821              LDR      r0,|L2.448|
00013a  6881              LDR      r1,[r0,#8]  ; AngE
00013c  4822              LDR      r0,|L2.456|
00013e  f7fffffe          BL       __aeabi_fsub
000142  4680              MOV      r8,r0
000144  4629              MOV      r1,r5
000146  f7fffffe          BL       __aeabi_fadd
00014a  4604              MOV      r4,r0
                  |L2.332|
;;;101           if(Goal.Yaw<0 && AngE.Yaw>0)  deviation_yaw= (180 - AngE.Yaw) +(Goal.Yaw + 180);
00014c  2100              MOVS     r1,#0
00014e  9802              LDR      r0,[sp,#8]
000150  f7fffffe          BL       __aeabi_cfcmple
000154  d21b              BCS      |L2.398|
000156  491a              LDR      r1,|L2.448|
000158  6888              LDR      r0,[r1,#8]  ; AngE
00015a  2100              MOVS     r1,#0
00015c  f7fffffe          BL       __aeabi_cfrcmple
000160  d215              BCS      |L2.398|
000162  4918              LDR      r1,|L2.452|
000164  9802              LDR      r0,[sp,#8]
000166  f7fffffe          BL       __aeabi_fadd
00016a  4605              MOV      r5,r0
00016c  4814              LDR      r0,|L2.448|
00016e  6881              LDR      r1,[r0,#8]  ; AngE
000170  4814              LDR      r0,|L2.452|
000172  f7fffffe          BL       __aeabi_fsub
000176  4680              MOV      r8,r0
000178  4629              MOV      r1,r5
00017a  f7fffffe          BL       __aeabi_fadd
00017e  4604              MOV      r4,r0
000180  e005              B        |L2.398|
                  |L2.386|
;;;102        }
;;;103        else  deviation_yaw = Goal.Yaw - AngE.Yaw;
000182  4a0f              LDR      r2,|L2.448|
000184  6891              LDR      r1,[r2,#8]  ; AngE
000186  9802              LDR      r0,[sp,#8]
000188  f7fffffe          BL       __aeabi_fsub
00018c  4604              MOV      r4,r0
                  |L2.398|
;;;104    		
;;;105    	  ctrl.yaw.shell.pid_out = ctrl.yaw.shell.kp * deviation_yaw;
00018e  490b              LDR      r1,|L2.444|
000190  f8d10094          LDR      r0,[r1,#0x94]  ; ctrl
000194  4621              MOV      r1,r4
000196  f7fffffe          BL       __aeabi_fmul
00019a  4908              LDR      r1,|L2.444|
00019c  f8c100b4          STR      r0,[r1,#0xb4]
;;;106        ctrl.ctrlRate = 0; 
0001a0  2000              MOVS     r0,#0
0001a2  7008              STRB     r0,[r1,#0]
                  |L2.420|
;;;107    	}
;;;108    	ctrl.ctrlRate ++;
0001a4  4805              LDR      r0,|L2.444|
0001a6  7800              LDRB     r0,[r0,#0]  ; ctrl
0001a8  1c40              ADDS     r0,r0,#1
0001aa  4904              LDR      r1,|L2.444|
0001ac  7008              STRB     r0,[r1,#0]
;;;109      Attitude_RatePID();
0001ae  f7fffffe          BL       Attitude_RatePID
;;;110    	
;;;111    	Motor_Conter();
0001b2  f7fffffe          BL       Motor_Conter
;;;112    }
0001b6  e8bd81ff          POP      {r0-r8,pc}
;;;113    
                          ENDP

0001ba  0000              DCW      0x0000
                  |L2.444|
                          DCD      ctrl
                  |L2.448|
                          DCD      AngE
                  |L2.452|
                          DCD      0x43340000
                  |L2.456|
                          DCD      0xc3340000

                          AREA ||i.Calculate_Target||, CODE, READONLY, ALIGN=2

                  Calculate_Target PROC
;;;32     /*====================================================================================================*/
;;;33     void Calculate_Target(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;34     {
;;;35     	int16_t ftemp=0;
000004  2400              MOVS     r4,#0
;;;36     	
;;;37     	Target.Pitch = (1500-RC_Data.PITCH)/(20 + 7*RC_Data.SENSITIVITY);
000006  483f              LDR      r0,|L3.260|
000008  f9b0000a          LDRSH    r0,[r0,#0xa]  ; RC_Data
00000c  f24051dc          MOV      r1,#0x5dc
000010  1a09              SUBS     r1,r1,r0
000012  483c              LDR      r0,|L3.260|
000014  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000018  ebc000c0          RSB      r0,r0,r0,LSL #3
00001c  3014              ADDS     r0,r0,#0x14
00001e  fb91f5f0          SDIV     r5,r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_i2f
000028  4937              LDR      r1,|L3.264|
00002a  6008              STR      r0,[r1,#0]  ; Target
;;;38     	Target.Roll = (RC_Data.ROLL-1500)/(20 + 7*RC_Data.SENSITIVITY);
00002c  4835              LDR      r0,|L3.260|
00002e  f9b00008          LDRSH    r0,[r0,#8]  ; RC_Data
000032  f2a050dc          SUB      r0,r0,#0x5dc
000036  4933              LDR      r1,|L3.260|
000038  f9b11010          LDRSH    r1,[r1,#0x10]  ; RC_Data
00003c  ebc101c1          RSB      r1,r1,r1,LSL #3
000040  3114              ADDS     r1,r1,#0x14
000042  fb90f5f1          SDIV     r5,r0,r1
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_i2f
00004c  492e              LDR      r1,|L3.264|
00004e  6048              STR      r0,[r1,#4]  ; Target
;;;39     
;;;40       //目标航向控制。当油门大于最小检查值时，认为用户希望起飞。那么此时的航向做为目标航向
;;;41        if(RC_Data.THROTTLE > RC_MINCHECK ) {
000050  482c              LDR      r0,|L3.260|
000052  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000056  f5b06f96          CMP      r0,#0x4b0
00005a  dd0b              BLE      |L3.116|
;;;42           if(flag.LockYaw != 1){  
00005c  482b              LDR      r0,|L3.268|
00005e  7940              LDRB     r0,[r0,#5]  ; flag
000060  2801              CMP      r0,#1
000062  d00e              BEQ      |L3.130|
;;;43     				 flag.LockYaw = 1;
000064  2001              MOVS     r0,#1
000066  4929              LDR      r1,|L3.268|
000068  7148              STRB     r0,[r1,#5]
;;;44     	       Target.Yaw = AngE.Yaw; //将当前的航向做为目标航向
00006a  4829              LDR      r0,|L3.272|
00006c  6880              LDR      r0,[r0,#8]  ; AngE
00006e  4926              LDR      r1,|L3.264|
000070  6088              STR      r0,[r1,#8]  ; Target
000072  e006              B        |L3.130|
                  |L3.116|
;;;45           }
;;;46        }
;;;47        else {
;;;48     		 flag.LockYaw = 0;	
000074  2000              MOVS     r0,#0
000076  4925              LDR      r1,|L3.268|
000078  7148              STRB     r0,[r1,#5]
;;;49     		 Target.Yaw = AngE.Yaw;
00007a  4825              LDR      r0,|L3.272|
00007c  6880              LDR      r0,[r0,#8]  ; AngE
00007e  4922              LDR      r1,|L3.264|
000080  6088              STR      r0,[r1,#8]  ; Target
                  |L3.130|
;;;50     	 } 
;;;51     	//航向在中点设置一个死区
;;;52     	if((RC_Data.YAW > 1600)||(RC_Data.YAW < 1400)){
000082  4820              LDR      r0,|L3.260|
000084  f9b0000e          LDRSH    r0,[r0,#0xe]  ; RC_Data
000088  f5b06fc8          CMP      r0,#0x640
00008c  dc05              BGT      |L3.154|
00008e  481d              LDR      r0,|L3.260|
000090  f9b0000e          LDRSH    r0,[r0,#0xe]  ; RC_Data
000094  f5b06faf          CMP      r0,#0x578
000098  da32              BGE      |L3.256|
                  |L3.154|
;;;53     		ftemp = 1500 - RC_Data.YAW; 
00009a  481a              LDR      r0,|L3.260|
00009c  89c0              LDRH     r0,[r0,#0xe]  ; RC_Data
00009e  f24051dc          MOV      r1,#0x5dc
0000a2  1a08              SUBS     r0,r1,r0
0000a4  b204              SXTH     r4,r0
;;;54     	  Target.Yaw += (ftemp / 200.0f)*0.1f; 
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       __aeabi_i2f
0000ac  4607              MOV      r7,r0
0000ae  4919              LDR      r1,|L3.276|
0000b0  f7fffffe          BL       __aeabi_fdiv
0000b4  4606              MOV      r6,r0
0000b6  4918              LDR      r1,|L3.280|
0000b8  f7fffffe          BL       __aeabi_fmul
0000bc  4605              MOV      r5,r0
0000be  4812              LDR      r0,|L3.264|
0000c0  6881              LDR      r1,[r0,#8]  ; Target
0000c2  4628              MOV      r0,r5
0000c4  f7fffffe          BL       __aeabi_fadd
0000c8  490f              LDR      r1,|L3.264|
0000ca  6088              STR      r0,[r1,#8]  ; Target
;;;55     		
;;;56     		//转[-180.0,+180.0]
;;;57     	  if(Target.Yaw >180.0f) Target.Yaw -= 360.0f;	
0000cc  6888              LDR      r0,[r1,#8]  ; Target
0000ce  4913              LDR      r1,|L3.284|
0000d0  f7fffffe          BL       __aeabi_cfrcmple
0000d4  d207              BCS      |L3.230|
0000d6  490c              LDR      r1,|L3.264|
0000d8  6888              LDR      r0,[r1,#8]  ; Target
0000da  4911              LDR      r1,|L3.288|
0000dc  f7fffffe          BL       __aeabi_fsub
0000e0  4909              LDR      r1,|L3.264|
0000e2  6088              STR      r0,[r1,#8]  ; Target
0000e4  e00c              B        |L3.256|
                  |L3.230|
;;;58     	  else if(Target.Yaw <-180.0f)Target.Yaw += 360.0f;
0000e6  4908              LDR      r1,|L3.264|
0000e8  6888              LDR      r0,[r1,#8]  ; Target
0000ea  490e              LDR      r1,|L3.292|
0000ec  f7fffffe          BL       __aeabi_cfcmple
0000f0  d206              BCS      |L3.256|
0000f2  4905              LDR      r1,|L3.264|
0000f4  6888              LDR      r0,[r1,#8]  ; Target
0000f6  490a              LDR      r1,|L3.288|
0000f8  f7fffffe          BL       __aeabi_fadd
0000fc  4902              LDR      r1,|L3.264|
0000fe  6088              STR      r0,[r1,#8]  ; Target
                  |L3.256|
;;;59     	}
;;;60     }
000100  e8bd81f0          POP      {r4-r8,pc}
;;;61     
                          ENDP

                  |L3.260|
                          DCD      RC_Data
                  |L3.264|
                          DCD      Target
                  |L3.268|
                          DCD      flag
                  |L3.272|
                          DCD      AngE
                  |L3.276|
                          DCD      0x43480000
                  |L3.280|
                          DCD      0x3dcccccd
                  |L3.284|
                          DCD      0x43340000
                  |L3.288|
                          DCD      0x43b40000
                  |L3.292|
                          DCD      0xc3340000

                          AREA ||i.Motor_Conter||, CODE, READONLY, ALIGN=2

                  Motor_Conter PROC
;;;180    /*====================================================================================================*/
;;;181    void Motor_Conter(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;182    {
000004  b08b              SUB      sp,sp,#0x2c
;;;183    	s16 pitch,roll,yaw;
;;;184    	
;;;185    	pitch = ctrl.pitch.core.pid_out;
000006  4941              LDR      r1,|L4.268|
000008  6c88              LDR      r0,[r1,#0x48]
00000a  f7fffffe          BL       __aeabi_f2iz
00000e  b204              SXTH     r4,r0
;;;186      roll  = ctrl.roll.core.pid_out;    
000010  493e              LDR      r1,|L4.268|
000012  f8d10090          LDR      r0,[r1,#0x90]
000016  f7fffffe          BL       __aeabi_f2iz
00001a  fa0ff980          SXTH     r9,r0
;;;187     	yaw   = -ctrl.yaw.core.pid_out;
00001e  483b              LDR      r0,|L4.268|
000020  f8d000d8          LDR      r0,[r0,#0xd8]
000024  f0804500          EOR      r5,r0,#0x80000000
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       __aeabi_f2iz
00002e  fa0ffa80          SXTH     r10,r0
;;;188    	
;;;189      if(RC_Data.THROTTLE > RC_MINCHECK) {
000032  4837              LDR      r0,|L4.272|
000034  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000038  f5b06f96          CMP      r0,#0x4b0
00003c  dd51              BLE      |L4.226|
;;;190    		int date_throttle	= (RC_Data.THROTTLE-1000)/cos(AngE.Roll/RtA)/cos(AngE.Pitch/RtA);
00003e  4935              LDR      r1,|L4.276|
000040  6808              LDR      r0,[r1,#0]  ; AngE
000042  f7fffffe          BL       __aeabi_f2d
000046  4607              MOV      r7,r0
000048  4a33              LDR      r2,|L4.280|
00004a  4b34              LDR      r3,|L4.284|
00004c  f7fffffe          BL       __aeabi_ddiv
000050  4605              MOV      r5,r0
000052  f7fffffe          BL       ||cos||
000056  e9cd0106          STRD     r0,r1,[sp,#0x18]
00005a  492e              LDR      r1,|L4.276|
00005c  6848              LDR      r0,[r1,#4]  ; AngE
00005e  f7fffffe          BL       __aeabi_f2d
000062  4605              MOV      r5,r0
000064  4a2c              LDR      r2,|L4.280|
000066  4b2d              LDR      r3,|L4.284|
000068  f7fffffe          BL       __aeabi_ddiv
00006c  e9cd0100          STRD     r0,r1,[sp,#0]
000070  f7fffffe          BL       ||cos||
000074  e9cd0102          STRD     r0,r1,[sp,#8]
000078  4925              LDR      r1,|L4.272|
00007a  f9b1100c          LDRSH    r1,[r1,#0xc]  ; RC_Data
00007e  f5a1707a          SUB      r0,r1,#0x3e8
000082  f7fffffe          BL       __aeabi_i2d
000086  4607              MOV      r7,r0
000088  e9dd2302          LDRD     r2,r3,[sp,#8]
00008c  f7fffffe          BL       __aeabi_ddiv
000090  e9cd0104          STRD     r0,r1,[sp,#0x10]
000094  e9dd2306          LDRD     r2,r3,[sp,#0x18]
000098  f7fffffe          BL       __aeabi_ddiv
00009c  e9cd0108          STRD     r0,r1,[sp,#0x20]
0000a0  f7fffffe          BL       __aeabi_d2iz
0000a4  4683              MOV      r11,r0
;;;191    		
;;;192    		Moto_duty[0] = date_throttle - pitch - roll + yaw;
0000a6  ebab0004          SUB      r0,r11,r4
0000aa  eba00009          SUB      r0,r0,r9
0000ae  4450              ADD      r0,r0,r10
0000b0  b200              SXTH     r0,r0
0000b2  491b              LDR      r1,|L4.288|
0000b4  8008              STRH     r0,[r1,#0]
;;;193    	  Moto_duty[1] = date_throttle - pitch + roll - yaw;
0000b6  ebab0004          SUB      r0,r11,r4
0000ba  4448              ADD      r0,r0,r9
0000bc  eba0000a          SUB      r0,r0,r10
0000c0  b200              SXTH     r0,r0
0000c2  8048              STRH     r0,[r1,#2]
;;;194    		Moto_duty[2] = date_throttle + pitch + roll + yaw;
0000c4  eb0b0004          ADD      r0,r11,r4
0000c8  4448              ADD      r0,r0,r9
0000ca  4450              ADD      r0,r0,r10
0000cc  b200              SXTH     r0,r0
0000ce  8088              STRH     r0,[r1,#4]
;;;195    	  Moto_duty[3] = date_throttle + pitch - roll - yaw;
0000d0  eb0b0004          ADD      r0,r11,r4
0000d4  eba00009          SUB      r0,r0,r9
0000d8  eba0000a          SUB      r0,r0,r10
0000dc  b200              SXTH     r0,r0
0000de  80c8              STRH     r0,[r1,#6]
;;;196    	}
0000e0  e007              B        |L4.242|
                  |L4.226|
;;;197    	else
;;;198    	{	
;;;199        Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = IDLING;	
0000e2  20d2              MOVS     r0,#0xd2
0000e4  490e              LDR      r1,|L4.288|
0000e6  80c8              STRH     r0,[r1,#6]
0000e8  8088              STRH     r0,[r1,#4]
0000ea  8048              STRH     r0,[r1,#2]
0000ec  8008              STRH     r0,[r1,#0]
;;;200    		Reset_Integral();		
0000ee  f7fffffe          BL       Reset_Integral
                  |L4.242|
;;;201    	}
;;;202    	if(flag.ARMED)  moto_PwmRflash(&Moto_duty[0]);		
0000f2  480c              LDR      r0,|L4.292|
0000f4  7900              LDRB     r0,[r0,#4]  ; flag
0000f6  b118              CBZ      r0,|L4.256|
0000f8  4809              LDR      r0,|L4.288|
0000fa  f7fffffe          BL       moto_PwmRflash
0000fe  e001              B        |L4.260|
                  |L4.256|
;;;203    	else            moto_STOP();	
000100  f7fffffe          BL       moto_STOP
                  |L4.260|
;;;204    }
000104  b00b              ADD      sp,sp,#0x2c
000106  e8bd8ff0          POP      {r4-r11,pc}
;;;205    
                          ENDP

00010a  0000              DCW      0x0000
                  |L4.268|
                          DCD      ctrl
                  |L4.272|
                          DCD      RC_Data
                  |L4.276|
                          DCD      AngE
                  |L4.280|
                          DCD      0x63cfb331
                  |L4.284|
                          DCD      0x404ca994
                  |L4.288|
                          DCD      Moto_duty
                  |L4.292|
                          DCD      flag

                          AREA ||i.Reset_Integral||, CODE, READONLY, ALIGN=2

                  Reset_Integral PROC
;;;214    /*====================================================================================================*/
;;;215    void Reset_Integral(void)
000000  2100              MOVS     r1,#0
;;;216    {
;;;217    	ctrl.pitch.shell.increment = 0;
000002  4804              LDR      r0,|L5.20|
000004  6101              STR      r1,[r0,#0x10]
;;;218    	ctrl.roll.shell.increment= 0;	
000006  6581              STR      r1,[r0,#0x58]
;;;219      ctrl.pitch.core.increment = 0;		
000008  6341              STR      r1,[r0,#0x34]
;;;220      ctrl.roll.core.increment = 0;		
00000a  67c1              STR      r1,[r0,#0x7c]
;;;221    	ctrl.yaw.core.increment = 0;
00000c  f8c010c4          STR      r1,[r0,#0xc4]
;;;222    }
000010  4770              BX       lr
;;;223    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      ctrl

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ctrl
                          %        220
                  Target
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  Moto_duty
                          %        8
                  motor_array
                          DCD      Moto_duty
