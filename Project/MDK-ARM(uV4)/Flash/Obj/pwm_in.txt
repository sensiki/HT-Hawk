; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\pwm_in.o --depend=.\Flash\Obj\pwm_in.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I"D:\KEIL MDK\ARM\INC" -I"D:\KEIL MDK\ARM\INC\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\pwm_in.crf ..\..\User\Driver\PWM_IN\pwm_in.c]
                          THUMB

                          AREA ||i.PWM_IN_Config||, CODE, READONLY, ALIGN=2

                  PWM_IN_Config PROC
;;;23     /*====================================================================================================*/
;;;24     void PWM_IN_Config(void)
000000  b500              PUSH     {lr}
;;;25     {
000002  b087              SUB      sp,sp,#0x1c
;;;26     	  GPIO_InitTypeDef         GPIO_InitStructure;
;;;27     	  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;28     	  TIM_ICInitTypeDef  TIM4_ICInitStructure;
;;;29     
;;;30     	  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);	 //使能TIM4时钟
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;31      	  RCC_APB2PeriphClockCmd(RCC_GPIO_TIM4, ENABLE);  
00000c  2101              MOVS     r1,#1
00000e  2004              MOVS     r0,#4
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;32     
;;;33     	  GPIO_InitStructure.GPIO_Pin  = TIM4_CH1 | TIM4_CH2 | TIM4_CH3 | TIM4_CH4;             
000014  200f              MOVS     r0,#0xf
000016  f8ad0018          STRH     r0,[sp,#0x18]
;;;34     	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;            
00001a  2028              MOVS     r0,#0x28
00001c  f88d001b          STRB     r0,[sp,#0x1b]
;;;35     	  GPIO_Init(GPIOB, &GPIO_InitStructure);
000020  a906              ADD      r1,sp,#0x18
000022  483e              LDR      r0,|L1.284|
000024  f7fffffe          BL       GPIO_Init
;;;36     	  GPIO_ResetBits(GPIO_TIM4,TIM4_CH1 | TIM4_CH2 | TIM4_CH3 | TIM4_CH4);		
000028  210f              MOVS     r1,#0xf
00002a  483d              LDR      r0,|L1.288|
00002c  f7fffffe          BL       GPIO_ResetBits
;;;37     
;;;38     	  //初始化定时器4 TIM4	 
;;;39     	  TIM_TimeBaseStructure.TIM_Period = 0XFFFF;                   //设定计数器自动重装值 
000030  f64f70ff          MOV      r0,#0xffff
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;40     	  TIM_TimeBaseStructure.TIM_Prescaler =71; 	                   //预分频器   
000038  2047              MOVS     r0,#0x47
00003a  f8ad000c          STRH     r0,[sp,#0xc]
;;;41     	  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;      //设置时钟分割:TDTS = Tck_tim
00003e  2000              MOVS     r0,#0
000040  f8ad0012          STRH     r0,[sp,#0x12]
;;;42     	  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
000044  f8ad000e          STRH     r0,[sp,#0xe]
;;;43     	  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);              //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位
000048  a903              ADD      r1,sp,#0xc
00004a  f04f4080          MOV      r0,#0x40000000
00004e  f7fffffe          BL       TIM_TimeBaseInit
;;;44       
;;;45     	  //初始化TIM4输入捕获参数
;;;46     	  TIM4_ICInitStructure.TIM_Channel = TIM_Channel_1;                //CC1S=01 	选择输入端 IC1映射到TI1上
000052  2000              MOVS     r0,#0
000054  f8ad0000          STRH     r0,[sp,#0]
;;;47       	TIM4_ICInitStructure.TIM_ICPolarity =TIM_ICPolarity_Rising;	   //上升沿捕获
000058  f8ad0002          STRH     r0,[sp,#2]
;;;48       	TIM4_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
00005c  2001              MOVS     r0,#1
00005e  f8ad0004          STRH     r0,[sp,#4]
;;;49       	TIM4_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	         //配置输入分频,不分频 
000062  2000              MOVS     r0,#0
000064  f8ad0006          STRH     r0,[sp,#6]
;;;50       	TIM4_ICInitStructure.TIM_ICFilter = 0x00;                        //IC1F=0000 配置输入滤波器 不滤波
000068  f8ad0008          STRH     r0,[sp,#8]
;;;51       	TIM_ICInit(TIM2, &TIM4_ICInitStructure);
00006c  4669              MOV      r1,sp
00006e  f04f4080          MOV      r0,#0x40000000
000072  f7fffffe          BL       TIM_ICInit
;;;52     	
;;;53     	  TIM4_ICInitStructure.TIM_Channel = TIM_Channel_2;                //CC1S=01 	选择输入端 IC1映射到TI1上
000076  2004              MOVS     r0,#4
000078  f8ad0000          STRH     r0,[sp,#0]
;;;54       	TIM4_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	   //上升沿捕获
00007c  2000              MOVS     r0,#0
00007e  f8ad0002          STRH     r0,[sp,#2]
;;;55       	TIM4_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
000082  2001              MOVS     r0,#1
000084  f8ad0004          STRH     r0,[sp,#4]
;;;56       	TIM4_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	         //配置输入分频,不分频 
000088  2000              MOVS     r0,#0
00008a  f8ad0006          STRH     r0,[sp,#6]
;;;57       	TIM4_ICInitStructure.TIM_ICFilter = 0x00;                        //IC1F=0000 配置输入滤波器 不滤波
00008e  f8ad0008          STRH     r0,[sp,#8]
;;;58       	TIM_ICInit(TIM2, &TIM4_ICInitStructure);
000092  4669              MOV      r1,sp
000094  f04f4080          MOV      r0,#0x40000000
000098  f7fffffe          BL       TIM_ICInit
;;;59     		
;;;60     		TIM4_ICInitStructure.TIM_Channel = TIM_Channel_3;                //CC1S=01 	选择输入端 IC1映射到TI1上
00009c  2008              MOVS     r0,#8
00009e  f8ad0000          STRH     r0,[sp,#0]
;;;61       	TIM4_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	   //上升沿捕获
0000a2  2000              MOVS     r0,#0
0000a4  f8ad0002          STRH     r0,[sp,#2]
;;;62       	TIM4_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
0000a8  2001              MOVS     r0,#1
0000aa  f8ad0004          STRH     r0,[sp,#4]
;;;63       	TIM4_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	         //配置输入分频,不分频 
0000ae  2000              MOVS     r0,#0
0000b0  f8ad0006          STRH     r0,[sp,#6]
;;;64       	TIM4_ICInitStructure.TIM_ICFilter = 0x00;                        //IC1F=0000 配置输入滤波器 不滤波
0000b4  f8ad0008          STRH     r0,[sp,#8]
;;;65       	TIM_ICInit(TIM2, &TIM4_ICInitStructure);
0000b8  4669              MOV      r1,sp
0000ba  f04f4080          MOV      r0,#0x40000000
0000be  f7fffffe          BL       TIM_ICInit
;;;66     		
;;;67     		TIM4_ICInitStructure.TIM_Channel = TIM_Channel_4;                //CC1S=01 	选择输入端 IC1映射到TI1上
0000c2  200c              MOVS     r0,#0xc
0000c4  f8ad0000          STRH     r0,[sp,#0]
;;;68       	TIM4_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	   //上升沿捕获
0000c8  2000              MOVS     r0,#0
0000ca  f8ad0002          STRH     r0,[sp,#2]
;;;69       	TIM4_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; //映射到TI1上
0000ce  2001              MOVS     r0,#1
0000d0  f8ad0004          STRH     r0,[sp,#4]
;;;70       	TIM4_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	         //配置输入分频,不分频 
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0006          STRH     r0,[sp,#6]
;;;71       	TIM4_ICInitStructure.TIM_ICFilter = 0x00;                        //IC1F=0000 配置输入滤波器 不滤波
0000da  f8ad0008          STRH     r0,[sp,#8]
;;;72       	TIM_ICInit(TIM2, &TIM4_ICInitStructure);
0000de  4669              MOV      r1,sp
0000e0  f04f4080          MOV      r0,#0x40000000
0000e4  f7fffffe          BL       TIM_ICInit
;;;73     	
;;;74     	  TIM_Cmd(TIM2,ENABLE ); 
0000e8  2101              MOVS     r1,#1
0000ea  0788              LSLS     r0,r1,#30
0000ec  f7fffffe          BL       TIM_Cmd
;;;75     		
;;;76     	  TIM_ITConfig(TIM2, TIM_IT_CC1, ENABLE);        //允许更新中断 ,允许CC1IE捕获中断	
0000f0  2201              MOVS     r2,#1
0000f2  2102              MOVS     r1,#2
0000f4  0748              LSLS     r0,r1,#29
0000f6  f7fffffe          BL       TIM_ITConfig
;;;77     	  TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);
0000fa  2201              MOVS     r2,#1
0000fc  2104              MOVS     r1,#4
0000fe  0708              LSLS     r0,r1,#28
000100  f7fffffe          BL       TIM_ITConfig
;;;78     	  TIM_ITConfig(TIM2, TIM_IT_CC3, ENABLE);
000104  2201              MOVS     r2,#1
000106  2108              MOVS     r1,#8
000108  06c8              LSLS     r0,r1,#27
00010a  f7fffffe          BL       TIM_ITConfig
;;;79     	  TIM_ITConfig(TIM2, TIM_IT_CC4, ENABLE);
00010e  2201              MOVS     r2,#1
000110  2110              MOVS     r1,#0x10
000112  0688              LSLS     r0,r1,#26
000114  f7fffffe          BL       TIM_ITConfig
;;;80     			
;;;81     }
000118  b007              ADD      sp,sp,#0x1c
00011a  bd00              POP      {pc}
;;;82     /*====================================================================================================*/
                          ENDP

                  |L1.284|
                          DCD      0x40010c00
                  |L1.288|
                          DCD      0x40010800

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;90     /*====================================================================================================*/
;;;91     void TIM2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;92     { 
;;;93         if (TIM_GetITStatus(TIM2, TIM_IT_CC1) != RESET)   //捕获1发生捕获事件
000002  2102              MOVS     r1,#2
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b370              CBZ      r0,|L2.106|
;;;94     		{	
;;;95     			TIM_ClearITPendingBit(TIM2, TIM_IT_CC1); //清除中断标志位
00000c  2102              MOVS     r1,#2
00000e  0748              LSLS     r0,r1,#29
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;96     			if(GPIO_ReadInputDataBit(GPIO_TIM4,TIM4_CH1) == 1) 
000014  2101              MOVS     r1,#1
000016  4873              LDR      r0,|L2.484|
000018  f7fffffe          BL       GPIO_ReadInputDataBit
00001c  2801              CMP      r0,#1
00001e  d10a              BNE      |L2.54|
;;;97     			{
;;;98     				  TIM_OC1PolarityConfig(TIM2,TIM_ICPolarity_Falling);		//CC1P=1 设置为下降沿捕获
000020  2102              MOVS     r1,#2
000022  0780              LSLS     r0,r0,#30
000024  f7fffffe          BL       TIM_OC1PolarityConfig
;;;99               Rise[0]=TIM_GetCapture1(TIM2);
000028  f04f4080          MOV      r0,#0x40000000
00002c  f7fffffe          BL       TIM_GetCapture1
000030  496d              LDR      r1,|L2.488|
000032  8008              STRH     r0,[r1,#0]
000034  e021              B        |L2.122|
                  |L2.54|
;;;100          }
;;;101    			else 
;;;102    			{
;;;103    				  TIM_OC1PolarityConfig(TIM2,TIM_ICPolarity_Rising); //CC1P=0 设置为上升沿捕获
000036  2100              MOVS     r1,#0
000038  f04f4080          MOV      r0,#0x40000000
00003c  f7fffffe          BL       TIM_OC1PolarityConfig
;;;104              Drop[0]=TIM_GetCapture1(TIM2);
000040  f04f4080          MOV      r0,#0x40000000
000044  f7fffffe          BL       TIM_GetCapture1
000048  4968              LDR      r1,|L2.492|
00004a  8008              STRH     r0,[r1,#0]
;;;105    				  if(Rise[0]>Drop[0])  RC_Pwm_In[0] = 65535-Rise[0] + Drop[0];
00004c  4866              LDR      r0,|L2.488|
00004e  8800              LDRH     r0,[r0,#0]  ; Rise
000050  8809              LDRH     r1,[r1,#0]  ; Drop
000052  4288              CMP      r0,r1
000054  dd0a              BLE      |L2.108|
000056  4864              LDR      r0,|L2.488|
000058  8800              LDRH     r0,[r0,#0]  ; Rise
00005a  f64f71ff          MOV      r1,#0xffff
00005e  1a08              SUBS     r0,r1,r0
000060  4962              LDR      r1,|L2.492|
000062  8809              LDRH     r1,[r1,#0]  ; Drop
000064  4408              ADD      r0,r0,r1
000066  4962              LDR      r1,|L2.496|
000068  8008              STRH     r0,[r1,#0]
                  |L2.106|
00006a  e006              B        |L2.122|
                  |L2.108|
;;;106    					else 	               RC_Pwm_In[0] = Drop[0] - Rise[0];
00006c  485f              LDR      r0,|L2.492|
00006e  8800              LDRH     r0,[r0,#0]  ; Drop
000070  495d              LDR      r1,|L2.488|
000072  8809              LDRH     r1,[r1,#0]  ; Rise
000074  1a40              SUBS     r0,r0,r1
000076  495e              LDR      r1,|L2.496|
000078  8008              STRH     r0,[r1,#0]
                  |L2.122|
;;;107          }			
;;;108    		}	
;;;109    	  
;;;110    		if (TIM_GetITStatus(TIM2, TIM_IT_CC2) != RESET)   //捕获1发生捕获事件
00007a  2104              MOVS     r1,#4
00007c  0708              LSLS     r0,r1,#28
00007e  f7fffffe          BL       TIM_GetITStatus
000082  b370              CBZ      r0,|L2.226|
;;;111    		{	
;;;112    			TIM_ClearITPendingBit(TIM2, TIM_IT_CC2); //清除中断标志位
000084  2104              MOVS     r1,#4
000086  0708              LSLS     r0,r1,#28
000088  f7fffffe          BL       TIM_ClearITPendingBit
;;;113    			if(GPIO_ReadInputDataBit(GPIO_TIM4,TIM4_CH2) == 1) 
00008c  2102              MOVS     r1,#2
00008e  4855              LDR      r0,|L2.484|
000090  f7fffffe          BL       GPIO_ReadInputDataBit
000094  2801              CMP      r0,#1
000096  d10a              BNE      |L2.174|
;;;114    			{
;;;115    				  TIM_OC2PolarityConfig(TIM2,TIM_ICPolarity_Falling);		//CC1P=1 设置为下降沿捕获
000098  2102              MOVS     r1,#2
00009a  0780              LSLS     r0,r0,#30
00009c  f7fffffe          BL       TIM_OC2PolarityConfig
;;;116              Rise[1]=TIM_GetCapture2(TIM2);
0000a0  f04f4080          MOV      r0,#0x40000000
0000a4  f7fffffe          BL       TIM_GetCapture2
0000a8  494f              LDR      r1,|L2.488|
0000aa  8048              STRH     r0,[r1,#2]
0000ac  e021              B        |L2.242|
                  |L2.174|
;;;117          }
;;;118    			else 
;;;119    			{
;;;120    				  TIM_OC2PolarityConfig(TIM2,TIM_ICPolarity_Rising); //CC1P=0 设置为上升沿捕获
0000ae  2100              MOVS     r1,#0
0000b0  f04f4080          MOV      r0,#0x40000000
0000b4  f7fffffe          BL       TIM_OC2PolarityConfig
;;;121              Drop[1]=TIM_GetCapture2(TIM2);
0000b8  f04f4080          MOV      r0,#0x40000000
0000bc  f7fffffe          BL       TIM_GetCapture2
0000c0  494a              LDR      r1,|L2.492|
0000c2  8048              STRH     r0,[r1,#2]
;;;122    				  if(Rise[1]>Drop[1])  RC_Pwm_In[1] = 65535-Rise[1] + Drop[1];
0000c4  4848              LDR      r0,|L2.488|
0000c6  8840              LDRH     r0,[r0,#2]  ; Rise
0000c8  8849              LDRH     r1,[r1,#2]  ; Drop
0000ca  4288              CMP      r0,r1
0000cc  dd0a              BLE      |L2.228|
0000ce  4846              LDR      r0,|L2.488|
0000d0  8840              LDRH     r0,[r0,#2]  ; Rise
0000d2  f64f71ff          MOV      r1,#0xffff
0000d6  1a08              SUBS     r0,r1,r0
0000d8  4944              LDR      r1,|L2.492|
0000da  8849              LDRH     r1,[r1,#2]  ; Drop
0000dc  4408              ADD      r0,r0,r1
0000de  4944              LDR      r1,|L2.496|
0000e0  8048              STRH     r0,[r1,#2]
                  |L2.226|
0000e2  e006              B        |L2.242|
                  |L2.228|
;;;123    					else 	               RC_Pwm_In[1] = Drop[1] - Rise[1];
0000e4  4841              LDR      r0,|L2.492|
0000e6  8840              LDRH     r0,[r0,#2]  ; Drop
0000e8  493f              LDR      r1,|L2.488|
0000ea  8849              LDRH     r1,[r1,#2]  ; Rise
0000ec  1a40              SUBS     r0,r0,r1
0000ee  4940              LDR      r1,|L2.496|
0000f0  8048              STRH     r0,[r1,#2]
                  |L2.242|
;;;124          }			
;;;125    		}	
;;;126    		
;;;127        if (TIM_GetITStatus(TIM2, TIM_IT_CC3) != RESET)            //捕获1发生捕获事件
0000f2  2108              MOVS     r1,#8
0000f4  06c8              LSLS     r0,r1,#27
0000f6  f7fffffe          BL       TIM_GetITStatus
0000fa  b370              CBZ      r0,|L2.346|
;;;128    		{	
;;;129    			TIM_ClearITPendingBit(TIM2, TIM_IT_CC3); //清除中断标志位
0000fc  2108              MOVS     r1,#8
0000fe  06c8              LSLS     r0,r1,#27
000100  f7fffffe          BL       TIM_ClearITPendingBit
;;;130    			if(GPIO_ReadInputDataBit(GPIO_TIM4,TIM4_CH3) == 1) 
000104  2104              MOVS     r1,#4
000106  4837              LDR      r0,|L2.484|
000108  f7fffffe          BL       GPIO_ReadInputDataBit
00010c  2801              CMP      r0,#1
00010e  d10a              BNE      |L2.294|
;;;131    			{
;;;132    				  TIM_OC3PolarityConfig(TIM2,TIM_ICPolarity_Falling);		//CC1P=1 设置为下降沿捕获
000110  2102              MOVS     r1,#2
000112  0780              LSLS     r0,r0,#30
000114  f7fffffe          BL       TIM_OC3PolarityConfig
;;;133              Rise[2]=TIM_GetCapture3(TIM2);
000118  f04f4080          MOV      r0,#0x40000000
00011c  f7fffffe          BL       TIM_GetCapture3
000120  4931              LDR      r1,|L2.488|
000122  8088              STRH     r0,[r1,#4]
000124  e021              B        |L2.362|
                  |L2.294|
;;;134          }
;;;135    			else 
;;;136    			{
;;;137    				  TIM_OC3PolarityConfig(TIM2,TIM_ICPolarity_Rising); //CC1P=0 设置为上升沿捕获
000126  2100              MOVS     r1,#0
000128  f04f4080          MOV      r0,#0x40000000
00012c  f7fffffe          BL       TIM_OC3PolarityConfig
;;;138              Drop[2]=TIM_GetCapture3(TIM2);
000130  f04f4080          MOV      r0,#0x40000000
000134  f7fffffe          BL       TIM_GetCapture3
000138  492c              LDR      r1,|L2.492|
00013a  8088              STRH     r0,[r1,#4]
;;;139    				  if(Rise[2]>Drop[2]) RC_Pwm_In[2] = 65535-Rise[2] + Drop[2];
00013c  482a              LDR      r0,|L2.488|
00013e  8880              LDRH     r0,[r0,#4]  ; Rise
000140  8889              LDRH     r1,[r1,#4]  ; Drop
000142  4288              CMP      r0,r1
000144  dd0a              BLE      |L2.348|
000146  4828              LDR      r0,|L2.488|
000148  8880              LDRH     r0,[r0,#4]  ; Rise
00014a  f64f71ff          MOV      r1,#0xffff
00014e  1a08              SUBS     r0,r1,r0
000150  4926              LDR      r1,|L2.492|
000152  8889              LDRH     r1,[r1,#4]  ; Drop
000154  4408              ADD      r0,r0,r1
000156  4926              LDR      r1,|L2.496|
000158  8088              STRH     r0,[r1,#4]
                  |L2.346|
00015a  e006              B        |L2.362|
                  |L2.348|
;;;140    					else 	              RC_Pwm_In[2] = Drop[2] - Rise[2];
00015c  4823              LDR      r0,|L2.492|
00015e  8880              LDRH     r0,[r0,#4]  ; Drop
000160  4921              LDR      r1,|L2.488|
000162  8889              LDRH     r1,[r1,#4]  ; Rise
000164  1a40              SUBS     r0,r0,r1
000166  4922              LDR      r1,|L2.496|
000168  8088              STRH     r0,[r1,#4]
                  |L2.362|
;;;141          }	 
;;;142    		}	
;;;143    
;;;144        if (TIM_GetITStatus(TIM2, TIM_IT_CC4) != RESET)            //捕获1发生捕获事件
00016a  2110              MOVS     r1,#0x10
00016c  0688              LSLS     r0,r1,#26
00016e  f7fffffe          BL       TIM_GetITStatus
000172  b370              CBZ      r0,|L2.466|
;;;145    		{	
;;;146    			TIM_ClearITPendingBit(TIM2, TIM_IT_CC4); //清除中断标志位
000174  2110              MOVS     r1,#0x10
000176  0688              LSLS     r0,r1,#26
000178  f7fffffe          BL       TIM_ClearITPendingBit
;;;147    		  if(GPIO_ReadInputDataBit(GPIO_TIM4,TIM4_CH4) == 1) 
00017c  2108              MOVS     r1,#8
00017e  4819              LDR      r0,|L2.484|
000180  f7fffffe          BL       GPIO_ReadInputDataBit
000184  2801              CMP      r0,#1
000186  d10a              BNE      |L2.414|
;;;148    			{
;;;149    				  TIM_OC4PolarityConfig(TIM2,TIM_ICPolarity_Falling);		//CC1P=1 设置为下降沿捕获
000188  2102              MOVS     r1,#2
00018a  0780              LSLS     r0,r0,#30
00018c  f7fffffe          BL       TIM_OC4PolarityConfig
;;;150              Rise[3]=TIM_GetCapture4(TIM2);
000190  f04f4080          MOV      r0,#0x40000000
000194  f7fffffe          BL       TIM_GetCapture4
000198  4913              LDR      r1,|L2.488|
00019a  80c8              STRH     r0,[r1,#6]
00019c  e021              B        |L2.482|
                  |L2.414|
;;;151          }
;;;152    			else 
;;;153    			{
;;;154    				  TIM_OC4PolarityConfig(TIM2,TIM_ICPolarity_Rising); //CC1P=0 设置为上升沿捕获
00019e  2100              MOVS     r1,#0
0001a0  f04f4080          MOV      r0,#0x40000000
0001a4  f7fffffe          BL       TIM_OC4PolarityConfig
;;;155              Drop[3]=TIM_GetCapture4(TIM2);
0001a8  f04f4080          MOV      r0,#0x40000000
0001ac  f7fffffe          BL       TIM_GetCapture4
0001b0  490e              LDR      r1,|L2.492|
0001b2  80c8              STRH     r0,[r1,#6]
;;;156    				  if(Rise[3]>Drop[3])  RC_Pwm_In[3] = 65535-Rise[3] + Drop[3];
0001b4  480c              LDR      r0,|L2.488|
0001b6  88c0              LDRH     r0,[r0,#6]  ; Rise
0001b8  88c9              LDRH     r1,[r1,#6]  ; Drop
0001ba  4288              CMP      r0,r1
0001bc  dd0a              BLE      |L2.468|
0001be  480a              LDR      r0,|L2.488|
0001c0  88c0              LDRH     r0,[r0,#6]  ; Rise
0001c2  f64f71ff          MOV      r1,#0xffff
0001c6  1a08              SUBS     r0,r1,r0
0001c8  4908              LDR      r1,|L2.492|
0001ca  88c9              LDRH     r1,[r1,#6]  ; Drop
0001cc  4408              ADD      r0,r0,r1
0001ce  4908              LDR      r1,|L2.496|
0001d0  80c8              STRH     r0,[r1,#6]
                  |L2.466|
0001d2  e006              B        |L2.482|
                  |L2.468|
;;;157    					else 	               RC_Pwm_In[3] = Drop[3] - Rise[3];
0001d4  4805              LDR      r0,|L2.492|
0001d6  88c0              LDRH     r0,[r0,#6]  ; Drop
0001d8  4903              LDR      r1,|L2.488|
0001da  88c9              LDRH     r1,[r1,#6]  ; Rise
0001dc  1a40              SUBS     r0,r0,r1
0001de  4904              LDR      r1,|L2.496|
0001e0  80c8              STRH     r0,[r1,#6]
                  |L2.482|
;;;158          }	  
;;;159    		}		
;;;160    }
0001e2  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  |L2.484|
                          DCD      0x40010800
                  |L2.488|
                          DCD      Rise
                  |L2.492|
                          DCD      Drop
                  |L2.496|
                          DCD      RC_Pwm_In

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  RC_Pwm_In
                          %        16
                  RC_Pwm_In_his
                          %        16

                          AREA ||.data||, DATA, ALIGN=1

                  Rise
                          %        8
                  Drop
                          %        8
