; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\multirotor_control.o --depend=.\Flash\Obj\multirotor_control.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I"D:\KEIL MDK\ARM\INC" -I"D:\KEIL MDK\ARM\INC\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\multirotor_control.crf ..\..\User\Function\MultiRotor_control\MultiRotor_control.c]
                          THUMB

                          AREA ||i.Attitude_RatePID||, CODE, READONLY, ALIGN=2

                  Attitude_RatePID PROC
;;;125    /*====================================================================================================*/
;;;126    void Attitude_RatePID(void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;127    {
;;;128       //********************内环(角速度环)PD*********************************//
;;;129    	ctrl.roll.core.kp_out = ctrl.roll.core.kp * (ctrl.roll.shell.pid_out - sensor.gyro.radian.x * RtA);
000004  496a              LDR      r1,|L1.432|
000006  6bc8              LDR      r0,[r1,#0x3c]
000008  f7fffffe          BL       __aeabi_f2d
00000c  4680              MOV      r8,r0
00000e  4a69              LDR      r2,|L1.436|
000010  4b69              LDR      r3,|L1.440|
000012  f7fffffe          BL       __aeabi_dmul
000016  4606              MOV      r6,r0
000018  460f              MOV      r7,r1
00001a  4968              LDR      r1,|L1.444|
00001c  6ec8              LDR      r0,[r1,#0x6c]
00001e  f7fffffe          BL       __aeabi_f2d
000022  4632              MOV      r2,r6
000024  463b              MOV      r3,r7
000026  e9cd0100          STRD     r0,r1,[sp,#0]
00002a  f7fffffe          BL       __aeabi_dsub
00002e  4682              MOV      r10,r0
000030  468b              MOV      r11,r1
000032  4962              LDR      r1,|L1.444|
000034  6f08              LDR      r0,[r1,#0x70]
000036  f7fffffe          BL       __aeabi_f2d
00003a  4652              MOV      r2,r10
00003c  465b              MOV      r3,r11
00003e  e9cd0102          STRD     r0,r1,[sp,#8]
000042  f7fffffe          BL       __aeabi_dmul
000046  4604              MOV      r4,r0
000048  f7fffffe          BL       __aeabi_d2f
00004c  4601              MOV      r1,r0
00004e  485b              LDR      r0,|L1.444|
000050  f8c01084          STR      r1,[r0,#0x84]
;;;130    	ctrl.roll.core.kd_out = ctrl.roll.core.kd * (sensor.gyro.histor.x - sensor.gyro.origin.x);
000054  4956              LDR      r1,|L1.432|
000056  f9b11030          LDRSH    r1,[r1,#0x30]
00005a  4a55              LDR      r2,|L1.432|
00005c  f9b22024          LDRSH    r2,[r2,#0x24]  ; sensor
000060  1a88              SUBS     r0,r1,r2
000062  f7fffffe          BL       __aeabi_i2f
000066  4604              MOV      r4,r0
000068  4854              LDR      r0,|L1.444|
00006a  6f81              LDR      r1,[r0,#0x78]
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       __aeabi_fmul
000072  4601              MOV      r1,r0
000074  4851              LDR      r0,|L1.444|
000076  f8c0108c          STR      r1,[r0,#0x8c]
;;;131    	
;;;132    	ctrl.pitch.core.kp_out = ctrl.pitch.core.kp * (ctrl.pitch.shell.pid_out - sensor.gyro.radian.y * RtA);
00007a  494d              LDR      r1,|L1.432|
00007c  6c08              LDR      r0,[r1,#0x40]
00007e  f7fffffe          BL       __aeabi_f2d
000082  4680              MOV      r8,r0
000084  4a4b              LDR      r2,|L1.436|
000086  4b4c              LDR      r3,|L1.440|
000088  f7fffffe          BL       __aeabi_dmul
00008c  e9cd0102          STRD     r0,r1,[sp,#8]
000090  494a              LDR      r1,|L1.444|
000092  6a48              LDR      r0,[r1,#0x24]
000094  f7fffffe          BL       __aeabi_f2d
000098  e9cd0100          STRD     r0,r1,[sp,#0]
00009c  e9dd2302          LDRD     r2,r3,[sp,#8]
0000a0  f7fffffe          BL       __aeabi_dsub
0000a4  4604              MOV      r4,r0
0000a6  460d              MOV      r5,r1
0000a8  4944              LDR      r1,|L1.444|
0000aa  6a88              LDR      r0,[r1,#0x28]
0000ac  f7fffffe          BL       __aeabi_f2d
0000b0  4606              MOV      r6,r0
0000b2  4622              MOV      r2,r4
0000b4  462b              MOV      r3,r5
0000b6  f7fffffe          BL       __aeabi_dmul
0000ba  4682              MOV      r10,r0
0000bc  f7fffffe          BL       __aeabi_d2f
0000c0  4601              MOV      r1,r0
0000c2  483e              LDR      r0,|L1.444|
0000c4  63c1              STR      r1,[r0,#0x3c]
;;;133    	ctrl.pitch.core.kd_out = ctrl.pitch.core.kd * (sensor.gyro.histor.y - sensor.gyro.origin.y);
0000c6  493a              LDR      r1,|L1.432|
0000c8  f9b12032          LDRSH    r2,[r1,#0x32]
0000cc  f9b11026          LDRSH    r1,[r1,#0x26]
0000d0  1a50              SUBS     r0,r2,r1
0000d2  f7fffffe          BL       __aeabi_i2f
0000d6  4604              MOV      r4,r0
0000d8  4838              LDR      r0,|L1.444|
0000da  6b01              LDR      r1,[r0,#0x30]
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       __aeabi_fmul
0000e2  4601              MOV      r1,r0
0000e4  4835              LDR      r0,|L1.444|
0000e6  6441              STR      r1,[r0,#0x44]
;;;134    	
;;;135    	ctrl.yaw.core.kp_out = ctrl.yaw.core.kp * (ctrl.yaw.shell.pid_out - sensor.gyro.radian.z * RtA);
0000e8  4931              LDR      r1,|L1.432|
0000ea  6c48              LDR      r0,[r1,#0x44]
0000ec  f7fffffe          BL       __aeabi_f2d
0000f0  4606              MOV      r6,r0
0000f2  4a30              LDR      r2,|L1.436|
0000f4  4b30              LDR      r3,|L1.440|
0000f6  f7fffffe          BL       __aeabi_dmul
0000fa  4680              MOV      r8,r0
0000fc  4689              MOV      r9,r1
0000fe  492f              LDR      r1,|L1.444|
000100  f8d100b4          LDR      r0,[r1,#0xb4]
000104  f7fffffe          BL       __aeabi_f2d
000108  4682              MOV      r10,r0
00010a  4642              MOV      r2,r8
00010c  464b              MOV      r3,r9
00010e  f7fffffe          BL       __aeabi_dsub
000112  e9cd0100          STRD     r0,r1,[sp,#0]
000116  4929              LDR      r1,|L1.444|
000118  f8d100b8          LDR      r0,[r1,#0xb8]
00011c  f7fffffe          BL       __aeabi_f2d
000120  4604              MOV      r4,r0
000122  e9dd2300          LDRD     r2,r3,[sp,#0]
000126  f7fffffe          BL       __aeabi_dmul
00012a  e9cd0102          STRD     r0,r1,[sp,#8]
00012e  f7fffffe          BL       __aeabi_d2f
000132  4601              MOV      r1,r0
000134  4821              LDR      r0,|L1.444|
000136  f8c010cc          STR      r1,[r0,#0xcc]
;;;136    	ctrl.yaw.core.kd_out = ctrl.yaw.core.kd * (sensor.gyro.histor.z - sensor.gyro.origin.z);
00013a  491d              LDR      r1,|L1.432|
00013c  f9b12034          LDRSH    r2,[r1,#0x34]
000140  f9b11028          LDRSH    r1,[r1,#0x28]
000144  1a50              SUBS     r0,r2,r1
000146  f7fffffe          BL       __aeabi_i2f
00014a  4604              MOV      r4,r0
00014c  481b              LDR      r0,|L1.444|
00014e  f8d010c0          LDR      r1,[r0,#0xc0]
000152  4620              MOV      r0,r4
000154  f7fffffe          BL       __aeabi_fmul
000158  4601              MOV      r1,r0
00015a  4818              LDR      r0,|L1.444|
00015c  f8c010d4          STR      r1,[r0,#0xd4]
;;;137    	
;;;138    	ctrl.roll.core.pid_out  = ctrl.roll.core.kp_out  + ctrl.roll.core.kd_out;
000160  4602              MOV      r2,r0
000162  f8d2108c          LDR      r1,[r2,#0x8c]
000166  f8d20084          LDR      r0,[r2,#0x84]
00016a  f7fffffe          BL       __aeabi_fadd
00016e  4601              MOV      r1,r0
000170  4812              LDR      r0,|L1.444|
000172  f8c01090          STR      r1,[r0,#0x90]
;;;139    	ctrl.pitch.core.pid_out = ctrl.pitch.core.kp_out + ctrl.pitch.core.kd_out;
000176  4602              MOV      r2,r0
000178  6c51              LDR      r1,[r2,#0x44]
00017a  6bd0              LDR      r0,[r2,#0x3c]
00017c  f7fffffe          BL       __aeabi_fadd
000180  4601              MOV      r1,r0
000182  480e              LDR      r0,|L1.444|
000184  6481              STR      r1,[r0,#0x48]
;;;140    	ctrl.yaw.core.pid_out   = ctrl.yaw.core.kp_out   + ctrl.yaw.core.kd_out;
000186  4602              MOV      r2,r0
000188  f8d210d4          LDR      r1,[r2,#0xd4]
00018c  f8d200cc          LDR      r0,[r2,#0xcc]
000190  f7fffffe          BL       __aeabi_fadd
000194  4601              MOV      r1,r0
000196  4809              LDR      r0,|L1.444|
000198  f8c010d8          STR      r1,[r0,#0xd8]
;;;141    
;;;142    	//储存历史值
;;;143    	sensor.gyro.histor.x = sensor.gyro.origin.x;   
00019c  4804              LDR      r0,|L1.432|
00019e  8c81              LDRH     r1,[r0,#0x24]  ; sensor
0001a0  8601              STRH     r1,[r0,#0x30]
;;;144    	sensor.gyro.histor.y = sensor.gyro.origin.y;
0001a2  8cc1              LDRH     r1,[r0,#0x26]
0001a4  8641              STRH     r1,[r0,#0x32]
;;;145      sensor.gyro.histor.z = sensor.gyro.origin.z;
0001a6  8d01              LDRH     r1,[r0,#0x28]
0001a8  8681              STRH     r1,[r0,#0x34]
;;;146    }
0001aa  e8bd9fff          POP      {r0-r12,pc}
;;;147    /*====================================================================================================*/
                          ENDP

0001ae  0000              DCW      0x0000
                  |L1.432|
                          DCD      sensor
                  |L1.436|
                          DCD      0x63cfb331
                  |L1.440|
                          DCD      0x404ca994
                  |L1.444|
                          DCD      ctrl

                          AREA ||i.CONTROL||, CODE, READONLY, ALIGN=2

                  CONTROL PROC
;;;69     /***************************************************/
;;;70     void CONTROL(struct _target Goal)   
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;71     {
;;;72     	static float roll_old,pitch_old,yaw_old;
;;;73     	float  deviation_pitch,deviation_roll,deviation_yaw;
;;;74     	
;;;75     	if(ctrl.ctrlRate >= 2)
000004  4880              LDR      r0,|L2.520|
000006  7800              LDRB     r0,[r0,#0]  ; ctrl
000008  2802              CMP      r0,#2
00000a  db7e              BLT      |L2.266|
;;;76     	{
;;;77     		//*****************外环(角度环)PID**************************//
;;;78     		//横滚计算///////////////
;;;79     	  deviation_pitch = Goal.Pitch - AngE.Pitch;
00000c  4a7f              LDR      r2,|L2.524|
00000e  6811              LDR      r1,[r2,#0]  ; AngE
000010  9800              LDR      r0,[sp,#0]
000012  f7fffffe          BL       __aeabi_fsub
000016  4605              MOV      r5,r0
;;;80     		ctrl.pitch.shell.increment += deviation_pitch;
000018  497b              LDR      r1,|L2.520|
00001a  6908              LDR      r0,[r1,#0x10]
00001c  4629              MOV      r1,r5
00001e  f7fffffe          BL       __aeabi_fadd
000022  4979              LDR      r1,|L2.520|
000024  6108              STR      r0,[r1,#0x10]
;;;81     		
;;;82     		//limit for the max increment
;;;83     		if(ctrl.pitch.shell.increment > ctrl.pitch.shell.increment_max)  	ctrl.pitch.shell.increment = ctrl.pitch.shell.increment_max;
000026  460a              MOV      r2,r1
000028  6951              LDR      r1,[r2,#0x14]
00002a  6910              LDR      r0,[r2,#0x10]
00002c  f7fffffe          BL       __aeabi_cfrcmple
000030  d203              BCS      |L2.58|
000032  4875              LDR      r0,|L2.520|
000034  6941              LDR      r1,[r0,#0x14]
000036  6101              STR      r1,[r0,#0x10]
000038  e00f              B        |L2.90|
                  |L2.58|
;;;84     		else if(ctrl.pitch.shell.increment < -ctrl.pitch.shell.increment_max)		ctrl.pitch.shell.increment = -ctrl.pitch.shell.increment_max;
00003a  4873              LDR      r0,|L2.520|
00003c  6940              LDR      r0,[r0,#0x14]
00003e  f0804700          EOR      r7,r0,#0x80000000
000042  4871              LDR      r0,|L2.520|
000044  6901              LDR      r1,[r0,#0x10]
000046  4638              MOV      r0,r7
000048  f7fffffe          BL       __aeabi_cfrcmple
00004c  d205              BCS      |L2.90|
00004e  486e              LDR      r0,|L2.520|
000050  6940              LDR      r0,[r0,#0x14]
000052  f0804100          EOR      r1,r0,#0x80000000
000056  486c              LDR      r0,|L2.520|
000058  6101              STR      r1,[r0,#0x10]
                  |L2.90|
;;;85     		
;;;86     		ctrl.pitch.shell.pid_out = ctrl.pitch.shell.kp * deviation_pitch + ctrl.pitch.shell.ki * ctrl.pitch.shell.increment + ctrl.pitch.shell.kd * (deviation_pitch - pitch_old);
00005a  486d              LDR      r0,|L2.528|
00005c  6801              LDR      r1,[r0,#0]  ; pitch_old
00005e  4628              MOV      r0,r5
000060  f7fffffe          BL       __aeabi_fsub
000064  4681              MOV      r9,r0
000066  4868              LDR      r0,|L2.520|
000068  68c1              LDR      r1,[r0,#0xc]
00006a  4648              MOV      r0,r9
00006c  f7fffffe          BL       __aeabi_fmul
000070  4607              MOV      r7,r0
000072  4a65              LDR      r2,|L2.520|
000074  6911              LDR      r1,[r2,#0x10]
000076  6890              LDR      r0,[r2,#8]
000078  f7fffffe          BL       __aeabi_fmul
00007c  4681              MOV      r9,r0
00007e  4962              LDR      r1,|L2.520|
000080  6848              LDR      r0,[r1,#4]  ; ctrl
000082  4629              MOV      r1,r5
000084  f7fffffe          BL       __aeabi_fmul
000088  4682              MOV      r10,r0
00008a  4649              MOV      r1,r9
00008c  f7fffffe          BL       __aeabi_fadd
000090  4680              MOV      r8,r0
000092  4639              MOV      r1,r7
000094  f7fffffe          BL       __aeabi_fadd
000098  495b              LDR      r1,|L2.520|
00009a  6248              STR      r0,[r1,#0x24]
;;;87     		pitch_old = deviation_pitch;
00009c  485c              LDR      r0,|L2.528|
00009e  6005              STR      r5,[r0,#0]  ; pitch_old
;;;88     		
;;;89     		//俯仰计算//////////////
;;;90     		deviation_roll = Goal.Roll - AngE.Roll;
0000a0  4a5a              LDR      r2,|L2.524|
0000a2  6851              LDR      r1,[r2,#4]  ; AngE
0000a4  9801              LDR      r0,[sp,#4]
0000a6  f7fffffe          BL       __aeabi_fsub
0000aa  4606              MOV      r6,r0
;;;91     		ctrl.roll.shell.increment += deviation_roll;
0000ac  4956              LDR      r1,|L2.520|
0000ae  6d88              LDR      r0,[r1,#0x58]
0000b0  4631              MOV      r1,r6
0000b2  f7fffffe          BL       __aeabi_fadd
0000b6  4954              LDR      r1,|L2.520|
0000b8  6588              STR      r0,[r1,#0x58]
;;;92     		
;;;93     		//limit for the max increment
;;;94     		if(ctrl.roll.shell.increment > ctrl.roll.shell.increment_max)  	ctrl.roll.shell.increment = ctrl.roll.shell.increment_max;
0000ba  460a              MOV      r2,r1
0000bc  6dd1              LDR      r1,[r2,#0x5c]
0000be  6d90              LDR      r0,[r2,#0x58]
0000c0  f7fffffe          BL       __aeabi_cfrcmple
0000c4  d203              BCS      |L2.206|
0000c6  4850              LDR      r0,|L2.520|
0000c8  6dc1              LDR      r1,[r0,#0x5c]
0000ca  6581              STR      r1,[r0,#0x58]
0000cc  e00f              B        |L2.238|
                  |L2.206|
;;;95     		else if(ctrl.roll.shell.increment < -ctrl.roll.shell.increment_max)		ctrl.roll.shell.increment = -ctrl.roll.shell.increment_max;
0000ce  484e              LDR      r0,|L2.520|
0000d0  6dc0              LDR      r0,[r0,#0x5c]
0000d2  f0804700          EOR      r7,r0,#0x80000000
0000d6  484c              LDR      r0,|L2.520|
0000d8  6d81              LDR      r1,[r0,#0x58]
0000da  4638              MOV      r0,r7
0000dc  f7fffffe          BL       __aeabi_cfrcmple
0000e0  d205              BCS      |L2.238|
0000e2  4849              LDR      r0,|L2.520|
0000e4  6dc0              LDR      r0,[r0,#0x5c]
0000e6  f0804100          EOR      r1,r0,#0x80000000
0000ea  4847              LDR      r0,|L2.520|
0000ec  6581              STR      r1,[r0,#0x58]
                  |L2.238|
;;;96     
;;;97     		ctrl.roll.shell.pid_out  = ctrl.roll.shell.kp * deviation_roll + ctrl.roll.shell.ki * ctrl.roll.shell.increment + ctrl.roll.shell.kd * (deviation_roll - roll_old);
0000ee  4849              LDR      r0,|L2.532|
0000f0  6801              LDR      r1,[r0,#0]  ; roll_old
0000f2  4630              MOV      r0,r6
0000f4  f7fffffe          BL       __aeabi_fsub
0000f8  4681              MOV      r9,r0
0000fa  4843              LDR      r0,|L2.520|
0000fc  6d41              LDR      r1,[r0,#0x54]
0000fe  4648              MOV      r0,r9
000100  f7fffffe          BL       __aeabi_fmul
000104  4607              MOV      r7,r0
000106  4a40              LDR      r2,|L2.520|
000108  e000              B        |L2.268|
                  |L2.266|
00010a  e071              B        |L2.496|
                  |L2.268|
00010c  6d91              LDR      r1,[r2,#0x58]
00010e  6d10              LDR      r0,[r2,#0x50]
000110  f7fffffe          BL       __aeabi_fmul
000114  4681              MOV      r9,r0
000116  493c              LDR      r1,|L2.520|
000118  6cc8              LDR      r0,[r1,#0x4c]  ; ctrl
00011a  4631              MOV      r1,r6
00011c  f7fffffe          BL       __aeabi_fmul
000120  4682              MOV      r10,r0
000122  4649              MOV      r1,r9
000124  f7fffffe          BL       __aeabi_fadd
000128  4680              MOV      r8,r0
00012a  4639              MOV      r1,r7
00012c  f7fffffe          BL       __aeabi_fadd
000130  4935              LDR      r1,|L2.520|
000132  66c8              STR      r0,[r1,#0x6c]
;;;98     		roll_old = deviation_roll;
000134  4837              LDR      r0,|L2.532|
000136  6006              STR      r6,[r0,#0]  ; roll_old
;;;99     		
;;;100    		//航向计算////////////
;;;101        if((Goal.Yaw - AngE.Yaw)>180 || (Goal.Yaw - AngE.Yaw)<-180){
000138  4a34              LDR      r2,|L2.524|
00013a  6891              LDR      r1,[r2,#8]  ; AngE
00013c  9802              LDR      r0,[sp,#8]
00013e  f7fffffe          BL       __aeabi_fsub
000142  4607              MOV      r7,r0
000144  4934              LDR      r1,|L2.536|
000146  f7fffffe          BL       __aeabi_cfrcmple
00014a  d309              BCC      |L2.352|
00014c  4a2f              LDR      r2,|L2.524|
00014e  6891              LDR      r1,[r2,#8]  ; AngE
000150  9802              LDR      r0,[sp,#8]
000152  f7fffffe          BL       __aeabi_fsub
000156  4607              MOV      r7,r0
000158  4930              LDR      r1,|L2.540|
00015a  f7fffffe          BL       __aeabi_cfcmple
00015e  d234              BCS      |L2.458|
                  |L2.352|
;;;102           if(Goal.Yaw>0 && AngE.Yaw<0)  deviation_yaw= (-180 - AngE.Yaw) +(Goal.Yaw - 180);
000160  2100              MOVS     r1,#0
000162  9802              LDR      r0,[sp,#8]
000164  f7fffffe          BL       __aeabi_cfrcmple
000168  d214              BCS      |L2.404|
00016a  4928              LDR      r1,|L2.524|
00016c  6888              LDR      r0,[r1,#8]  ; AngE
00016e  2100              MOVS     r1,#0
000170  f7fffffe          BL       __aeabi_cfcmple
000174  d20e              BCS      |L2.404|
000176  4928              LDR      r1,|L2.536|
000178  9802              LDR      r0,[sp,#8]
00017a  f7fffffe          BL       __aeabi_fsub
00017e  4607              MOV      r7,r0
000180  4822              LDR      r0,|L2.524|
000182  6881              LDR      r1,[r0,#8]  ; AngE
000184  4825              LDR      r0,|L2.540|
000186  f7fffffe          BL       __aeabi_fsub
00018a  4680              MOV      r8,r0
00018c  4639              MOV      r1,r7
00018e  f7fffffe          BL       __aeabi_fadd
000192  4604              MOV      r4,r0
                  |L2.404|
;;;103           if(Goal.Yaw<0 && AngE.Yaw>0)  deviation_yaw= (180 - AngE.Yaw) +(Goal.Yaw + 180);
000194  2100              MOVS     r1,#0
000196  9802              LDR      r0,[sp,#8]
000198  f7fffffe          BL       __aeabi_cfcmple
00019c  d21b              BCS      |L2.470|
00019e  491b              LDR      r1,|L2.524|
0001a0  6888              LDR      r0,[r1,#8]  ; AngE
0001a2  2100              MOVS     r1,#0
0001a4  f7fffffe          BL       __aeabi_cfrcmple
0001a8  d215              BCS      |L2.470|
0001aa  491b              LDR      r1,|L2.536|
0001ac  9802              LDR      r0,[sp,#8]
0001ae  f7fffffe          BL       __aeabi_fadd
0001b2  4607              MOV      r7,r0
0001b4  4815              LDR      r0,|L2.524|
0001b6  6881              LDR      r1,[r0,#8]  ; AngE
0001b8  4817              LDR      r0,|L2.536|
0001ba  f7fffffe          BL       __aeabi_fsub
0001be  4680              MOV      r8,r0
0001c0  4639              MOV      r1,r7
0001c2  f7fffffe          BL       __aeabi_fadd
0001c6  4604              MOV      r4,r0
0001c8  e005              B        |L2.470|
                  |L2.458|
;;;104        }
;;;105        else  deviation_yaw = Goal.Yaw - AngE.Yaw;
0001ca  4a10              LDR      r2,|L2.524|
0001cc  6891              LDR      r1,[r2,#8]  ; AngE
0001ce  9802              LDR      r0,[sp,#8]
0001d0  f7fffffe          BL       __aeabi_fsub
0001d4  4604              MOV      r4,r0
                  |L2.470|
;;;106    		
;;;107    	  ctrl.yaw.shell.pid_out = ctrl.yaw.shell.kp * deviation_yaw; + ctrl.yaw.shell.kd * (deviation_yaw - yaw_old);
0001d6  490c              LDR      r1,|L2.520|
0001d8  f8d10094          LDR      r0,[r1,#0x94]  ; ctrl
0001dc  4621              MOV      r1,r4
0001de  f7fffffe          BL       __aeabi_fmul
0001e2  4909              LDR      r1,|L2.520|
0001e4  f8c100b4          STR      r0,[r1,#0xb4]
;;;108    		yaw_old = deviation_yaw;
0001e8  480d              LDR      r0,|L2.544|
0001ea  6004              STR      r4,[r0,#0]  ; yaw_old
;;;109        ctrl.ctrlRate = 0; 
0001ec  2000              MOVS     r0,#0
0001ee  7008              STRB     r0,[r1,#0]
                  |L2.496|
;;;110    	}
;;;111    	ctrl.ctrlRate ++;
0001f0  4805              LDR      r0,|L2.520|
0001f2  7800              LDRB     r0,[r0,#0]  ; ctrl
0001f4  1c40              ADDS     r0,r0,#1
0001f6  4904              LDR      r1,|L2.520|
0001f8  7008              STRB     r0,[r1,#0]
;;;112      Attitude_RatePID();
0001fa  f7fffffe          BL       Attitude_RatePID
;;;113    	
;;;114    	Motor_Conter();
0001fe  f7fffffe          BL       Motor_Conter
;;;115    }
000202  e8bd87ff          POP      {r0-r10,pc}
;;;116    
                          ENDP

000206  0000              DCW      0x0000
                  |L2.520|
                          DCD      ctrl
                  |L2.524|
                          DCD      AngE
                  |L2.528|
                          DCD      pitch_old
                  |L2.532|
                          DCD      roll_old
                  |L2.536|
                          DCD      0x43340000
                  |L2.540|
                          DCD      0xc3340000
                  |L2.544|
                          DCD      yaw_old

                          AREA ||i.Calculate_Target||, CODE, READONLY, ALIGN=2

                  Calculate_Target PROC
;;;31     /*====================================================================================================*/
;;;32     void Calculate_Target(void) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;33     {
;;;34     	int16_t ftemp=0;
000004  2400              MOVS     r4,#0
;;;35     	
;;;36     	Target.Pitch = (1500-RC_Data.PITCH)/(20 + 7*RC_Data.SENSITIVITY);
000006  4840              LDR      r0,|L3.264|
000008  f9b0000a          LDRSH    r0,[r0,#0xa]  ; RC_Data
00000c  f24051dc          MOV      r1,#0x5dc
000010  1a09              SUBS     r1,r1,r0
000012  483d              LDR      r0,|L3.264|
000014  f9b00010          LDRSH    r0,[r0,#0x10]  ; RC_Data
000018  ebc000c0          RSB      r0,r0,r0,LSL #3
00001c  3014              ADDS     r0,r0,#0x14
00001e  fb91f5f0          SDIV     r5,r1,r0
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       __aeabi_i2f
000028  4938              LDR      r1,|L3.268|
00002a  6008              STR      r0,[r1,#0]  ; Target
;;;37     	Target.Roll = (RC_Data.ROLL-1500)/(20 + 7*RC_Data.SENSITIVITY);
00002c  4836              LDR      r0,|L3.264|
00002e  f9b00008          LDRSH    r0,[r0,#8]  ; RC_Data
000032  f2a050dc          SUB      r0,r0,#0x5dc
000036  4934              LDR      r1,|L3.264|
000038  f9b11010          LDRSH    r1,[r1,#0x10]  ; RC_Data
00003c  ebc101c1          RSB      r1,r1,r1,LSL #3
000040  3114              ADDS     r1,r1,#0x14
000042  fb90f5f1          SDIV     r5,r0,r1
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       __aeabi_i2f
00004c  492f              LDR      r1,|L3.268|
00004e  6048              STR      r0,[r1,#4]  ; Target
;;;38     
;;;39       //目标航向控制。当油门大于最小检查值时，认为用户希望起飞。那么此时的航向做为目标航向
;;;40        if(RC_Data.THROTTLE > RC_MINCHECK ) {
000050  482d              LDR      r0,|L3.264|
000052  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
000056  f5b06f96          CMP      r0,#0x4b0
00005a  dd0b              BLE      |L3.116|
;;;41           if(flag.LockYaw != 1){  
00005c  482c              LDR      r0,|L3.272|
00005e  7940              LDRB     r0,[r0,#5]  ; flag
000060  2801              CMP      r0,#1
000062  d00e              BEQ      |L3.130|
;;;42     				 flag.LockYaw = 1;
000064  2001              MOVS     r0,#1
000066  492a              LDR      r1,|L3.272|
000068  7148              STRB     r0,[r1,#5]
;;;43     	       Target.Yaw = AngE.Yaw; //将当前的航向做为目标航向
00006a  482a              LDR      r0,|L3.276|
00006c  6880              LDR      r0,[r0,#8]  ; AngE
00006e  4927              LDR      r1,|L3.268|
000070  6088              STR      r0,[r1,#8]  ; Target
000072  e006              B        |L3.130|
                  |L3.116|
;;;44           }
;;;45        }
;;;46        else {
;;;47     		 flag.LockYaw = 0;	
000074  2000              MOVS     r0,#0
000076  4926              LDR      r1,|L3.272|
000078  7148              STRB     r0,[r1,#5]
;;;48     		 Target.Yaw = AngE.Yaw;
00007a  4826              LDR      r0,|L3.276|
00007c  6880              LDR      r0,[r0,#8]  ; AngE
00007e  4923              LDR      r1,|L3.268|
000080  6088              STR      r0,[r1,#8]  ; Target
                  |L3.130|
;;;49     	 } 
;;;50     	//航向在中点设置一个死区
;;;51     	if((RC_Data.YAW > 1700)||(RC_Data.YAW < 1300)){
000082  4821              LDR      r0,|L3.264|
000084  f9b0000e          LDRSH    r0,[r0,#0xe]  ; RC_Data
000088  f24061a4          MOV      r1,#0x6a4
00008c  4288              CMP      r0,r1
00008e  dc06              BGT      |L3.158|
000090  481d              LDR      r0,|L3.264|
000092  f9b0000e          LDRSH    r0,[r0,#0xe]  ; RC_Data
000096  f2405114          MOV      r1,#0x514
00009a  4288              CMP      r0,r1
00009c  da32              BGE      |L3.260|
                  |L3.158|
;;;52     		ftemp = 1500 - RC_Data.YAW; 
00009e  481a              LDR      r0,|L3.264|
0000a0  89c0              LDRH     r0,[r0,#0xe]  ; RC_Data
0000a2  f24051dc          MOV      r1,#0x5dc
0000a6  1a08              SUBS     r0,r1,r0
0000a8  b204              SXTH     r4,r0
;;;53     	  Target.Yaw += (ftemp / 200.0f)*0.05f; 
0000aa  4620              MOV      r0,r4
0000ac  f7fffffe          BL       __aeabi_i2f
0000b0  4607              MOV      r7,r0
0000b2  4919              LDR      r1,|L3.280|
0000b4  f7fffffe          BL       __aeabi_fdiv
0000b8  4606              MOV      r6,r0
0000ba  4918              LDR      r1,|L3.284|
0000bc  f7fffffe          BL       __aeabi_fmul
0000c0  4605              MOV      r5,r0
0000c2  4812              LDR      r0,|L3.268|
0000c4  6881              LDR      r1,[r0,#8]  ; Target
0000c6  4628              MOV      r0,r5
0000c8  f7fffffe          BL       __aeabi_fadd
0000cc  490f              LDR      r1,|L3.268|
0000ce  6088              STR      r0,[r1,#8]  ; Target
;;;54     		
;;;55     		//转[-180.0,+180.0]
;;;56     	  if(Target.Yaw >180.0f) Target.Yaw -= 360.0f;	
0000d0  6888              LDR      r0,[r1,#8]  ; Target
0000d2  4913              LDR      r1,|L3.288|
0000d4  f7fffffe          BL       __aeabi_cfrcmple
0000d8  d207              BCS      |L3.234|
0000da  490c              LDR      r1,|L3.268|
0000dc  6888              LDR      r0,[r1,#8]  ; Target
0000de  4911              LDR      r1,|L3.292|
0000e0  f7fffffe          BL       __aeabi_fsub
0000e4  4909              LDR      r1,|L3.268|
0000e6  6088              STR      r0,[r1,#8]  ; Target
0000e8  e00c              B        |L3.260|
                  |L3.234|
;;;57     	  else if(Target.Yaw <-180.0f)Target.Yaw += 360.0f;
0000ea  4908              LDR      r1,|L3.268|
0000ec  6888              LDR      r0,[r1,#8]  ; Target
0000ee  490e              LDR      r1,|L3.296|
0000f0  f7fffffe          BL       __aeabi_cfcmple
0000f4  d206              BCS      |L3.260|
0000f6  4905              LDR      r1,|L3.268|
0000f8  6888              LDR      r0,[r1,#8]  ; Target
0000fa  490a              LDR      r1,|L3.292|
0000fc  f7fffffe          BL       __aeabi_fadd
000100  4902              LDR      r1,|L3.268|
000102  6088              STR      r0,[r1,#8]  ; Target
                  |L3.260|
;;;58     	}
;;;59     }
000104  e8bd81f0          POP      {r4-r8,pc}
;;;60     
                          ENDP

                  |L3.264|
                          DCD      RC_Data
                  |L3.268|
                          DCD      Target
                  |L3.272|
                          DCD      flag
                  |L3.276|
                          DCD      AngE
                  |L3.280|
                          DCD      0x43480000
                  |L3.284|
                          DCD      0x3d4ccccd
                  |L3.288|
                          DCD      0x43340000
                  |L3.292|
                          DCD      0x43b40000
                  |L3.296|
                          DCD      0xc3340000

                          AREA ||i.Motor_Conter||, CODE, READONLY, ALIGN=2

                  Motor_Conter PROC
;;;155    /*====================================================================================================*/
;;;156    void Motor_Conter(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;157    {
000004  b08b              SUB      sp,sp,#0x2c
;;;158    	s16 pitch,roll,yaw;
;;;159    	
;;;160    	pitch = ctrl.pitch.core.pid_out;
000006  4942              LDR      r1,|L4.272|
000008  6c88              LDR      r0,[r1,#0x48]
00000a  f7fffffe          BL       __aeabi_f2iz
00000e  fa0ff880          SXTH     r8,r0
;;;161      roll  = ctrl.roll.core.pid_out;    
000012  493f              LDR      r1,|L4.272|
000014  f8d10090          LDR      r0,[r1,#0x90]
000018  f7fffffe          BL       __aeabi_f2iz
00001c  fa0ff980          SXTH     r9,r0
;;;162     	yaw   = -ctrl.yaw.core.pid_out;
000020  483b              LDR      r0,|L4.272|
000022  f8d000d8          LDR      r0,[r0,#0xd8]
000026  f0804400          EOR      r4,r0,#0x80000000
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       __aeabi_f2iz
000030  fa0ffa80          SXTH     r10,r0
;;;163    	
;;;164      if(RC_Data.THROTTLE > RC_MINCHECK) {
000034  4837              LDR      r0,|L4.276|
000036  f9b0000c          LDRSH    r0,[r0,#0xc]  ; RC_Data
00003a  f5b06f96          CMP      r0,#0x4b0
00003e  dd51              BLE      |L4.228|
;;;165    		int date_throttle	= (RC_Data.THROTTLE-1000)/cos(angle.roll/RtA)/cos(angle.pitch/RtA);
000040  4935              LDR      r1,|L4.280|
000042  6808              LDR      r0,[r1,#0]  ; angle
000044  f7fffffe          BL       __aeabi_f2d
000048  4606              MOV      r6,r0
00004a  4a34              LDR      r2,|L4.284|
00004c  4b34              LDR      r3,|L4.288|
00004e  f7fffffe          BL       __aeabi_ddiv
000052  4604              MOV      r4,r0
000054  f7fffffe          BL       ||cos||
000058  e9cd0106          STRD     r0,r1,[sp,#0x18]
00005c  492e              LDR      r1,|L4.280|
00005e  6848              LDR      r0,[r1,#4]  ; angle
000060  f7fffffe          BL       __aeabi_f2d
000064  4604              MOV      r4,r0
000066  4a2d              LDR      r2,|L4.284|
000068  4b2d              LDR      r3,|L4.288|
00006a  f7fffffe          BL       __aeabi_ddiv
00006e  e9cd0100          STRD     r0,r1,[sp,#0]
000072  f7fffffe          BL       ||cos||
000076  e9cd0102          STRD     r0,r1,[sp,#8]
00007a  4926              LDR      r1,|L4.276|
00007c  f9b1100c          LDRSH    r1,[r1,#0xc]  ; RC_Data
000080  f5a1707a          SUB      r0,r1,#0x3e8
000084  f7fffffe          BL       __aeabi_i2d
000088  4606              MOV      r6,r0
00008a  e9dd2302          LDRD     r2,r3,[sp,#8]
00008e  f7fffffe          BL       __aeabi_ddiv
000092  e9cd0104          STRD     r0,r1,[sp,#0x10]
000096  e9dd2306          LDRD     r2,r3,[sp,#0x18]
00009a  f7fffffe          BL       __aeabi_ddiv
00009e  e9cd0108          STRD     r0,r1,[sp,#0x20]
0000a2  f7fffffe          BL       __aeabi_d2iz
0000a6  4683              MOV      r11,r0
;;;166    		
;;;167    		Moto_duty[0] = date_throttle - pitch - roll + yaw;
0000a8  ebab0008          SUB      r0,r11,r8
0000ac  eba00009          SUB      r0,r0,r9
0000b0  4450              ADD      r0,r0,r10
0000b2  b200              SXTH     r0,r0
0000b4  491b              LDR      r1,|L4.292|
0000b6  8008              STRH     r0,[r1,#0]
;;;168    	  Moto_duty[1] = date_throttle - pitch + roll - yaw;
0000b8  ebab0008          SUB      r0,r11,r8
0000bc  4448              ADD      r0,r0,r9
0000be  eba0000a          SUB      r0,r0,r10
0000c2  b200              SXTH     r0,r0
0000c4  8048              STRH     r0,[r1,#2]
;;;169    		Moto_duty[2] = date_throttle + pitch + roll + yaw;
0000c6  eb0b0008          ADD      r0,r11,r8
0000ca  4448              ADD      r0,r0,r9
0000cc  4450              ADD      r0,r0,r10
0000ce  b200              SXTH     r0,r0
0000d0  8088              STRH     r0,[r1,#4]
;;;170    	  Moto_duty[3] = date_throttle + pitch - roll - yaw;
0000d2  eb0b0008          ADD      r0,r11,r8
0000d6  eba00009          SUB      r0,r0,r9
0000da  eba0000a          SUB      r0,r0,r10
0000de  b200              SXTH     r0,r0
0000e0  80c8              STRH     r0,[r1,#6]
;;;171    	}
0000e2  e009              B        |L4.248|
                  |L4.228|
;;;172    	else
;;;173    	{	
;;;174        Moto_duty[0] = Moto_duty[1] = Moto_duty[2] = Moto_duty[3] = IDLING;	
0000e4  20d2              MOVS     r0,#0xd2
0000e6  490f              LDR      r1,|L4.292|
0000e8  80c8              STRH     r0,[r1,#6]
0000ea  8088              STRH     r0,[r1,#4]
0000ec  8048              STRH     r0,[r1,#2]
0000ee  8008              STRH     r0,[r1,#0]
;;;175    		ctrl.pitch.shell.increment = 0;
0000f0  2100              MOVS     r1,#0
0000f2  4807              LDR      r0,|L4.272|
0000f4  6101              STR      r1,[r0,#0x10]
;;;176    		ctrl.roll.shell.increment= 0;		
0000f6  6581              STR      r1,[r0,#0x58]
                  |L4.248|
;;;177    	}
;;;178    	if(flag.ARMED)  moto_PwmRflash(&Moto_duty[0]);		
0000f8  480b              LDR      r0,|L4.296|
0000fa  78c0              LDRB     r0,[r0,#3]  ; flag
0000fc  b118              CBZ      r0,|L4.262|
0000fe  4809              LDR      r0,|L4.292|
000100  f7fffffe          BL       moto_PwmRflash
000104  e001              B        |L4.266|
                  |L4.262|
;;;179    	else            moto_STOP();	
000106  f7fffffe          BL       moto_STOP
                  |L4.266|
;;;180    }
00010a  b00b              ADD      sp,sp,#0x2c
00010c  e8bd8ff0          POP      {r4-r11,pc}
;;;181    
                          ENDP

                  |L4.272|
                          DCD      ctrl
                  |L4.276|
                          DCD      RC_Data
                  |L4.280|
                          DCD      angle
                  |L4.284|
                          DCD      0x63cfb331
                  |L4.288|
                          DCD      0x404ca994
                  |L4.292|
                          DCD      Moto_duty
                  |L4.296|
                          DCD      flag

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ctrl
                          %        220
                  Target
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  motor_array
                          DCD      Moto_duty
                  roll_old
                          DCD      0x00000000
                  pitch_old
                          DCD      0x00000000
                  yaw_old
                          DCD      0x00000000
                  Moto_duty
                          %        8
