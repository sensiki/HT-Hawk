; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\multirotor_ahrs.o --depend=.\Flash\Obj\multirotor_ahrs.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I"D:\KEIL MDK\ARM\INC" -I"D:\KEIL MDK\ARM\INC\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\multirotor_ahrs.crf ..\..\User\Function\MultiRotor_ahrs\MultiRotor_ahrs.c]
                          THUMB

                          AREA ||i.AHRS_Update||, CODE, READONLY, ALIGN=2

                  AHRS_Update PROC
;;;62     
;;;63     void AHRS_Update( void )
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;64     {
000004  b08d              SUB      sp,sp,#0x34
;;;65       fp32 ErrX, ErrY, ErrZ;
;;;66       fp32 AccX, AccY, AccZ;
;;;67       fp32 GyrX, GyrY, GyrZ;
;;;68     	fp32 Normalize;
;;;69       static fp32 exInt = 0.0f, eyInt = 0.0f, ezInt = 0.0f;
;;;70     	Gravity V;
;;;71     	
;;;72     	
;;;73     	// 加速度归一化
;;;74     	Normalize = Q_rsqrt(squa(sensor.acc.averag.x)+ squa(sensor.acc.averag.y) +squa(sensor.acc.averag.z));
000006  498c              LDR      r1,|L1.568|
000008  f9b1000a          LDRSH    r0,[r1,#0xa]
00000c  f7fffffe          BL       __aeabi_i2f
000010  4683              MOV      r11,r0
000012  4989              LDR      r1,|L1.568|
000014  f9b1000a          LDRSH    r0,[r1,#0xa]
000018  f7fffffe          BL       __aeabi_i2f
00001c  4659              MOV      r1,r11
00001e  9003              STR      r0,[sp,#0xc]
000020  f7fffffe          BL       __aeabi_fmul
000024  4681              MOV      r9,r0
000026  4984              LDR      r1,|L1.568|
000028  f9b10008          LDRSH    r0,[r1,#8]
00002c  f7fffffe          BL       __aeabi_i2f
000030  4981              LDR      r1,|L1.568|
000032  9002              STR      r0,[sp,#8]
000034  f9b10008          LDRSH    r0,[r1,#8]
000038  f7fffffe          BL       __aeabi_i2f
00003c  9001              STR      r0,[sp,#4]
00003e  9902              LDR      r1,[sp,#8]
000040  f7fffffe          BL       __aeabi_fmul
000044  497c              LDR      r1,|L1.568|
000046  9003              STR      r0,[sp,#0xc]
000048  f9b10006          LDRSH    r0,[r1,#6]  ; sensor
00004c  f7fffffe          BL       __aeabi_i2f
000050  4979              LDR      r1,|L1.568|
000052  9002              STR      r0,[sp,#8]
000054  f9b10006          LDRSH    r0,[r1,#6]  ; sensor
000058  f7fffffe          BL       __aeabi_i2f
00005c  9001              STR      r0,[sp,#4]
00005e  9902              LDR      r1,[sp,#8]
000060  f7fffffe          BL       __aeabi_fmul
000064  4683              MOV      r11,r0
000066  9903              LDR      r1,[sp,#0xc]
000068  f7fffffe          BL       __aeabi_fadd
00006c  4682              MOV      r10,r0
00006e  4649              MOV      r1,r9
000070  f7fffffe          BL       __aeabi_fadd
000074  4680              MOV      r8,r0
000076  f7fffffe          BL       Q_rsqrt
00007a  9007              STR      r0,[sp,#0x1c]
;;;75     	AccX = sensor.acc.averag.x*Normalize;
00007c  496e              LDR      r1,|L1.568|
00007e  f9b10006          LDRSH    r0,[r1,#6]  ; sensor
000082  f7fffffe          BL       __aeabi_i2f
000086  4680              MOV      r8,r0
000088  9907              LDR      r1,[sp,#0x1c]
00008a  f7fffffe          BL       __aeabi_fmul
00008e  4607              MOV      r7,r0
;;;76       AccY = sensor.acc.averag.y*Normalize;
000090  4969              LDR      r1,|L1.568|
000092  f9b10008          LDRSH    r0,[r1,#8]
000096  f7fffffe          BL       __aeabi_i2f
00009a  4680              MOV      r8,r0
00009c  9907              LDR      r1,[sp,#0x1c]
00009e  f7fffffe          BL       __aeabi_fmul
0000a2  900c              STR      r0,[sp,#0x30]
;;;77       AccZ = sensor.acc.averag.z*Normalize;
0000a4  4964              LDR      r1,|L1.568|
0000a6  f9b1000a          LDRSH    r0,[r1,#0xa]
0000aa  f7fffffe          BL       __aeabi_i2f
0000ae  4680              MOV      r8,r0
0000b0  9907              LDR      r1,[sp,#0x1c]
0000b2  f7fffffe          BL       __aeabi_fmul
0000b6  900b              STR      r0,[sp,#0x2c]
;;;78     
;;;79     	// 提取重力分量
;;;80     	V = Quaternion_vectorGravity(&NumQ);
0000b8  4960              LDR      r1,|L1.572|
0000ba  a804              ADD      r0,sp,#0x10
0000bc  f7fffffe          BL       Quaternion_vectorGravity
;;;81     	
;;;82     	// 向量差乘
;;;83      	ErrX = (AccY*V.z - AccZ*V.y);
0000c0  9905              LDR      r1,[sp,#0x14]
0000c2  980b              LDR      r0,[sp,#0x2c]
0000c4  f7fffffe          BL       __aeabi_fmul
0000c8  4680              MOV      r8,r0
0000ca  9906              LDR      r1,[sp,#0x18]
0000cc  980c              LDR      r0,[sp,#0x30]
0000ce  f7fffffe          BL       __aeabi_fmul
0000d2  4681              MOV      r9,r0
0000d4  4641              MOV      r1,r8
0000d6  f7fffffe          BL       __aeabi_fsub
0000da  4604              MOV      r4,r0
;;;84       ErrY = (AccZ*V.x - AccX*V.z);
0000dc  9906              LDR      r1,[sp,#0x18]
0000de  4638              MOV      r0,r7
0000e0  f7fffffe          BL       __aeabi_fmul
0000e4  4680              MOV      r8,r0
0000e6  9904              LDR      r1,[sp,#0x10]
0000e8  980b              LDR      r0,[sp,#0x2c]
0000ea  f7fffffe          BL       __aeabi_fmul
0000ee  4681              MOV      r9,r0
0000f0  4641              MOV      r1,r8
0000f2  f7fffffe          BL       __aeabi_fsub
0000f6  4605              MOV      r5,r0
;;;85       ErrZ = (AccX*V.y - AccY*V.x);
0000f8  9904              LDR      r1,[sp,#0x10]
0000fa  980c              LDR      r0,[sp,#0x30]
0000fc  f7fffffe          BL       __aeabi_fmul
000100  4680              MOV      r8,r0
000102  9905              LDR      r1,[sp,#0x14]
000104  4638              MOV      r0,r7
000106  f7fffffe          BL       __aeabi_fmul
00010a  4681              MOV      r9,r0
00010c  4641              MOV      r1,r8
00010e  f7fffffe          BL       __aeabi_fsub
000112  4606              MOV      r6,r0
;;;86      	
;;;87      	exInt = exInt + ErrX * KiDef;
000114  494a              LDR      r1,|L1.576|
000116  4620              MOV      r0,r4
000118  f7fffffe          BL       __aeabi_fmul
00011c  4680              MOV      r8,r0
00011e  4849              LDR      r0,|L1.580|
000120  6801              LDR      r1,[r0,#0]  ; exInt
000122  4640              MOV      r0,r8
000124  f7fffffe          BL       __aeabi_fadd
000128  4946              LDR      r1,|L1.580|
00012a  6008              STR      r0,[r1,#0]  ; exInt
;;;88       eyInt = eyInt + ErrY * KiDef;
00012c  4944              LDR      r1,|L1.576|
00012e  4628              MOV      r0,r5
000130  f7fffffe          BL       __aeabi_fmul
000134  4680              MOV      r8,r0
000136  4844              LDR      r0,|L1.584|
000138  6801              LDR      r1,[r0,#0]  ; eyInt
00013a  4640              MOV      r0,r8
00013c  f7fffffe          BL       __aeabi_fadd
000140  4941              LDR      r1,|L1.584|
000142  6008              STR      r0,[r1,#0]  ; eyInt
;;;89       ezInt = ezInt + ErrZ * KiDef;
000144  493e              LDR      r1,|L1.576|
000146  4630              MOV      r0,r6
000148  f7fffffe          BL       __aeabi_fmul
00014c  4680              MOV      r8,r0
00014e  483f              LDR      r0,|L1.588|
000150  6801              LDR      r1,[r0,#0]  ; ezInt
000152  4640              MOV      r0,r8
000154  f7fffffe          BL       __aeabi_fadd
000158  493c              LDR      r1,|L1.588|
00015a  6008              STR      r0,[r1,#0]  ; ezInt
;;;90     
;;;91       GyrX = sensor.gyro.radian.x + KpDef * VariableParameter(ErrX) * ErrX  +  exInt;
00015c  4620              MOV      r0,r4
00015e  f7fffffe          BL       VariableParameter
000162  4683              MOV      r11,r0
000164  493a              LDR      r1,|L1.592|
000166  f7fffffe          BL       __aeabi_fmul
00016a  4682              MOV      r10,r0
00016c  4621              MOV      r1,r4
00016e  f7fffffe          BL       __aeabi_fmul
000172  4681              MOV      r9,r0
000174  4830              LDR      r0,|L1.568|
000176  6bc1              LDR      r1,[r0,#0x3c]
000178  4648              MOV      r0,r9
00017a  f7fffffe          BL       __aeabi_fadd
00017e  4680              MOV      r8,r0
000180  4830              LDR      r0,|L1.580|
000182  6801              LDR      r1,[r0,#0]  ; exInt
000184  4640              MOV      r0,r8
000186  f7fffffe          BL       __aeabi_fadd
00018a  900a              STR      r0,[sp,#0x28]
;;;92       GyrY = sensor.gyro.radian.y + KpDef * VariableParameter(ErrY) * ErrY  +  eyInt;
00018c  4628              MOV      r0,r5
00018e  f7fffffe          BL       VariableParameter
000192  4683              MOV      r11,r0
000194  492e              LDR      r1,|L1.592|
000196  f7fffffe          BL       __aeabi_fmul
00019a  4682              MOV      r10,r0
00019c  4629              MOV      r1,r5
00019e  f7fffffe          BL       __aeabi_fmul
0001a2  4681              MOV      r9,r0
0001a4  4824              LDR      r0,|L1.568|
0001a6  6c01              LDR      r1,[r0,#0x40]
0001a8  4648              MOV      r0,r9
0001aa  f7fffffe          BL       __aeabi_fadd
0001ae  4680              MOV      r8,r0
0001b0  4825              LDR      r0,|L1.584|
0001b2  6801              LDR      r1,[r0,#0]  ; eyInt
0001b4  4640              MOV      r0,r8
0001b6  f7fffffe          BL       __aeabi_fadd
0001ba  9009              STR      r0,[sp,#0x24]
;;;93     	GyrZ = sensor.gyro.radian.z + KpDef * VariableParameter(ErrZ) * ErrZ  +  ezInt;
0001bc  4630              MOV      r0,r6
0001be  f7fffffe          BL       VariableParameter
0001c2  4683              MOV      r11,r0
0001c4  4922              LDR      r1,|L1.592|
0001c6  f7fffffe          BL       __aeabi_fmul
0001ca  4682              MOV      r10,r0
0001cc  4631              MOV      r1,r6
0001ce  f7fffffe          BL       __aeabi_fmul
0001d2  4681              MOV      r9,r0
0001d4  4818              LDR      r0,|L1.568|
0001d6  6c41              LDR      r1,[r0,#0x44]
0001d8  4648              MOV      r0,r9
0001da  f7fffffe          BL       __aeabi_fadd
0001de  4680              MOV      r8,r0
0001e0  481a              LDR      r0,|L1.588|
0001e2  6801              LDR      r1,[r0,#0]  ; ezInt
0001e4  4640              MOV      r0,r8
0001e6  f7fffffe          BL       __aeabi_fadd
0001ea  9008              STR      r0,[sp,#0x20]
;;;94     	
;;;95     	
;;;96     	// 一阶龙格库塔法, 更新四元数
;;;97     	Quaternion_RungeKutta(&NumQ, GyrX, GyrY, GyrZ, SampleRateHalf);
0001ec  4b19              LDR      r3,|L1.596|
0001ee  9300              STR      r3,[sp,#0]
0001f0  4812              LDR      r0,|L1.572|
0001f2  e9dd3208          LDRD     r3,r2,[sp,#0x20]
0001f6  990a              LDR      r1,[sp,#0x28]
0001f8  f7fffffe          BL       Quaternion_RungeKutta
;;;98     	
;;;99     	// 四元数归一化
;;;100    	Quaternion_Normalize(&NumQ);
0001fc  480f              LDR      r0,|L1.572|
0001fe  f7fffffe          BL       Quaternion_Normalize
;;;101    	
;;;102    	// 四元数转欧拉角
;;;103    	Quaternion_ToAngE(&NumQ, &AngE);
000202  4915              LDR      r1,|L1.600|
000204  480d              LDR      r0,|L1.572|
000206  f7fffffe          BL       Quaternion_ToAngE
;;;104    	
;;;105      AngE.Roll *= 57.3f; // roll
00020a  4913              LDR      r1,|L1.600|
00020c  6848              LDR      r0,[r1,#4]  ; AngE
00020e  4913              LDR      r1,|L1.604|
000210  f7fffffe          BL       __aeabi_fmul
000214  4910              LDR      r1,|L1.600|
000216  6048              STR      r0,[r1,#4]  ; AngE
;;;106    	AngE.Pitch *= 57.3f; // pitch
000218  6808              LDR      r0,[r1,#0]  ; AngE
00021a  4910              LDR      r1,|L1.604|
00021c  f7fffffe          BL       __aeabi_fmul
000220  490d              LDR      r1,|L1.600|
000222  6008              STR      r0,[r1,#0]  ; AngE
;;;107    	AngE.Yaw *= 57.3f; // pitch
000224  6888              LDR      r0,[r1,#8]  ; AngE
000226  490d              LDR      r1,|L1.604|
000228  f7fffffe          BL       __aeabi_fmul
00022c  490a              LDR      r1,|L1.600|
00022e  6088              STR      r0,[r1,#8]  ; AngE
;;;108     
;;;109    }
000230  b00d              ADD      sp,sp,#0x34
000232  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

000236  0000              DCW      0x0000
                  |L1.568|
                          DCD      sensor
                  |L1.572|
                          DCD      NumQ
                  |L1.576|
                          DCD      0x3a03126f
                  |L1.580|
                          DCD      exInt
                  |L1.584|
                          DCD      eyInt
                  |L1.588|
                          DCD      ezInt
                  |L1.592|
                          DCD      0x3f333333
                  |L1.596|
                          DCD      0x3a83126f
                  |L1.600|
                          DCD      AngE
                  |L1.604|
                          DCD      0x42653333

                          AREA ||i.AHRS_getValues||, CODE, READONLY, ALIGN=1

                  AHRS_getValues PROC
;;;35     
;;;36     void AHRS_getValues()
000000  4770              BX       lr
;;;37     {
;;;38     
;;;39     }
;;;40     void Prepare_Data(void)
                          ENDP


                          AREA ||i.Prepare_Data||, CODE, READONLY, ALIGN=2

                  Prepare_Data PROC
;;;39     }
;;;40     void Prepare_Data(void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;41     {
;;;42     	MPU6050_Dataanl();
000004  f7fffffe          BL       MPU6050_Dataanl
;;;43     	sensor.acc.averag.x = IIR_I_Filter(sensor.acc.origin.x, InPut_IIR[0], OutPut_IIR[0], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
000008  4926              LDR      r1,|L3.164|
00000a  f9b10000          LDRSH    r0,[r1,#0]  ; sensor
00000e  f7fffffe          BL       __aeabi_i2d
000012  4606              MOV      r6,r0
000014  2305              MOVS     r3,#5
000016  4a24              LDR      r2,|L3.168|
000018  4824              LDR      r0,|L3.172|
00001a  e9cd3201          STRD     r3,r2,[sp,#4]
00001e  9303              STR      r3,[sp,#0xc]
000020  9000              STR      r0,[sp,#0]
000022  4b23              LDR      r3,|L3.176|
000024  4a23              LDR      r2,|L3.180|
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       IIR_I_Filter
00002c  4604              MOV      r4,r0
00002e  f7fffffe          BL       __aeabi_d2iz
000032  b200              SXTH     r0,r0
000034  491b              LDR      r1,|L3.164|
000036  80c8              STRH     r0,[r1,#6]
;;;44     	sensor.acc.averag.y = IIR_I_Filter(sensor.acc.origin.y, InPut_IIR[1], OutPut_IIR[1], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
000038  f9b10002          LDRSH    r0,[r1,#2]  ; sensor
00003c  f7fffffe          BL       __aeabi_i2d
000040  4606              MOV      r6,r0
000042  2305              MOVS     r3,#5
000044  4a18              LDR      r2,|L3.168|
000046  4819              LDR      r0,|L3.172|
000048  e9cd3201          STRD     r3,r2,[sp,#4]
00004c  9303              STR      r3,[sp,#0xc]
00004e  9000              STR      r0,[sp,#0]
000050  4b17              LDR      r3,|L3.176|
000052  3328              ADDS     r3,r3,#0x28
000054  4a17              LDR      r2,|L3.180|
000056  3228              ADDS     r2,r2,#0x28
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       IIR_I_Filter
00005e  4604              MOV      r4,r0
000060  f7fffffe          BL       __aeabi_d2iz
000064  b201              SXTH     r1,r0
000066  480f              LDR      r0,|L3.164|
000068  8101              STRH     r1,[r0,#8]
;;;45     	sensor.acc.averag.z = IIR_I_Filter(sensor.acc.origin.z, InPut_IIR[2], OutPut_IIR[2], b_IIR, IIR_ORDER+1, a_IIR, IIR_ORDER+1);
00006a  4601              MOV      r1,r0
00006c  f9b10004          LDRSH    r0,[r1,#4]  ; sensor
000070  f7fffffe          BL       __aeabi_i2d
000074  4604              MOV      r4,r0
000076  2305              MOVS     r3,#5
000078  4a0b              LDR      r2,|L3.168|
00007a  480c              LDR      r0,|L3.172|
00007c  e9cd3201          STRD     r3,r2,[sp,#4]
000080  9303              STR      r3,[sp,#0xc]
000082  9000              STR      r0,[sp,#0]
000084  4b0a              LDR      r3,|L3.176|
000086  3350              ADDS     r3,r3,#0x50
000088  4a0a              LDR      r2,|L3.180|
00008a  3250              ADDS     r2,r2,#0x50
00008c  4620              MOV      r0,r4
00008e  f7fffffe          BL       IIR_I_Filter
000092  4606              MOV      r6,r0
000094  f7fffffe          BL       __aeabi_d2iz
000098  b201              SXTH     r1,r0
00009a  4802              LDR      r0,|L3.164|
00009c  8141              STRH     r1,[r0,#0xa]
;;;46     	
;;;47     	
;;;48     }
00009e  e8bd81ff          POP      {r0-r8,pc}
;;;49     
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      sensor
                  |L3.168|
                          DCD      a_IIR
                  |L3.172|
                          DCD      b_IIR
                  |L3.176|
                          DCD      OutPut_IIR
                  |L3.180|
                          DCD      InPut_IIR

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  AngE
                          %        16
                  InPut_IIR
                          %        120
                  OutPut_IIR
                          %        120
                  angle
                          %        12

                          AREA ||.data||, DATA, ALIGN=3

                  NumQ
000000  3f800000          DCFS     0x3f800000 ; 1
000004  00000000          DCFS     0x00000000 ; 0
000008  00000000          DCFS     0x00000000 ; 0
00000c  00000000          DCFS     0x00000000 ; 0
                  b_IIR
000010  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000014  3f4a36e2
000018  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00001c  3f6a36e2
000020  40000000          DCFD     0x3f73a92a40000000 ; 0.0048000002279877663
000024  3f73a92a
000028  e0000000          DCFD     0x3f6a36e2e0000000 ; 0.0031999999191612005
00002c  3f6a36e2
000030  e0000000          DCFD     0x3f4a36e2e0000000 ; 0.00079999997979030013
000034  3f4a36e2
                  a_IIR
000038  00000000          DCFD     0x3ff0000000000000 ; 1
00003c  3ff00000
000040  80000000          DCFD     0xc008240b80000000 ; -3.0176000595092773
000044  c008240b
000048  e0000000          DCFD     0x400c0ebee0000000 ; 3.5072000026702881
00004c  400c0ebe
000050  00000000          DCFD     0xbffd8fc500000000 ; -1.847599983215332
000054  bffd8fc5
000058  e0000000          DCFD     0x3fd7bb2fe0000000 ; 0.37079998850822449
00005c  3fd7bb2f
                  exInt
000060  00000000          DCFS     0x00000000 ; 0
                  eyInt
000064  00000000          DCFS     0x00000000 ; 0
                  ezInt
000068  00000000          DCFS     0x00000000 ; 0
