; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\spi.o --depend=.\Flash\Obj\spi.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I"D:\KEIL MDK\ARM\INC" -I"D:\KEIL MDK\ARM\INC\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\spi.crf ..\..\User\Driver\SPI\Spi.c]
                          THUMB

                          AREA ||i.SPI1_Config||, CODE, READONLY, ALIGN=2

                  SPI1_Config PROC
;;;11     
;;;12     void SPI1_Config(void)
000000  b500              PUSH     {lr}
;;;13     { 
000002  b087              SUB      sp,sp,#0x1c
;;;14     		GPIO_InitTypeDef GPIO_InitStructure;
;;;15     		SPI_InitTypeDef  SPI_InitStructure;
;;;16         RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1|RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);  
000004  2101              MOVS     r1,#1
000006  f241000d          MOV      r0,#0x100d
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;17         
;;;18         //  PA5--CLK  PA7--MOSI  
;;;19         GPIO_InitStructure.GPIO_Pin   =  GPIO_Pin_5|GPIO_Pin_7; 
00000e  20a0              MOVS     r0,#0xa0
000010  f8ad0018          STRH     r0,[sp,#0x18]
;;;20         GPIO_InitStructure.GPIO_Speed =  GPIO_Speed_50MHz; 
000014  2003              MOVS     r0,#3
000016  f88d001a          STRB     r0,[sp,#0x1a]
;;;21         GPIO_InitStructure.GPIO_Mode  =  GPIO_Mode_AF_PP; 
00001a  2018              MOVS     r0,#0x18
00001c  f88d001b          STRB     r0,[sp,#0x1b]
;;;22         GPIO_Init(GPIOA, &GPIO_InitStructure);
000020  a906              ADD      r1,sp,#0x18
000022  482e              LDR      r0,|L1.220|
000024  f7fffffe          BL       GPIO_Init
;;;23     	
;;;24         //PA6--MISO 
;;;25         GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_6; 
000028  2040              MOVS     r0,#0x40
00002a  f8ad0018          STRH     r0,[sp,#0x18]
;;;26         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; 
00002e  2004              MOVS     r0,#4
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;27         GPIO_Init(GPIOA, &GPIO_InitStructure);
000034  a906              ADD      r1,sp,#0x18
000036  4829              LDR      r0,|L1.220|
000038  f7fffffe          BL       GPIO_Init
;;;28     	
;;;29         //PA4--NSS
;;;30         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_4; 
00003c  2010              MOVS     r0,#0x10
00003e  f8ad0018          STRH     r0,[sp,#0x18]
;;;31         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
000042  2003              MOVS     r0,#3
000044  f88d001a          STRB     r0,[sp,#0x1a]
;;;32         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 
000048  2010              MOVS     r0,#0x10
00004a  f88d001b          STRB     r0,[sp,#0x1b]
;;;33         GPIO_Init(GPIOA, &GPIO_InitStructure);
00004e  a906              ADD      r1,sp,#0x18
000050  4822              LDR      r0,|L1.220|
000052  f7fffffe          BL       GPIO_Init
;;;34      
;;;35     		//PC2--CE
;;;36         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_11; 
000056  f44f6000          MOV      r0,#0x800
00005a  f8ad0018          STRH     r0,[sp,#0x18]
;;;37         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
00005e  2003              MOVS     r0,#3
000060  f88d001a          STRB     r0,[sp,#0x1a]
;;;38         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP; 
000064  2010              MOVS     r0,#0x10
000066  f88d001b          STRB     r0,[sp,#0x1b]
;;;39         GPIO_Init(GPIOA, &GPIO_InitStructure);
00006a  a906              ADD      r1,sp,#0x18
00006c  481b              LDR      r0,|L1.220|
00006e  f7fffffe          BL       GPIO_Init
;;;40     		
;;;41     		//PC3--IRQ  
;;;42         GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0;   
000072  2001              MOVS     r0,#1
000074  f8ad0018          STRH     r0,[sp,#0x18]
;;;43     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; 
000078  2003              MOVS     r0,#3
00007a  f88d001a          STRB     r0,[sp,#0x1a]
;;;44         GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU; //上拉输入
00007e  2048              MOVS     r0,#0x48
000080  f88d001b          STRB     r0,[sp,#0x1b]
;;;45         GPIO_Init(GPIOB, &GPIO_InitStructure);
000084  a906              ADD      r1,sp,#0x18
000086  4816              LDR      r0,|L1.224|
000088  f7fffffe          BL       GPIO_Init
;;;46      
;;;47     	                     
;;;48         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //全双工
00008c  2000              MOVS     r0,#0
00008e  f8ad0004          STRH     r0,[sp,#4]
;;;49     		SPI_InitStructure.SPI_Mode = SPI_Mode_Master;                      //主模式
000092  f44f7082          MOV      r0,#0x104
000096  f8ad0006          STRH     r0,[sp,#6]
;;;50     		SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;                  //一次转换8位
00009a  2000              MOVS     r0,#0
00009c  f8ad0008          STRH     r0,[sp,#8]
;;;51     		SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;                        //空闲电平低电平
0000a0  f8ad000a          STRH     r0,[sp,#0xa]
;;;52     		SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;                      //第一个上升沿采样
0000a4  f8ad000c          STRH     r0,[sp,#0xc]
;;;53     		SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;                         // NSS为软件模式
0000a8  f44f7000          MOV      r0,#0x200
0000ac  f8ad000e          STRH     r0,[sp,#0xe]
;;;54     		SPI_InitStructure.SPI_BaudRatePrescaler =SPI_BaudRatePrescaler_8; //9MHz
0000b0  2010              MOVS     r0,#0x10
0000b2  f8ad0010          STRH     r0,[sp,#0x10]
;;;55     		//SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;		//定义波特率预分频的值:波特率预分频值为16
;;;56     		SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;        					//数据传输低位在前
0000b6  2000              MOVS     r0,#0
0000b8  f8ad0012          STRH     r0,[sp,#0x12]
;;;57     		SPI_InitStructure.SPI_CRCPolynomial = 7;                           //CRC校验模式
0000bc  2007              MOVS     r0,#7
0000be  f8ad0014          STRH     r0,[sp,#0x14]
;;;58         SPI_Init(SPI1, &SPI_InitStructure);                                //初始化
0000c2  a901              ADD      r1,sp,#4
0000c4  4807              LDR      r0,|L1.228|
0000c6  f7fffffe          BL       SPI_Init
;;;59         
;;;60        // SPI_NSSInternalSoftwareConfig(SPI1, SPI_NSSInternalSoft_Set);
;;;61         
;;;62         SPI_Cmd(SPI1, ENABLE); //SPI1
0000ca  2101              MOVS     r1,#1
0000cc  4805              LDR      r0,|L1.228|
0000ce  f7fffffe          BL       SPI_Cmd
;;;63     		SPI1_ReadWriteByte(0xff);//启动传输	
0000d2  20ff              MOVS     r0,#0xff
0000d4  f7fffffe          BL       SPI1_ReadWriteByte
;;;64     }
0000d8  b007              ADD      sp,sp,#0x1c
0000da  bd00              POP      {pc}
;;;65     //SPI 速度设置函数
                          ENDP

                  |L1.220|
                          DCD      0x40010800
                  |L1.224|
                          DCD      0x40010c00
                  |L1.228|
                          DCD      0x40013000

                          AREA ||i.SPI1_ReadWriteByte||, CODE, READONLY, ALIGN=2

                  SPI1_ReadWriteByte PROC
;;;84     //返回值:读取到的字节
;;;85     u8 SPI1_ReadWriteByte(u8 TxData)
000000  b570              PUSH     {r4-r6,lr}
;;;86     {		
000002  4605              MOV      r5,r0
;;;87     	u8 retry=0;				 	
000004  2400              MOVS     r4,#0
;;;88     	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET) //检查指定的SPI标志位设置与否:发送缓存空标志位
000006  e005              B        |L2.20|
                  |L2.8|
;;;89     		{
;;;90     		retry++;
000008  1c60              ADDS     r0,r4,#1
00000a  b2c4              UXTB     r4,r0
;;;91     		if(retry>200)return 0;
00000c  2cc8              CMP      r4,#0xc8
00000e  dd01              BLE      |L2.20|
000010  2000              MOVS     r0,#0
                  |L2.18|
;;;92     		}			  
;;;93     	SPI_I2S_SendData(SPI1, TxData); //通过外设SPIx发送一个数据
;;;94     	retry=0;
;;;95     
;;;96     	while (SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET)//检查指定的SPI标志位设置与否:接受缓存非空标志位
;;;97     		{
;;;98     		retry++;
;;;99     		if(retry>200)return 0;
;;;100    		}	  						    
;;;101    	return SPI_I2S_ReceiveData(SPI1); //返回通过SPIx最近接收的数据					    
;;;102    }
000012  bd70              POP      {r4-r6,pc}
                  |L2.20|
000014  2102              MOVS     r1,#2                 ;88
000016  480e              LDR      r0,|L2.80|
000018  f7fffffe          BL       SPI_I2S_GetFlagStatus
00001c  2800              CMP      r0,#0                 ;88
00001e  d0f3              BEQ      |L2.8|
000020  4629              MOV      r1,r5                 ;93
000022  480b              LDR      r0,|L2.80|
000024  f7fffffe          BL       SPI_I2S_SendData
000028  2400              MOVS     r4,#0                 ;94
00002a  e005              B        |L2.56|
                  |L2.44|
00002c  1c60              ADDS     r0,r4,#1              ;98
00002e  b2c4              UXTB     r4,r0                 ;98
000030  2cc8              CMP      r4,#0xc8              ;99
000032  dd01              BLE      |L2.56|
000034  2000              MOVS     r0,#0                 ;99
000036  e7ec              B        |L2.18|
                  |L2.56|
000038  2101              MOVS     r1,#1                 ;96
00003a  4805              LDR      r0,|L2.80|
00003c  f7fffffe          BL       SPI_I2S_GetFlagStatus
000040  2800              CMP      r0,#0                 ;96
000042  d0f3              BEQ      |L2.44|
000044  4802              LDR      r0,|L2.80|
000046  f7fffffe          BL       SPI_I2S_ReceiveData
00004a  b2c0              UXTB     r0,r0                 ;101
00004c  e7e1              B        |L2.18|
;;;103    
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      0x40013000

                          AREA ||i.SPI1_SetSpeed||, CODE, READONLY, ALIGN=2

                  SPI1_SetSpeed PROC
;;;71       
;;;72     void SPI1_SetSpeed(u8 SPI_BaudRatePrescaler)
000000  b510              PUSH     {r4,lr}
;;;73     {
000002  4604              MOV      r4,r0
;;;74       assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));
;;;75     	SPI1->CR1&=0XFFC7;
000004  4807              LDR      r0,|L3.36|
000006  8800              LDRH     r0,[r0,#0]
000008  f64f71c7          MOV      r1,#0xffc7
00000c  4008              ANDS     r0,r0,r1
00000e  4905              LDR      r1,|L3.36|
000010  8008              STRH     r0,[r1,#0]
;;;76     	SPI1->CR1|=SPI_BaudRatePrescaler;	//设置SPI2速度 
000012  4608              MOV      r0,r1
000014  8800              LDRH     r0,[r0,#0]
000016  4320              ORRS     r0,r0,r4
000018  8008              STRH     r0,[r1,#0]
;;;77     	SPI_Cmd(SPI1,ENABLE); 
00001a  2101              MOVS     r1,#1
00001c  4801              LDR      r0,|L3.36|
00001e  f7fffffe          BL       SPI_Cmd
;;;78     
;;;79     } 
000022  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  |L3.36|
                          DCD      0x40013000
