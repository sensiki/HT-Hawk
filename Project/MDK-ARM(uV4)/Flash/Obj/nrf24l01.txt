; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -o.\Flash\Obj\nrf24l01.o --depend=.\Flash\Obj\nrf24l01.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\User\usb_virture_com -I..\..\User -I..\..\User\bsp -I..\..\User\Driver\IIC -I..\..\User\Driver\LED -I..\..\User\Driver\TIM -I..\..\User\Driver\SPI -I..\..\User\Driver\ADC -I..\..\User\Driver\Delay -I..\..\User\Driver\UART -I..\..\User\Driver\MOTOR -I..\..\User\Driver\PWM_IN -I..\..\User\Driver\EEPROM -I..\..\User\Modules\Modules_mpu6050 -I..\..\User\Modules\Modules_nrf24L01 -I..\..\User\Modules\Modules_hmc5883 -I..\..\User\Algorithm\Algorithm_filter -I..\..\User\Algorithm\Algorithm_math -I..\..\User\Algorithm\Algorithm_sqLite -I..\..\User\Algorithm\Algorithm_quaternion -I..\..\User\Function\MultiRotor_rc -I..\..\User\Function\MultiRotor_app -I..\..\User\Function\MultiRotor_ahrs -I..\..\User\Function\MultiRotor_radio -I..\..\User\Function\MultiRotor_control -I..\..\User\Modules\Modules_oled -I"D:\KEIL MDK\ARM\INC" -I"D:\KEIL MDK\ARM\INC\ST\STM32F10x" -D__MICROLIB -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Flash\Obj\nrf24l01.crf ..\..\User\Modules\Modules_nrf24L01\NRF24L01.c]
                          THUMB

                          AREA ||i.NRF24L01_Check||, CODE, READONLY, ALIGN=2

                  NRF24L01_Check PROC
;;;40     /*====================================================================================================*/
;;;41     u8 NRF24L01_Check(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;42     {
;;;43     	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
000002  a110              ADR      r1,|L1.68|
000004  c903              LDM      r1,{r0,r1}
000006  e9cd0100          STRD     r0,r1,[sp,#0]
;;;44     	u8 i;  	 
;;;45     	NRF24L01_Write_Buf(WRITE_REG_NRF+TX_ADDR,buf,5);//写入5个字节的地址.	
00000a  2205              MOVS     r2,#5
00000c  4669              MOV      r1,sp
00000e  2030              MOVS     r0,#0x30
000010  f7fffffe          BL       NRF24L01_Write_Buf
;;;46     	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  
000014  2205              MOVS     r2,#5
000016  4669              MOV      r1,sp
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       NRF24L01_Read_Buf
;;;47     	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;	 							   
00001e  2400              MOVS     r4,#0
000020  e006              B        |L1.48|
                  |L1.34|
000022  f81d0004          LDRB     r0,[sp,r4]
000026  28a5              CMP      r0,#0xa5
000028  d000              BEQ      |L1.44|
00002a  e003              B        |L1.52|
                  |L1.44|
00002c  1c60              ADDS     r0,r4,#1
00002e  b2c4              UXTB     r4,r0
                  |L1.48|
000030  2c05              CMP      r4,#5
000032  dbf6              BLT      |L1.34|
                  |L1.52|
000034  bf00              NOP      
;;;48     	if(i!=5)return 1;//检测24L01错误	
000036  2c05              CMP      r4,#5
000038  d001              BEQ      |L1.62|
00003a  2001              MOVS     r0,#1
                  |L1.60|
;;;49     	return 0;		 //检测到24L01
;;;50     }	 	 
00003c  bd1c              POP      {r2-r4,pc}
                  |L1.62|
00003e  2000              MOVS     r0,#0                 ;49
000040  e7fc              B        |L1.60|
;;;51     /*====================================================================================================*/
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
000044  a5a5a5a5          DCB      165,165,165,165,165,0
000048  a500    
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.NRF24L01_Init||, CODE, READONLY, ALIGN=2

                  NRF24L01_Init PROC
;;;25     /*====================================================================================================*/
;;;26     void NRF24L01_Init(void)
000000  b510              PUSH     {r4,lr}
;;;27     { 	
;;;28     	NRF24L01_CE_L();
000002  f44f6100          MOV      r1,#0x800
000006  4805              LDR      r0,|L2.28|
000008  f7fffffe          BL       GPIO_ResetBits
;;;29     	NRF24L01_CSN_H();
00000c  2110              MOVS     r1,#0x10
00000e  4803              LDR      r0,|L2.28|
000010  f7fffffe          BL       GPIO_SetBits
;;;30     	SPI1_Config(); 		 	 
000014  f7fffffe          BL       SPI1_Config
;;;31     }
000018  bd10              POP      {r4,pc}
;;;32     /*====================================================================================================*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Mode||, CODE, READONLY, ALIGN=2

                  NRF24L01_Mode PROC
;;;185    /*====================================================================================================*/
;;;186    void NRF24L01_Mode(u8 model)
000000  b510              PUSH     {r4,lr}
;;;187    {
000002  4604              MOV      r4,r0
;;;188    	 NRF24L01_CE_L();     
000004  f44f6100          MOV      r1,#0x800
000008  4839              LDR      r0,|L3.240|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;189       NRF24L01_Write_Buf(WRITE_REG_NRF+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
00000e  2205              MOVS     r2,#5
000010  4938              LDR      r1,|L3.244|
000012  2030              MOVS     r0,#0x30
000014  f7fffffe          BL       NRF24L01_Write_Buf
;;;190       NRF24L01_Write_Buf(WRITE_REG_NRF+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK	  
000018  2205              MOVS     r2,#5
00001a  4937              LDR      r1,|L3.248|
00001c  202a              MOVS     r0,#0x2a
00001e  f7fffffe          BL       NRF24L01_Write_Buf
;;;191    
;;;192       NRF24L01_Write_Reg(WRITE_REG_NRF+EN_AA,0x01);     //使能通道0的自动应答    
000022  2101              MOVS     r1,#1
000024  2021              MOVS     r0,#0x21
000026  f7fffffe          BL       NRF24L01_Write_Reg
;;;193       NRF24L01_Write_Reg(WRITE_REG_NRF+EN_RXADDR,0x01); //使能通道0的接收地址  
00002a  2101              MOVS     r1,#1
00002c  2022              MOVS     r0,#0x22
00002e  f7fffffe          BL       NRF24L01_Write_Reg
;;;194       NRF24L01_Write_Reg(WRITE_REG_NRF+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
000032  211a              MOVS     r1,#0x1a
000034  2024              MOVS     r0,#0x24
000036  f7fffffe          BL       NRF24L01_Write_Reg
;;;195       NRF24L01_Write_Reg(WRITE_REG_NRF+RF_CH,40);       //设置RF通道为40
00003a  2128              MOVS     r1,#0x28
00003c  2025              MOVS     r0,#0x25
00003e  f7fffffe          BL       NRF24L01_Write_Reg
;;;196       NRF24L01_Write_Reg(WRITE_REG_NRF+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启  
000042  210f              MOVS     r1,#0xf
000044  2026              MOVS     r0,#0x26
000046  f7fffffe          BL       NRF24L01_Write_Reg
;;;197    /////////////////////////////////////////////////////////
;;;198    	if(model==1)				//RX
00004a  2c01              CMP      r4,#1
00004c  d108              BNE      |L3.96|
;;;199    	{
;;;200    		NRF24L01_Write_Reg(WRITE_REG_NRF+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 
00004e  2120              MOVS     r1,#0x20
000050  2031              MOVS     r0,#0x31
000052  f7fffffe          BL       NRF24L01_Write_Reg
;;;201    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0f);   		 // IRQ收发完成中断开启,16位CRC,主接收
000056  210f              MOVS     r1,#0xf
000058  2020              MOVS     r0,#0x20
00005a  f7fffffe          BL       NRF24L01_Write_Reg
00005e  e041              B        |L3.228|
                  |L3.96|
;;;202    	}
;;;203    	else if(model==2)		//TX
000060  2c02              CMP      r4,#2
000062  d108              BNE      |L3.118|
;;;204    	{
;;;205    		NRF24L01_Write_Reg(WRITE_REG_NRF+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 
000064  2120              MOVS     r1,#0x20
000066  2031              MOVS     r0,#0x31
000068  f7fffffe          BL       NRF24L01_Write_Reg
;;;206    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0e);   		 // IRQ收发完成中断开启,16位CRC,主发送
00006c  210e              MOVS     r1,#0xe
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       NRF24L01_Write_Reg
000074  e036              B        |L3.228|
                  |L3.118|
;;;207    	}
;;;208    	else if(model==3)		//RX2
000076  2c03              CMP      r4,#3
000078  d11a              BNE      |L3.176|
;;;209    	{
;;;210    		NRF24L01_Write_Reg(FLUSH_TX,0xff);
00007a  21ff              MOVS     r1,#0xff
00007c  20e1              MOVS     r0,#0xe1
00007e  f7fffffe          BL       NRF24L01_Write_Reg
;;;211    		NRF24L01_Write_Reg(FLUSH_RX,0xff);
000082  21ff              MOVS     r1,#0xff
000084  20e2              MOVS     r0,#0xe2
000086  f7fffffe          BL       NRF24L01_Write_Reg
;;;212    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0f);   		 // IRQ收发完成中断开启,16位CRC,主接收
00008a  210f              MOVS     r1,#0xf
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       NRF24L01_Write_Reg
;;;213    		
;;;214    		SPI1_ReadWriteByte(0x50);
000092  2050              MOVS     r0,#0x50
000094  f7fffffe          BL       SPI1_ReadWriteByte
;;;215    		SPI1_ReadWriteByte(0x73);
000098  2073              MOVS     r0,#0x73
00009a  f7fffffe          BL       SPI1_ReadWriteByte
;;;216    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1c,0x01);
00009e  2101              MOVS     r1,#1
0000a0  203c              MOVS     r0,#0x3c
0000a2  f7fffffe          BL       NRF24L01_Write_Reg
;;;217    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1d,0x07);
0000a6  2107              MOVS     r1,#7
0000a8  203d              MOVS     r0,#0x3d
0000aa  f7fffffe          BL       NRF24L01_Write_Reg
0000ae  e019              B        |L3.228|
                  |L3.176|
;;;218    	}
;;;219    	else								//TX2
;;;220    	{
;;;221    		NRF24L01_Write_Reg(WRITE_REG_NRF + CONFIG, 0x0e);   		 // IRQ收发完成中断开启,16位CRC,主发送
0000b0  210e              MOVS     r1,#0xe
0000b2  2020              MOVS     r0,#0x20
0000b4  f7fffffe          BL       NRF24L01_Write_Reg
;;;222    		NRF24L01_Write_Reg(FLUSH_TX,0xff);
0000b8  21ff              MOVS     r1,#0xff
0000ba  20e1              MOVS     r0,#0xe1
0000bc  f7fffffe          BL       NRF24L01_Write_Reg
;;;223    		NRF24L01_Write_Reg(FLUSH_RX,0xff);
0000c0  21ff              MOVS     r1,#0xff
0000c2  20e2              MOVS     r0,#0xe2
0000c4  f7fffffe          BL       NRF24L01_Write_Reg
;;;224    		
;;;225    		SPI1_ReadWriteByte(0x50);
0000c8  2050              MOVS     r0,#0x50
0000ca  f7fffffe          BL       SPI1_ReadWriteByte
;;;226    		SPI1_ReadWriteByte(0x73);
0000ce  2073              MOVS     r0,#0x73
0000d0  f7fffffe          BL       SPI1_ReadWriteByte
;;;227    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1c,0x01);
0000d4  2101              MOVS     r1,#1
0000d6  203c              MOVS     r0,#0x3c
0000d8  f7fffffe          BL       NRF24L01_Write_Reg
;;;228    		NRF24L01_Write_Reg(WRITE_REG_NRF+0x1d,0x07);
0000dc  2107              MOVS     r1,#7
0000de  203d              MOVS     r0,#0x3d
0000e0  f7fffffe          BL       NRF24L01_Write_Reg
                  |L3.228|
;;;229    	}
;;;230    	NRF24L01_CE_H(); 
0000e4  f44f6100          MOV      r1,#0x800
0000e8  4801              LDR      r0,|L3.240|
0000ea  f7fffffe          BL       GPIO_SetBits
;;;231    }
0000ee  bd10              POP      {r4,pc}
;;;232    
                          ENDP

                  |L3.240|
                          DCD      0x40010800
                  |L3.244|
                          DCD      TX_ADDRESS
                  |L3.248|
                          DCD      RX_ADDRESS

                          AREA ||i.NRF24L01_Read_Buf||, CODE, READONLY, ALIGN=2

                  NRF24L01_Read_Buf PROC
;;;95     /*====================================================================================================*/
;;;96     u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;97     {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;98     	  u8 status,u8_ctr;	       
;;;99       	NRF24L01_CSN_L();           //使能SPI传输
00000a  2110              MOVS     r1,#0x10
00000c  480b              LDR      r0,|L4.60|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;100      	status=SPI1_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值   	   
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       SPI1_ReadWriteByte
000018  4680              MOV      r8,r0
;;;101     	  for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI1_ReadWriteByte(0XFF);//读出数据
00001a  2400              MOVS     r4,#0
00001c  e005              B        |L4.42|
                  |L4.30|
00001e  20ff              MOVS     r0,#0xff
000020  f7fffffe          BL       SPI1_ReadWriteByte
000024  5528              STRB     r0,[r5,r4]
000026  1c60              ADDS     r0,r4,#1
000028  b2c4              UXTB     r4,r0
                  |L4.42|
00002a  42b4              CMP      r4,r6
00002c  dbf7              BLT      |L4.30|
;;;102      	NRF24L01_CSN_H();       //关闭SPI传输
00002e  2110              MOVS     r1,#0x10
000030  4802              LDR      r0,|L4.60|
000032  f7fffffe          BL       GPIO_SetBits
;;;103      	return status;        //返回读到的状态值
000036  4640              MOV      r0,r8
;;;104    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;105    /*====================================================================================================*/
                          ENDP

                  |L4.60|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Read_Reg||, CODE, READONLY, ALIGN=2

                  NRF24L01_Read_Reg PROC
;;;77     /*====================================================================================================*/
;;;78     u8 NRF24L01_Read_Reg(u8 reg)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80     	  u8 reg_val;	    
;;;81      	  NRF24L01_CSN_L();;          //使能SPI传输		
000004  2110              MOVS     r1,#0x10
000006  4808              LDR      r0,|L5.40|
000008  f7fffffe          BL       GPIO_ResetBits
;;;82       	SPI1_ReadWriteByte(reg);   //发送寄存器号
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       SPI1_ReadWriteByte
;;;83       	reg_val=SPI1_ReadWriteByte(0XFF);//读取寄存器内容
000012  20ff              MOVS     r0,#0xff
000014  f7fffffe          BL       SPI1_ReadWriteByte
000018  4605              MOV      r5,r0
;;;84       	NRF24L01_CSN_H();;          //禁止SPI传输		    
00001a  2110              MOVS     r1,#0x10
00001c  4802              LDR      r0,|L5.40|
00001e  f7fffffe          BL       GPIO_SetBits
;;;85       	return(reg_val);           //返回状态值
000022  4628              MOV      r0,r5
;;;86     }	
000024  bd70              POP      {r4-r6,pc}
;;;87     /*====================================================================================================*/
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_RxPacket||, CODE, READONLY, ALIGN=1

                  NRF24L01_RxPacket PROC
;;;162    /*====================================================================================================*/
;;;163    u8 NRF24L01_RxPacket(u8 *rxbuf)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4604              MOV      r4,r0
;;;165    	u8 sta;		    							   
;;;166    	SPI1_SetSpeed(SPI_BaudRatePrescaler_32); //spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）   
000004  2020              MOVS     r0,#0x20
000006  f7fffffe          BL       SPI1_SetSpeed
;;;167    	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    	 
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       NRF24L01_Read_Reg
000010  4605              MOV      r5,r0
;;;168    	NRF24L01_Write_Reg(WRITE_REG_NRF+STATUS,sta); //清除TX_DS或MAX_RT中断标志
000012  4629              MOV      r1,r5
000014  2027              MOVS     r0,#0x27
000016  f7fffffe          BL       NRF24L01_Write_Reg
;;;169    	if(sta&RX_OK)//接收到数据
00001a  f0150f40          TST      r5,#0x40
00001e  d00a              BEQ      |L6.54|
;;;170    	{
;;;171    		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
000020  2220              MOVS     r2,#0x20
000022  4621              MOV      r1,r4
000024  2061              MOVS     r0,#0x61
000026  f7fffffe          BL       NRF24L01_Read_Buf
;;;172    		NRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 
00002a  21ff              MOVS     r1,#0xff
00002c  20e2              MOVS     r0,#0xe2
00002e  f7fffffe          BL       NRF24L01_Write_Reg
;;;173    		return 0; 
000032  2000              MOVS     r0,#0
                  |L6.52|
;;;174    	}	   
;;;175    	return 1;//没收到任何数据
;;;176    }					    
000034  bd70              POP      {r4-r6,pc}
                  |L6.54|
000036  2001              MOVS     r0,#1                 ;175
000038  e7fc              B        |L6.52|
;;;177    /*====================================================================================================*/
                          ENDP


                          AREA ||i.NRF24L01_TxPacket||, CODE, READONLY, ALIGN=2

                  NRF24L01_TxPacket PROC
;;;131    /*====================================================================================================*/
;;;132    u8 NRF24L01_TxPacket(u8 *txbuf)
000000  b570              PUSH     {r4-r6,lr}
;;;133    {
000002  4605              MOV      r5,r0
;;;134    	u8 sta;
;;;135     	SPI1_SetSpeed(SPI_BaudRatePrescaler_16);//spi速度为9Mhz（24L01的最大SPI时钟为10Mhz）   
000004  2018              MOVS     r0,#0x18
000006  f7fffffe          BL       SPI1_SetSpeed
;;;136    	NRF24L01_CE_L();
00000a  f44f6100          MOV      r1,#0x800
00000e  4814              LDR      r0,|L7.96|
000010  f7fffffe          BL       GPIO_ResetBits
;;;137      NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节  
000014  2220              MOVS     r2,#0x20
000016  4629              MOV      r1,r5
000018  20a0              MOVS     r0,#0xa0
00001a  f7fffffe          BL       NRF24L01_Write_Buf
;;;138      NRF24L01_CE_H();	
00001e  f44f6100          MOV      r1,#0x800
000022  480f              LDR      r0,|L7.96|
000024  f7fffffe          BL       GPIO_SetBits
;;;139    	delay(2);  //改为延时，而不是一直等待
000028  2002              MOVS     r0,#2
00002a  f7fffffe          BL       delay
;;;140    	//while(NRF24L01_IRQ!=0);//等待发送完成
;;;141    	sta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值	   
00002e  2007              MOVS     r0,#7
000030  f7fffffe          BL       NRF24L01_Read_Reg
000034  4604              MOV      r4,r0
;;;142    	NRF24L01_Write_Reg(WRITE_REG_NRF+STATUS,sta); //清除TX_DS或MAX_RT中断标志
000036  4621              MOV      r1,r4
000038  2027              MOVS     r0,#0x27
00003a  f7fffffe          BL       NRF24L01_Write_Reg
;;;143    	if(sta&MAX_TX)//达到最大重发次数
00003e  f0140f10          TST      r4,#0x10
000042  d005              BEQ      |L7.80|
;;;144    	{
;;;145    		NRF24L01_Write_Reg(FLUSH_TX,0xff);//清除TX FIFO寄存器 
000044  21ff              MOVS     r1,#0xff
000046  20e1              MOVS     r0,#0xe1
000048  f7fffffe          BL       NRF24L01_Write_Reg
;;;146    		return MAX_TX; 
00004c  2010              MOVS     r0,#0x10
                  |L7.78|
;;;147    	}
;;;148    	if(sta&TX_OK)//发送完成
;;;149    	{
;;;150    		return TX_OK;
;;;151    	}
;;;152    	return 0xff;//其他原因发送失败
;;;153    }
00004e  bd70              POP      {r4-r6,pc}
                  |L7.80|
000050  f0140f20          TST      r4,#0x20              ;148
000054  d001              BEQ      |L7.90|
000056  2020              MOVS     r0,#0x20              ;150
000058  e7f9              B        |L7.78|
                  |L7.90|
00005a  20ff              MOVS     r0,#0xff              ;152
00005c  e7f7              B        |L7.78|
;;;154    /*====================================================================================================*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L7.96|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Write_Buf||, CODE, READONLY, ALIGN=2

                  NRF24L01_Write_Buf PROC
;;;113    /*====================================================================================================*/
;;;114    u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;116    	  u8 status,u8_ctr;	    
;;;117     	  NRF24L01_CSN_L();          //使能SPI传输
00000a  2110              MOVS     r1,#0x10
00000c  480b              LDR      r0,|L8.60|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;118      	status = SPI1_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       SPI1_ReadWriteByte
000018  4680              MOV      r8,r0
;;;119      	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI1_ReadWriteByte(*pBuf++); //写入数据	 
00001a  2600              MOVS     r6,#0
00001c  e005              B        |L8.42|
                  |L8.30|
00001e  f8140b01          LDRB     r0,[r4],#1
000022  f7fffffe          BL       SPI1_ReadWriteByte
000026  1c70              ADDS     r0,r6,#1
000028  b2c6              UXTB     r6,r0
                  |L8.42|
00002a  42ae              CMP      r6,r5
00002c  dbf7              BLT      |L8.30|
;;;120      	NRF24L01_CSN_H();       //关闭SPI传输
00002e  2110              MOVS     r1,#0x10
000030  4802              LDR      r0,|L8.60|
000032  f7fffffe          BL       GPIO_SetBits
;;;121      	return status;          //返回读到的状态值
000036  4640              MOV      r0,r8
;;;122    }				   
000038  e8bd81f0          POP      {r4-r8,pc}
;;;123    /*====================================================================================================*/
                          ENDP

                  |L8.60|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_Write_Reg||, CODE, READONLY, ALIGN=2

                  NRF24L01_Write_Reg PROC
;;;59     /*====================================================================================================*/
;;;60     u8 NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
000000  b570              PUSH     {r4-r6,lr}
;;;61     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;62     	  u8 status;	
;;;63        	NRF24L01_CSN_L();                 //使能SPI传输
000006  2110              MOVS     r1,#0x10
000008  4807              LDR      r0,|L9.40|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;64       	status =SPI1_ReadWriteByte(reg);//发送寄存器号 
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       SPI1_ReadWriteByte
000014  4606              MOV      r6,r0
;;;65       	SPI1_ReadWriteByte(value);      //写入寄存器的值
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       SPI1_ReadWriteByte
;;;66       	NRF24L01_CSN_H();                 //禁止SPI传输	   
00001c  2110              MOVS     r1,#0x10
00001e  4802              LDR      r0,|L9.40|
000020  f7fffffe          BL       GPIO_SetBits
;;;67       	return(status);       			//返回状态值
000024  4630              MOV      r0,r6
;;;68     }
000026  bd70              POP      {r4-r6,pc}
;;;69     /*====================================================================================================*/
                          ENDP

                  |L9.40|
                          DCD      0x40010800

                          AREA ||.data||, DATA, ALIGN=0

                  TX_ADDRESS
000000  e1e2e3e4          DCB      0xe1,0xe2,0xe3,0xe4
000004  e5                DCB      0xe5
                  RX_ADDRESS
000005  e1e2e3            DCB      0xe1,0xe2,0xe3
000008  e4e5              DCB      0xe4,0xe5
